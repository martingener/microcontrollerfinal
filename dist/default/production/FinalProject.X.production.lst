

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Thu May 09 22:38:35 2019

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	idataBANK1,global,class=CODE,delta=1
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    18                           	psect	text0,global,reloc=2,class=CODE,delta=1
    19                           	psect	text1,global,reloc=2,class=CODE,delta=1
    20                           	psect	text2,global,reloc=2,class=CODE,delta=1
    21                           	psect	text3,global,reloc=2,class=CODE,delta=1
    22                           	psect	text4,global,reloc=2,class=CODE,delta=1
    23                           	psect	text5,global,reloc=2,class=CODE,delta=1
    24                           	psect	text6,global,reloc=2,class=CODE,delta=1
    25                           	psect	text7,global,reloc=2,class=CODE,delta=1
    26                           	psect	text8,global,reloc=2,class=CODE,delta=1
    27                           	psect	text9,global,reloc=2,class=CODE,delta=1
    28                           	psect	text10,global,reloc=2,class=CODE,delta=1
    29                           	psect	text11,global,reloc=2,class=CODE,delta=1
    30                           	psect	text12,global,reloc=2,class=CODE,delta=1
    31                           	psect	text13,global,reloc=2,class=CODE,delta=1
    32                           	psect	text14,global,reloc=2,class=CODE,delta=1
    33                           	psect	text15,global,reloc=2,class=CODE,delta=1
    34                           	psect	text16,global,reloc=2,class=CODE,delta=1
    35                           	psect	text17,global,reloc=2,class=CODE,delta=1
    36                           	psect	text18,global,reloc=2,class=CODE,delta=1
    37                           	psect	text19,global,reloc=2,class=CODE,delta=1
    38                           	psect	text20,global,reloc=2,class=CODE,delta=1
    39                           	psect	text21,global,reloc=2,class=CODE,delta=1
    40                           	psect	text22,global,reloc=2,class=CODE,delta=1
    41                           	psect	text23,global,reloc=2,class=CODE,delta=1
    42                           	psect	text24,global,reloc=2,class=CODE,delta=1
    43                           	psect	text25,global,reloc=2,class=CODE,delta=1
    44                           	psect	text26,global,reloc=2,class=CODE,delta=1
    45                           	psect	text27,global,reloc=2,class=CODE,delta=1
    46                           	psect	text28,global,reloc=2,class=CODE,delta=1
    47                           	psect	text29,global,reloc=2,class=CODE,delta=1
    48                           	psect	text30,global,reloc=2,class=CODE,delta=1
    49                           	psect	text31,global,reloc=2,class=CODE,delta=1
    50                           	psect	text32,global,reloc=2,class=CODE,delta=1
    51                           	psect	text33,global,reloc=2,class=CODE,delta=1
    52                           	psect	text34,global,reloc=2,class=CODE,delta=1
    53                           	psect	text35,global,reloc=2,class=CODE,delta=1
    54                           	psect	text36,global,reloc=2,class=CODE,delta=1
    55                           	psect	text37,global,reloc=2,class=CODE,delta=1
    56                           	psect	text38,global,reloc=2,class=CODE,delta=1
    57                           	psect	text39,global,reloc=2,class=CODE,delta=1
    58                           	psect	text40,global,reloc=2,class=CODE,delta=1
    59                           	psect	text41,global,reloc=2,class=CODE,delta=1
    60                           	psect	text42,global,reloc=2,class=CODE,delta=1
    61                           	psect	text43,global,reloc=2,class=CODE,delta=1
    62                           	psect	text44,global,reloc=2,class=CODE,delta=1
    63                           	psect	text45,global,reloc=2,class=CODE,delta=1
    64                           	psect	text46,global,reloc=2,class=CODE,delta=1
    65                           	psect	text47,global,reloc=2,class=CODE,delta=1
    66                           	psect	text48,global,reloc=2,class=CODE,delta=1
    67                           	psect	text49,global,reloc=2,class=CODE,delta=1
    68                           	psect	text50,global,reloc=2,class=CODE,delta=1
    69                           	psect	text51,global,reloc=2,class=CODE,delta=1
    70                           	psect	text52,global,reloc=2,class=CODE,delta=1
    71                           	psect	text53,global,reloc=2,class=CODE,delta=1
    72                           	psect	text54,global,reloc=2,class=CODE,delta=1
    73                           	psect	text55,global,reloc=2,class=CODE,delta=1
    74                           	psect	text56,global,reloc=2,class=CODE,delta=1
    75                           	psect	text57,global,reloc=2,class=CODE,delta=1
    76                           	psect	text58,global,reloc=2,class=CODE,delta=1
    77                           	psect	text59,global,reloc=2,class=CODE,delta=1
    78                           	psect	text60,global,reloc=2,class=CODE,delta=1
    79                           	psect	text61,global,reloc=2,class=CODE,delta=1
    80                           	psect	text62,global,reloc=2,class=CODE,delta=1
    81                           	psect	text63,global,reloc=2,class=CODE,delta=1
    82                           	psect	text64,global,reloc=2,class=CODE,delta=1
    83                           	psect	text65,global,reloc=2,class=CODE,delta=1
    84                           	psect	text66,global,reloc=2,class=CODE,delta=1
    85                           	psect	text67,global,reloc=2,class=CODE,delta=1
    86                           	psect	text68,global,reloc=2,class=CODE,delta=1
    87                           	psect	text69,global,reloc=2,class=CODE,delta=1
    88                           	psect	text70,global,reloc=2,class=CODE,delta=1
    89                           	psect	text71,global,reloc=2,class=CODE,delta=1
    90                           	psect	text72,global,reloc=2,class=CODE,delta=1
    91                           	psect	text73,global,reloc=2,class=CODE,delta=1
    92                           	psect	text74,global,reloc=2,class=CODE,delta=1
    93                           	psect	text75,global,reloc=2,class=CODE,delta=1
    94                           	psect	text76,global,reloc=2,class=CODE,delta=1
    95                           	psect	text77,global,reloc=2,class=CODE,delta=1
    96                           	psect	text78,global,reloc=2,class=CODE,delta=1
    97                           	psect	text79,global,reloc=2,class=CODE,delta=1
    98                           	psect	text80,global,reloc=2,class=CODE,delta=1
    99                           	psect	text81,global,reloc=2,class=CODE,delta=1
   100                           	psect	text82,global,reloc=2,class=CODE,delta=1
   101                           	psect	text83,global,reloc=2,class=CODE,delta=1
   102                           	psect	text84,global,reloc=2,class=CODE,delta=1
   103                           	psect	text85,global,reloc=2,class=CODE,delta=1
   104                           	psect	text86,global,reloc=2,class=CODE,delta=1
   105                           	psect	text87,global,reloc=2,class=CODE,delta=1
   106                           	psect	text88,global,reloc=2,class=CODE,delta=1
   107                           	psect	text89,global,reloc=2,class=CODE,delta=1
   108                           	psect	text90,global,reloc=2,class=CODE,delta=1
   109                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   110                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
   111                           	psect	text92,global,reloc=2,class=CODE,delta=1
   112                           	psect	text93,global,reloc=2,class=CODE,delta=1
   113                           	psect	text94,global,reloc=2,class=CODE,delta=1
   114                           	psect	text95,global,reloc=2,class=CODE,delta=1
   115                           	psect	text96,global,reloc=2,class=CODE,delta=1
   116                           	psect	text97,global,reloc=2,class=CODE,delta=1
   117                           	psect	text98,global,reloc=2,class=CODE,delta=1
   118                           	psect	text99,global,reloc=2,class=CODE,delta=1
   119                           	psect	text100,global,reloc=2,class=CODE,delta=1
   120                           	psect	text101,global,reloc=2,class=CODE,delta=1
   121                           	psect	text102,global,reloc=2,class=CODE,delta=1
   122                           	psect	text103,global,reloc=2,class=CODE,delta=1
   123                           	psect	text104,global,reloc=2,class=CODE,delta=1
   124                           	psect	text105,global,reloc=2,class=CODE,delta=1
   125                           	psect	text106,global,reloc=2,class=CODE,delta=1
   126                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
   127                           	psect	rparam,global,class=COMRAM,space=1,delta=1
   128  0000                     
   129                           	psect	idataCOMRAM
   130  004CB0                     __pidataCOMRAM:
   131                           	opt stack 0
   132                           
   133                           ;initializer for _wrap
   134  004CB0  01                 	db	1
   135                           
   136                           	psect	idataBANK0
   137  004834                     __pidataBANK0:
   138                           	opt stack 0
   139                           
   140                           ;initializer for _date
   141  004834  30                 	db	48
   142  004835  31                 	db	49
   143  004836  2F                 	db	47
   144  004837  30                 	db	48
   145  004838  31                 	db	49
   146  004839  2F                 	db	47
   147  00483A  30                 	db	48
   148  00483B  30                 	db	48
   149  00483C  00                 	db	0
   150                           
   151                           ;initializer for _setup_time
   152  00483D  30                 	db	48
   153  00483E  30                 	db	48
   154  00483F  3A                 	db	58
   155  004840  30                 	db	48
   156  004841  30                 	db	48
   157  004842  3A                 	db	58
   158  004843  30                 	db	48
   159  004844  30                 	db	48
   160  004845  00                 	db	0
   161                           
   162                           ;initializer for _time
   163  004846  30                 	db	48
   164  004847  30                 	db	48
   165  004848  3A                 	db	58
   166  004849  30                 	db	48
   167  00484A  30                 	db	48
   168  00484B  3A                 	db	58
   169  00484C  30                 	db	48
   170  00484D  30                 	db	48
   171  00484E  00                 	db	0
   172                           
   173                           ;initializer for _alarm_text
   174  00484F  4F                 	db	79
   175  004850  46                 	db	70
   176  004851  46                 	db	70
   177  004852  00                 	db	0
   178                           
   179                           ;initializer for _heater_text
   180  004853  4F                 	db	79
   181  004854  46                 	db	70
   182  004855  46                 	db	70
   183  004856  00                 	db	0
   184                           
   185                           ;initializer for _LED_Int_text
   186  004857  30                 	db	48
   187  004858  30                 	db	48
   188  004859  00                 	db	0
   189                           
   190                           ;initializer for _heater_S_text
   191  00485A  36                 	db	54
   192  00485B  30                 	db	48
   193  00485C  00                 	db	0
   194                           
   195                           ;initializer for _setup_heater_S_text
   196  00485D  36                 	db	54
   197  00485E  30                 	db	48
   198  00485F  00                 	db	0
   199                           
   200                           ;initializer for _tempC
   201  004860  32                 	db	50
   202  004861  35                 	db	53
   203  004862  00                 	db	0
   204                           
   205                           ;initializer for _tempF
   206  004863  37                 	db	55
   207  004864  37                 	db	55
   208  004865  00                 	db	0
   209                           
   210                           	psect	idataBANK1
   211  0048CA                     __pidataBANK1:
   212                           	opt stack 0
   213                           
   214                           ;initializer for _buffer
   215  0048CA  20                 	db	32
   216  0048CB  45                 	db	69
   217  0048CC  43                 	db	67
   218  0048CD  45                 	db	69
   219  0048CE  33                 	db	51
   220  0048CF  33                 	db	51
   221  0048D0  30                 	db	48
   222  0048D1  31                 	db	49
   223  0048D2  4C                 	db	76
   224  0048D3  20                 	db	32
   225  0048D4  53                 	db	83
   226  0048D5  70                 	db	112
   227  0048D6  72                 	db	114
   228  0048D7  69                 	db	105
   229  0048D8  6E                 	db	110
   230  0048D9  67                 	db	103
   231  0048DA  20                 	db	32
   232  0048DB  32                 	db	50
   233  0048DC  30                 	db	48
   234  0048DD  31                 	db	49
   235  0048DE  39                 	db	57
   236  0048DF  00                 	db	0
   237  0048E0  00                 	db	0
   238  0048E1  00                 	db	0
   239  0048E2  00                 	db	0
   240  0048E3  00                 	db	0
   241  0048E4  00                 	db	0
   242  0048E5  00                 	db	0
   243  0048E6  00                 	db	0
   244  0048E7  00                 	db	0
   245  0048E8  00                 	db	0
   246                           
   247                           ;initializer for _setup_alarm_time
   248  0048E9  30                 	db	48
   249  0048EA  30                 	db	48
   250  0048EB  3A                 	db	58
   251  0048EC  30                 	db	48
   252  0048ED  30                 	db	48
   253  0048EE  3A                 	db	58
   254  0048EF  30                 	db	48
   255  0048F0  30                 	db	48
   256  0048F1  00                 	db	0
   257                           
   258                           ;initializer for _setup_date
   259  0048F2  30                 	db	48
   260  0048F3  31                 	db	49
   261  0048F4  2F                 	db	47
   262  0048F5  30                 	db	48
   263  0048F6  31                 	db	49
   264  0048F7  2F                 	db	47
   265  0048F8  30                 	db	48
   266  0048F9  30                 	db	48
   267  0048FA  00                 	db	0
   268                           
   269                           	psect	mediumconst
   270  00FCB8                     __pmediumconst:
   271                           	opt stack 0
   272  00FCB8  00                 	db	0
   273  00FCB9                     _font:
   274                           	opt stack 0
   275  00FCB9  00                 	db	0
   276  00FCBA  00                 	db	0
   277  00FCBB  00                 	db	0
   278  00FCBC  00                 	db	0
   279  00FCBD  00                 	db	0
   280  00FCBE  00                 	db	0
   281  00FCBF  00                 	db	0
   282  00FCC0  5F                 	db	95
   283  00FCC1  00                 	db	0
   284  00FCC2  00                 	db	0
   285  00FCC3  00                 	db	0
   286  00FCC4  07                 	db	7
   287  00FCC5  00                 	db	0
   288  00FCC6  07                 	db	7
   289  00FCC7  00                 	db	0
   290  00FCC8  14                 	db	20
   291  00FCC9  7F                 	db	127
   292  00FCCA  14                 	db	20
   293  00FCCB  7F                 	db	127
   294  00FCCC  14                 	db	20
   295  00FCCD  24                 	db	36
   296  00FCCE  2A                 	db	42
   297  00FCCF  7F                 	db	127
   298  00FCD0  2A                 	db	42
   299  00FCD1  12                 	db	18
   300  00FCD2  23                 	db	35
   301  00FCD3  13                 	db	19
   302  00FCD4  08                 	db	8
   303  00FCD5  64                 	db	100
   304  00FCD6  62                 	db	98
   305  00FCD7  36                 	db	54
   306  00FCD8  49                 	db	73
   307  00FCD9  56                 	db	86
   308  00FCDA  20                 	db	32
   309  00FCDB  50                 	db	80
   310  00FCDC  00                 	db	0
   311  00FCDD  08                 	db	8
   312  00FCDE  07                 	db	7
   313  00FCDF  03                 	db	3
   314  00FCE0  00                 	db	0
   315  00FCE1  00                 	db	0
   316  00FCE2  1C                 	db	28
   317  00FCE3  22                 	db	34
   318  00FCE4  41                 	db	65
   319  00FCE5  00                 	db	0
   320  00FCE6  00                 	db	0
   321  00FCE7  41                 	db	65
   322  00FCE8  22                 	db	34
   323  00FCE9  1C                 	db	28
   324  00FCEA  00                 	db	0
   325  00FCEB  2A                 	db	42
   326  00FCEC  1C                 	db	28
   327  00FCED  7F                 	db	127
   328  00FCEE  1C                 	db	28
   329  00FCEF  2A                 	db	42
   330  00FCF0  08                 	db	8
   331  00FCF1  08                 	db	8
   332  00FCF2  3E                 	db	62
   333  00FCF3  08                 	db	8
   334  00FCF4  08                 	db	8
   335  00FCF5  00                 	db	0
   336  00FCF6  80                 	db	128
   337  00FCF7  70                 	db	112
   338  00FCF8  30                 	db	48
   339  00FCF9  00                 	db	0
   340  00FCFA  08                 	db	8
   341  00FCFB  08                 	db	8
   342  00FCFC  08                 	db	8
   343  00FCFD  08                 	db	8
   344  00FCFE  08                 	db	8
   345  00FCFF  00                 	db	0
   346  00FD00  00                 	db	0
   347  00FD01  60                 	db	96
   348  00FD02  60                 	db	96
   349  00FD03  00                 	db	0
   350  00FD04  20                 	db	32
   351  00FD05  10                 	db	16
   352  00FD06  08                 	db	8
   353  00FD07  04                 	db	4
   354  00FD08  02                 	db	2
   355  00FD09  3E                 	db	62
   356  00FD0A  51                 	db	81
   357  00FD0B  49                 	db	73
   358  00FD0C  45                 	db	69
   359  00FD0D  3E                 	db	62
   360  00FD0E  00                 	db	0
   361  00FD0F  42                 	db	66
   362  00FD10  7F                 	db	127
   363  00FD11  40                 	db	64
   364  00FD12  00                 	db	0
   365  00FD13  72                 	db	114
   366  00FD14  49                 	db	73
   367  00FD15  49                 	db	73
   368  00FD16  49                 	db	73
   369  00FD17  46                 	db	70
   370  00FD18  21                 	db	33
   371  00FD19  41                 	db	65
   372  00FD1A  49                 	db	73
   373  00FD1B  4D                 	db	77
   374  00FD1C  33                 	db	51
   375  00FD1D  18                 	db	24
   376  00FD1E  14                 	db	20
   377  00FD1F  12                 	db	18
   378  00FD20  7F                 	db	127
   379  00FD21  10                 	db	16
   380  00FD22  27                 	db	39
   381  00FD23  45                 	db	69
   382  00FD24  45                 	db	69
   383  00FD25  45                 	db	69
   384  00FD26  39                 	db	57
   385  00FD27  3C                 	db	60
   386  00FD28  4A                 	db	74
   387  00FD29  49                 	db	73
   388  00FD2A  49                 	db	73
   389  00FD2B  31                 	db	49
   390  00FD2C  41                 	db	65
   391  00FD2D  21                 	db	33
   392  00FD2E  11                 	db	17
   393  00FD2F  09                 	db	9
   394  00FD30  07                 	db	7
   395  00FD31  36                 	db	54
   396  00FD32  49                 	db	73
   397  00FD33  49                 	db	73
   398  00FD34  49                 	db	73
   399  00FD35  36                 	db	54
   400  00FD36  46                 	db	70
   401  00FD37  49                 	db	73
   402  00FD38  49                 	db	73
   403  00FD39  29                 	db	41
   404  00FD3A  1E                 	db	30
   405  00FD3B  00                 	db	0
   406  00FD3C  00                 	db	0
   407  00FD3D  14                 	db	20
   408  00FD3E  00                 	db	0
   409  00FD3F  00                 	db	0
   410  00FD40  00                 	db	0
   411  00FD41  40                 	db	64
   412  00FD42  34                 	db	52
   413  00FD43  00                 	db	0
   414  00FD44  00                 	db	0
   415  00FD45  00                 	db	0
   416  00FD46  08                 	db	8
   417  00FD47  14                 	db	20
   418  00FD48  22                 	db	34
   419  00FD49  41                 	db	65
   420  00FD4A  14                 	db	20
   421  00FD4B  14                 	db	20
   422  00FD4C  14                 	db	20
   423  00FD4D  14                 	db	20
   424  00FD4E  14                 	db	20
   425  00FD4F  00                 	db	0
   426  00FD50  41                 	db	65
   427  00FD51  22                 	db	34
   428  00FD52  14                 	db	20
   429  00FD53  08                 	db	8
   430  00FD54  02                 	db	2
   431  00FD55  01                 	db	1
   432  00FD56  59                 	db	89
   433  00FD57  09                 	db	9
   434  00FD58  06                 	db	6
   435  00FD59  3E                 	db	62
   436  00FD5A  41                 	db	65
   437  00FD5B  5D                 	db	93
   438  00FD5C  59                 	db	89
   439  00FD5D  4E                 	db	78
   440  00FD5E  7C                 	db	124
   441  00FD5F  12                 	db	18
   442  00FD60  11                 	db	17
   443  00FD61  12                 	db	18
   444  00FD62  7C                 	db	124
   445  00FD63  7F                 	db	127
   446  00FD64  49                 	db	73
   447  00FD65  49                 	db	73
   448  00FD66  49                 	db	73
   449  00FD67  36                 	db	54
   450  00FD68  3E                 	db	62
   451  00FD69  41                 	db	65
   452  00FD6A  41                 	db	65
   453  00FD6B  41                 	db	65
   454  00FD6C  22                 	db	34
   455  00FD6D  7F                 	db	127
   456  00FD6E  41                 	db	65
   457  00FD6F  41                 	db	65
   458  00FD70  41                 	db	65
   459  00FD71  3E                 	db	62
   460  00FD72  7F                 	db	127
   461  00FD73  49                 	db	73
   462  00FD74  49                 	db	73
   463  00FD75  49                 	db	73
   464  00FD76  41                 	db	65
   465  00FD77  7F                 	db	127
   466  00FD78  09                 	db	9
   467  00FD79  09                 	db	9
   468  00FD7A  09                 	db	9
   469  00FD7B  01                 	db	1
   470  00FD7C  3E                 	db	62
   471  00FD7D  41                 	db	65
   472  00FD7E  41                 	db	65
   473  00FD7F  51                 	db	81
   474  00FD80  73                 	db	115
   475  00FD81  7F                 	db	127
   476  00FD82  08                 	db	8
   477  00FD83  08                 	db	8
   478  00FD84  08                 	db	8
   479  00FD85  7F                 	db	127
   480  00FD86  00                 	db	0
   481  00FD87  41                 	db	65
   482  00FD88  7F                 	db	127
   483  00FD89  41                 	db	65
   484  00FD8A  00                 	db	0
   485  00FD8B  20                 	db	32
   486  00FD8C  40                 	db	64
   487  00FD8D  41                 	db	65
   488  00FD8E  3F                 	db	63
   489  00FD8F  01                 	db	1
   490  00FD90  7F                 	db	127
   491  00FD91  08                 	db	8
   492  00FD92  14                 	db	20
   493  00FD93  22                 	db	34
   494  00FD94  41                 	db	65
   495  00FD95  7F                 	db	127
   496  00FD96  40                 	db	64
   497  00FD97  40                 	db	64
   498  00FD98  40                 	db	64
   499  00FD99  40                 	db	64
   500  00FD9A  7F                 	db	127
   501  00FD9B  02                 	db	2
   502  00FD9C  1C                 	db	28
   503  00FD9D  02                 	db	2
   504  00FD9E  7F                 	db	127
   505  00FD9F  7F                 	db	127
   506  00FDA0  04                 	db	4
   507  00FDA1  08                 	db	8
   508  00FDA2  10                 	db	16
   509  00FDA3  7F                 	db	127
   510  00FDA4  3E                 	db	62
   511  00FDA5  41                 	db	65
   512  00FDA6  41                 	db	65
   513  00FDA7  41                 	db	65
   514  00FDA8  3E                 	db	62
   515  00FDA9  7F                 	db	127
   516  00FDAA  09                 	db	9
   517  00FDAB  09                 	db	9
   518  00FDAC  09                 	db	9
   519  00FDAD  06                 	db	6
   520  00FDAE  3E                 	db	62
   521  00FDAF  41                 	db	65
   522  00FDB0  51                 	db	81
   523  00FDB1  21                 	db	33
   524  00FDB2  5E                 	db	94
   525  00FDB3  7F                 	db	127
   526  00FDB4  09                 	db	9
   527  00FDB5  19                 	db	25
   528  00FDB6  29                 	db	41
   529  00FDB7  46                 	db	70
   530  00FDB8                     __end_of_font:
   531                           	opt stack 0
   532  00FDB8                     _font2:
   533                           	opt stack 0
   534  00FDB8  26                 	db	38
   535  00FDB9  49                 	db	73
   536  00FDBA  49                 	db	73
   537  00FDBB  49                 	db	73
   538  00FDBC  32                 	db	50
   539  00FDBD  03                 	db	3
   540  00FDBE  01                 	db	1
   541  00FDBF  7F                 	db	127
   542  00FDC0  01                 	db	1
   543  00FDC1  03                 	db	3
   544  00FDC2  3F                 	db	63
   545  00FDC3  40                 	db	64
   546  00FDC4  40                 	db	64
   547  00FDC5  40                 	db	64
   548  00FDC6  3F                 	db	63
   549  00FDC7  1F                 	db	31
   550  00FDC8  20                 	db	32
   551  00FDC9  40                 	db	64
   552  00FDCA  20                 	db	32
   553  00FDCB  1F                 	db	31
   554  00FDCC  3F                 	db	63
   555  00FDCD  40                 	db	64
   556  00FDCE  38                 	db	56
   557  00FDCF  40                 	db	64
   558  00FDD0  3F                 	db	63
   559  00FDD1  63                 	db	99
   560  00FDD2  14                 	db	20
   561  00FDD3  08                 	db	8
   562  00FDD4  14                 	db	20
   563  00FDD5  63                 	db	99
   564  00FDD6  03                 	db	3
   565  00FDD7  04                 	db	4
   566  00FDD8  78                 	db	120
   567  00FDD9  04                 	db	4
   568  00FDDA  03                 	db	3
   569  00FDDB  61                 	db	97
   570  00FDDC  59                 	db	89
   571  00FDDD  49                 	db	73
   572  00FDDE  4D                 	db	77
   573  00FDDF  43                 	db	67
   574  00FDE0  00                 	db	0
   575  00FDE1  7F                 	db	127
   576  00FDE2  41                 	db	65
   577  00FDE3  41                 	db	65
   578  00FDE4  41                 	db	65
   579  00FDE5  02                 	db	2
   580  00FDE6  04                 	db	4
   581  00FDE7  08                 	db	8
   582  00FDE8  10                 	db	16
   583  00FDE9  20                 	db	32
   584  00FDEA  00                 	db	0
   585  00FDEB  41                 	db	65
   586  00FDEC  41                 	db	65
   587  00FDED  41                 	db	65
   588  00FDEE  7F                 	db	127
   589  00FDEF  04                 	db	4
   590  00FDF0  02                 	db	2
   591  00FDF1  01                 	db	1
   592  00FDF2  02                 	db	2
   593  00FDF3  04                 	db	4
   594  00FDF4  40                 	db	64
   595  00FDF5  40                 	db	64
   596  00FDF6  40                 	db	64
   597  00FDF7  40                 	db	64
   598  00FDF8  40                 	db	64
   599  00FDF9  00                 	db	0
   600  00FDFA  03                 	db	3
   601  00FDFB  07                 	db	7
   602  00FDFC  08                 	db	8
   603  00FDFD  00                 	db	0
   604  00FDFE  20                 	db	32
   605  00FDFF  54                 	db	84
   606  00FE00  54                 	db	84
   607  00FE01  78                 	db	120
   608  00FE02  40                 	db	64
   609  00FE03  7F                 	db	127
   610  00FE04  28                 	db	40
   611  00FE05  44                 	db	68
   612  00FE06  44                 	db	68
   613  00FE07  38                 	db	56
   614  00FE08  38                 	db	56
   615  00FE09  44                 	db	68
   616  00FE0A  44                 	db	68
   617  00FE0B  44                 	db	68
   618  00FE0C  28                 	db	40
   619  00FE0D  38                 	db	56
   620  00FE0E  44                 	db	68
   621  00FE0F  44                 	db	68
   622  00FE10  28                 	db	40
   623  00FE11  7F                 	db	127
   624  00FE12  38                 	db	56
   625  00FE13  54                 	db	84
   626  00FE14  54                 	db	84
   627  00FE15  54                 	db	84
   628  00FE16  18                 	db	24
   629  00FE17  00                 	db	0
   630  00FE18  08                 	db	8
   631  00FE19  7E                 	db	126
   632  00FE1A  09                 	db	9
   633  00FE1B  02                 	db	2
   634  00FE1C  18                 	db	24
   635  00FE1D  A4                 	db	164
   636  00FE1E  A4                 	db	164
   637  00FE1F  9C                 	db	156
   638  00FE20  78                 	db	120
   639  00FE21  7F                 	db	127
   640  00FE22  08                 	db	8
   641  00FE23  04                 	db	4
   642  00FE24  04                 	db	4
   643  00FE25  78                 	db	120
   644  00FE26  00                 	db	0
   645  00FE27  44                 	db	68
   646  00FE28  7D                 	db	125
   647  00FE29  40                 	db	64
   648  00FE2A  00                 	db	0
   649  00FE2B  20                 	db	32
   650  00FE2C  40                 	db	64
   651  00FE2D  40                 	db	64
   652  00FE2E  3D                 	db	61
   653  00FE2F  00                 	db	0
   654  00FE30  7F                 	db	127
   655  00FE31  10                 	db	16
   656  00FE32  28                 	db	40
   657  00FE33  44                 	db	68
   658  00FE34  00                 	db	0
   659  00FE35  00                 	db	0
   660  00FE36  41                 	db	65
   661  00FE37  7F                 	db	127
   662  00FE38  40                 	db	64
   663  00FE39  00                 	db	0
   664  00FE3A  7C                 	db	124
   665  00FE3B  04                 	db	4
   666  00FE3C  78                 	db	120
   667  00FE3D  04                 	db	4
   668  00FE3E  78                 	db	120
   669  00FE3F  7C                 	db	124
   670  00FE40  08                 	db	8
   671  00FE41  04                 	db	4
   672  00FE42  04                 	db	4
   673  00FE43  78                 	db	120
   674  00FE44  38                 	db	56
   675  00FE45  44                 	db	68
   676  00FE46  44                 	db	68
   677  00FE47  44                 	db	68
   678  00FE48  38                 	db	56
   679  00FE49  FC                 	db	252
   680  00FE4A  18                 	db	24
   681  00FE4B  24                 	db	36
   682  00FE4C  24                 	db	36
   683  00FE4D  18                 	db	24
   684  00FE4E  18                 	db	24
   685  00FE4F  24                 	db	36
   686  00FE50  24                 	db	36
   687  00FE51  18                 	db	24
   688  00FE52  FC                 	db	252
   689  00FE53  7C                 	db	124
   690  00FE54  08                 	db	8
   691  00FE55  04                 	db	4
   692  00FE56  04                 	db	4
   693  00FE57  08                 	db	8
   694  00FE58  48                 	db	72
   695  00FE59  54                 	db	84
   696  00FE5A  54                 	db	84
   697  00FE5B  54                 	db	84
   698  00FE5C  24                 	db	36
   699  00FE5D  04                 	db	4
   700  00FE5E  04                 	db	4
   701  00FE5F  3F                 	db	63
   702  00FE60  44                 	db	68
   703  00FE61  24                 	db	36
   704  00FE62  3C                 	db	60
   705  00FE63  40                 	db	64
   706  00FE64  40                 	db	64
   707  00FE65  20                 	db	32
   708  00FE66  7C                 	db	124
   709  00FE67  1C                 	db	28
   710  00FE68  20                 	db	32
   711  00FE69  40                 	db	64
   712  00FE6A  20                 	db	32
   713  00FE6B  1C                 	db	28
   714  00FE6C  3C                 	db	60
   715  00FE6D  40                 	db	64
   716  00FE6E  30                 	db	48
   717  00FE6F  40                 	db	64
   718  00FE70  3C                 	db	60
   719  00FE71  44                 	db	68
   720  00FE72  28                 	db	40
   721  00FE73  10                 	db	16
   722  00FE74  28                 	db	40
   723  00FE75  44                 	db	68
   724  00FE76  4C                 	db	76
   725  00FE77  90                 	db	144
   726  00FE78  90                 	db	144
   727  00FE79  90                 	db	144
   728  00FE7A  7C                 	db	124
   729  00FE7B  44                 	db	68
   730  00FE7C  64                 	db	100
   731  00FE7D  54                 	db	84
   732  00FE7E  4C                 	db	76
   733  00FE7F  44                 	db	68
   734  00FE80  00                 	db	0
   735  00FE81  08                 	db	8
   736  00FE82  36                 	db	54
   737  00FE83  41                 	db	65
   738  00FE84  00                 	db	0
   739  00FE85  00                 	db	0
   740  00FE86  00                 	db	0
   741  00FE87  77                 	db	119
   742  00FE88  00                 	db	0
   743  00FE89  00                 	db	0
   744  00FE8A  00                 	db	0
   745  00FE8B  41                 	db	65
   746  00FE8C  36                 	db	54
   747  00FE8D  08                 	db	8
   748  00FE8E  00                 	db	0
   749  00FE8F  02                 	db	2
   750  00FE90  01                 	db	1
   751  00FE91  02                 	db	2
   752  00FE92  04                 	db	4
   753  00FE93  02                 	db	2
   754  00FE94                     __end_of_font2:
   755                           	opt stack 0
   756  00FE94                     _dpowers:
   757                           	opt stack 0
   758  00FE94  0001               	dw	1
   759  00FE96  0000               	dw	0
   760  00FE98  000A               	dw	10
   761  00FE9A  0000               	dw	0
   762  00FE9C  0064               	dw	100
   763  00FE9E  0000               	dw	0
   764  00FEA0  03E8               	dw	1000
   765  00FEA2  0000               	dw	0
   766  00FEA4  2710               	dw	10000
   767  00FEA6  0000               	dw	0
   768  00FEA8  86A0               	dw	34464
   769  00FEAA  0001               	dw	1
   770  00FEAC  4240               	dw	16960
   771  00FEAE  000F               	dw	15
   772  00FEB0  9680               	dw	38528
   773  00FEB2  0098               	dw	152
   774  00FEB4  E100               	dw	57600
   775  00FEB6  05F5               	dw	1525
   776  00FEB8  CA00               	dw	51712
   777  00FEBA  3B9A               	dw	15258
   778  00FEBC                     __end_of_dpowers:
   779                           	opt stack 0
   780  00FEBC                     __npowers_:
   781                           	opt stack 0
   782  00FEBC  00                 	db	0
   783  00FEBD  80                 	db	128
   784  00FEBE  3F                 	db	63
   785  00FEBF  CD                 	db	205
   786  00FEC0  CC                 	db	204
   787  00FEC1  3D                 	db	61
   788  00FEC2  D7                 	db	215
   789  00FEC3  23                 	db	35
   790  00FEC4  3C                 	db	60
   791  00FEC5  12                 	db	18
   792  00FEC6  83                 	db	131
   793  00FEC7  3A                 	db	58
   794  00FEC8  B7                 	db	183
   795  00FEC9  D1                 	db	209
   796  00FECA  38                 	db	56
   797  00FECB  C6                 	db	198
   798  00FECC  27                 	db	39
   799  00FECD  37                 	db	55
   800  00FECE  38                 	db	56
   801  00FECF  86                 	db	134
   802  00FED0  35                 	db	53
   803  00FED1  C0                 	db	192
   804  00FED2  D6                 	db	214
   805  00FED3  33                 	db	51
   806  00FED4  CC                 	db	204
   807  00FED5  2B                 	db	43
   808  00FED6  32                 	db	50
   809  00FED7  70                 	db	112
   810  00FED8  89                 	db	137
   811  00FED9  30                 	db	48
   812  00FEDA  E7                 	db	231
   813  00FEDB  DB                 	db	219
   814  00FEDC  2E                 	db	46
   815  00FEDD  E5                 	db	229
   816  00FEDE  3C                 	db	60
   817  00FEDF  1E                 	db	30
   818  00FEE0  42                 	db	66
   819  00FEE1  A2                 	db	162
   820  00FEE2  0D                 	db	13
   821  00FEE3                     __end_of__npowers_:
   822                           	opt stack 0
   823  00FEE3                     __powers_:
   824                           	opt stack 0
   825  00FEE3  00                 	db	0
   826  00FEE4  80                 	db	128
   827  00FEE5  3F                 	db	63
   828  00FEE6  00                 	db	0
   829  00FEE7  20                 	db	32
   830  00FEE8  41                 	db	65
   831  00FEE9  00                 	db	0
   832  00FEEA  C8                 	db	200
   833  00FEEB  42                 	db	66
   834  00FEEC  00                 	db	0
   835  00FEED  7A                 	db	122
   836  00FEEE  44                 	db	68
   837  00FEEF  40                 	db	64
   838  00FEF0  1C                 	db	28
   839  00FEF1  46                 	db	70
   840  00FEF2  50                 	db	80
   841  00FEF3  C3                 	db	195
   842  00FEF4  47                 	db	71
   843  00FEF5  24                 	db	36
   844  00FEF6  74                 	db	116
   845  00FEF7  49                 	db	73
   846  00FEF8  97                 	db	151
   847  00FEF9  18                 	db	24
   848  00FEFA  4B                 	db	75
   849  00FEFB  BC                 	db	188
   850  00FEFC  BE                 	db	190
   851  00FEFD  4C                 	db	76
   852  00FEFE  6B                 	db	107
   853  00FEFF  6E                 	db	110
   854  00FF00  4E                 	db	78
   855  00FF01  03                 	db	3
   856  00FF02  15                 	db	21
   857  00FF03  50                 	db	80
   858  00FF04  79                 	db	121
   859  00FF05  AD                 	db	173
   860  00FF06  60                 	db	96
   861  00FF07  F3                 	db	243
   862  00FF08  49                 	db	73
   863  00FF09  71                 	db	113
   864  00FF0A                     __end_of__powers_:
   865                           	opt stack 0
   866  00FF0A                     _hexpowers:
   867                           	opt stack 0
   868  00FF0A  0001               	dw	1
   869  00FF0C  0000               	dw	0
   870  00FF0E  0010               	dw	16
   871  00FF10  0000               	dw	0
   872  00FF12  0100               	dw	256
   873  00FF14  0000               	dw	0
   874  00FF16  1000               	dw	4096
   875  00FF18  0000               	dw	0
   876  00FF1A  0000               	dw	0
   877  00FF1C  0001               	dw	1
   878  00FF1E  0000               	dw	0
   879  00FF20  0010               	dw	16
   880  00FF22  0000               	dw	0
   881  00FF24  0100               	dw	256
   882  00FF26  0000               	dw	0
   883  00FF28  1000               	dw	4096
   884  00FF2A                     __end_of_hexpowers:
   885                           	opt stack 0
   886  0000                     _ADCON0	set	4034
   887  0000                     _ADCON0bits	set	4034
   888  0000                     _ADCON1	set	4033
   889  0000                     _ADRESH	set	4036
   890  0000                     _ADRESL	set	4035
   891  0000                     _CCP2CON	set	4026
   892  0000                     _CCPR2L	set	4027
   893  0000                     _INTCON2bits	set	4081
   894  0000                     _INTCON3bits	set	4080
   895  0000                     _INTCONbits	set	4082
   896  0000                     _OSCCON	set	4051
   897  0000                     _PIE1bits	set	3997
   898  0000                     _PIR1bits	set	3998
   899  0000                     _PORTAbits	set	3968
   900  0000                     _PORTBbits	set	3969
   901  0000                     _PORTCbits	set	3970
   902  0000                     _PORTD	set	3971
   903  0000                     _PORTDbits	set	3971
   904  0000                     _PORTEbits	set	3972
   905  0000                     _PR2	set	4043
   906  0000                     _RCSTA	set	4011
   907  0000                     _RCSTAbits	set	4011
   908  0000                     _SPBRG	set	4015
   909  0000                     _SPBRGH	set	4016
   910  0000                     _SSPBUF	set	4041
   911  0000                     _SSPCON1	set	4038
   912  0000                     _SSPSTAT	set	4039
   913  0000                     _SSPSTATbits	set	4039
   914  0000                     _T0CON	set	4053
   915  0000                     _T0CONbits	set	4053
   916  0000                     _T1CON	set	4045
   917  0000                     _T1CONbits	set	4045
   918  0000                     _T2CON	set	4042
   919  0000                     _TMR0H	set	4055
   920  0000                     _TMR0L	set	4054
   921  0000                     _TMR1H	set	4047
   922  0000                     _TMR1L	set	4046
   923  0000                     _TRISA	set	3986
   924  0000                     _TRISB	set	3987
   925  0000                     _TRISBbits	set	3987
   926  0000                     _TRISC	set	3988
   927  0000                     _TRISCbits	set	3988
   928  0000                     _TRISD	set	3989
   929  0000                     _TRISE	set	3990
   930  0000                     _TXREG	set	4013
   931  0000                     _TXSTA	set	4012
   932  0000                     _TXSTAbits	set	4012
   933  0000                     _TRMT	set	32097
   934  0000                     _nRBPU	set	32655
   935  00FF2A                     STR_1:
   936  00FF2A  54                 	db	84	;'T'
   937  00FF2B  69                 	db	105	;'i'
   938  00FF2C  6D                 	db	109	;'m'
   939  00FF2D  65                 	db	101	;'e'
   940  00FF2E  3A                 	db	58	;':'
   941  00FF2F  20                 	db	32
   942  00FF30  25                 	db	37
   943  00FF31  30                 	db	48	;'0'
   944  00FF32  32                 	db	50	;'2'
   945  00FF33  78                 	db	120	;'x'
   946  00FF34  3A                 	db	58	;':'
   947  00FF35  25                 	db	37
   948  00FF36  30                 	db	48	;'0'
   949  00FF37  32                 	db	50	;'2'
   950  00FF38  78                 	db	120	;'x'
   951  00FF39  3A                 	db	58	;':'
   952  00FF3A  25                 	db	37
   953  00FF3B  30                 	db	48	;'0'
   954  00FF3C  32                 	db	50	;'2'
   955  00FF3D  78                 	db	120	;'x'
   956  00FF3E  20                 	db	32
   957  00FF3F  20                 	db	32
   958  00FF40  44                 	db	68	;'D'
   959  00FF41  61                 	db	97	;'a'
   960  00FF42  74                 	db	116	;'t'
   961  00FF43  65                 	db	101	;'e'
   962  00FF44  3A                 	db	58	;':'
   963  00FF45  20                 	db	32
   964  00FF46  25                 	db	37
   965  00FF47  30                 	db	48	;'0'
   966  00FF48  32                 	db	50	;'2'
   967  00FF49  78                 	db	120	;'x'
   968  00FF4A  3A                 	db	58	;':'
   969  00FF4B  25                 	db	37
   970  00FF4C  30                 	db	48	;'0'
   971  00FF4D  32                 	db	50	;'2'
   972  00FF4E  78                 	db	120	;'x'
   973  00FF4F  3A                 	db	58	;':'
   974  00FF50  25                 	db	37
   975  00FF51  30                 	db	48	;'0'
   976  00FF52  32                 	db	50	;'2'
   977  00FF53  78                 	db	120	;'x'
   978  00FF54  20                 	db	32
   979  00FF55  20                 	db	32
   980  00FF56  00                 	db	0
   981  00FF57                     STR_4:
   982  00FF57  20                 	db	32
   983  00FF58  45                 	db	69	;'E'
   984  00FF59  43                 	db	67	;'C'
   985  00FF5A  45                 	db	69	;'E'
   986  00FF5B  33                 	db	51	;'3'
   987  00FF5C  33                 	db	51	;'3'
   988  00FF5D  30                 	db	48	;'0'
   989  00FF5E  31                 	db	49	;'1'
   990  00FF5F  4C                 	db	76	;'L'
   991  00FF60  20                 	db	32
   992  00FF61  53                 	db	83	;'S'
   993  00FF62  70                 	db	112	;'p'
   994  00FF63  72                 	db	114	;'r'
   995  00FF64  69                 	db	105	;'i'
   996  00FF65  6E                 	db	110	;'n'
   997  00FF66  67                 	db	103	;'g'
   998  00FF67  20                 	db	32
   999  00FF68  32                 	db	50	;'2'
  1000  00FF69  30                 	db	48	;'0'
  1001  00FF6A  31                 	db	49	;'1'
  1002  00FF6B  39                 	db	57	;'9'
  1003  00FF6C  00                 	db	0
  1004  00FF6D  00                 	db	0
  1005  00FF6E                     STR_2:
  1006  00FF6E  54                 	db	84	;'T'
  1007  00FF6F  65                 	db	101	;'e'
  1008  00FF70  6D                 	db	109	;'m'
  1009  00FF71  70                 	db	112	;'p'
  1010  00FF72  3A                 	db	58	;':'
  1011  00FF73  20                 	db	32
  1012  00FF74  25                 	db	37
  1013  00FF75  32                 	db	50	;'2'
  1014  00FF76  64                 	db	100	;'d'
  1015  00FF77  20                 	db	32
  1016  00FF78  43                 	db	67	;'C'
  1017  00FF79  20                 	db	32
  1018  00FF7A  25                 	db	37
  1019  00FF7B  32                 	db	50	;'2'
  1020  00FF7C  64                 	db	100	;'d'
  1021  00FF7D  20                 	db	32
  1022  00FF7E  46                 	db	70	;'F'
  1023  00FF7F  0D                 	db	13
  1024  00FF80  00                 	db	0
  1025  00FF81                     STR_31:
  1026  00FF81  30                 	db	48	;'0'
  1027  00FF82  31                 	db	49	;'1'
  1028  00FF83  32                 	db	50	;'2'
  1029  00FF84  33                 	db	51	;'3'
  1030  00FF85  34                 	db	52	;'4'
  1031  00FF86  35                 	db	53	;'5'
  1032  00FF87  36                 	db	54	;'6'
  1033  00FF88  37                 	db	55	;'7'
  1034  00FF89  38                 	db	56	;'8'
  1035  00FF8A  39                 	db	57	;'9'
  1036  00FF8B  61                 	db	97	;'a'
  1037  00FF8C  62                 	db	98	;'b'
  1038  00FF8D  63                 	db	99	;'c'
  1039  00FF8E  64                 	db	100	;'d'
  1040  00FF8F  65                 	db	101	;'e'
  1041  00FF90  66                 	db	102	;'f'
  1042  00FF91  00                 	db	0
  1043  00FF92                     STR_13:
  1044  00FF92  48                 	db	72	;'H'
  1045  00FF93  65                 	db	101	;'e'
  1046  00FF94  61                 	db	97	;'a'
  1047  00FF95  74                 	db	116	;'t'
  1048  00FF96  65                 	db	101	;'e'
  1049  00FF97  72                 	db	114	;'r'
  1050  00FF98  20                 	db	32
  1051  00FF99  53                 	db	83	;'S'
  1052  00FF9A  65                 	db	101	;'e'
  1053  00FF9B  74                 	db	116	;'t'
  1054  00FF9C  20                 	db	32
  1055  00FF9D  54                 	db	84	;'T'
  1056  00FF9E  65                 	db	101	;'e'
  1057  00FF9F  6D                 	db	109	;'m'
  1058  00FFA0  70                 	db	112	;'p'
  1059  00FFA1  00                 	db	0
  1060  00FFA2                     STR_5:
  1061  00FFA2  54                 	db	84	;'T'
  1062  00FFA3  65                 	db	101	;'e'
  1063  00FFA4  6D                 	db	109	;'m'
  1064  00FFA5  70                 	db	112	;'p'
  1065  00FFA6  65                 	db	101	;'e'
  1066  00FFA7  72                 	db	114	;'r'
  1067  00FFA8  61                 	db	97	;'a'
  1068  00FFA9  74                 	db	116	;'t'
  1069  00FFAA  75                 	db	117	;'u'
  1070  00FFAB  72                 	db	114	;'r'
  1071  00FFAC  65                 	db	101	;'e'
  1072  00FFAD  3A                 	db	58	;':'
  1073  00FFAE  00                 	db	0
  1074  00FFAF                     STR_20:
  1075  00FFAF  54                 	db	84	;'T'
  1076  00FFB0  69                 	db	105	;'i'
  1077  00FFB1  6D                 	db	109	;'m'
  1078  00FFB2  65                 	db	101	;'e'
  1079  00FFB3  20                 	db	32
  1080  00FFB4  53                 	db	83	;'S'
  1081  00FFB5  65                 	db	101	;'e'
  1082  00FFB6  74                 	db	116	;'t'
  1083  00FFB7  75                 	db	117	;'u'
  1084  00FFB8  70                 	db	112	;'p'
  1085  00FFB9  00                 	db	0
  1086  00FFBA  00                 	db	0
  1087  00FFBB                     STR_3:
  1088  00FFBB  0D                 	db	13
  1089  00FFBC  56                 	db	86	;'V'
  1090  00FFBD  6F                 	db	111	;'o'
  1091  00FFBE  6C                 	db	108	;'l'
  1092  00FFBF  74                 	db	116	;'t'
  1093  00FFC0  20                 	db	32
  1094  00FFC1  3D                 	db	61	;'='
  1095  00FFC2  20                 	db	32
  1096  00FFC3  25                 	db	37
  1097  00FFC4  66                 	db	102	;'f'
  1098  00FFC5  00                 	db	0
  1099  00FFC6                     STR_24:
  1100  00FFC6  41                 	db	65	;'A'
  1101  00FFC7  6C                 	db	108	;'l'
  1102  00FFC8  72                 	db	114	;'r'
  1103  00FFC9  6D                 	db	109	;'m'
  1104  00FFCA  20                 	db	32
  1105  00FFCB  53                 	db	83	;'S'
  1106  00FFCC  65                 	db	101	;'e'
  1107  00FFCD  74                 	db	116	;'t'
  1108  00FFCE  75                 	db	117	;'u'
  1109  00FFCF  70                 	db	112	;'p'
  1110  00FFD0  00                 	db	0
  1111  00FFD1                     STR_27:
  1112  00FFD1  48                 	db	72	;'H'
  1113  00FFD2  65                 	db	101	;'e'
  1114  00FFD3  61                 	db	97	;'a'
  1115  00FFD4  74                 	db	116	;'t'
  1116  00FFD5  65                 	db	101	;'e'
  1117  00FFD6  72                 	db	114	;'r'
  1118  00FFD7  00                 	db	0
  1119  00FFD8  00                 	db	0
  1120  00FFD9                     STR_12:
  1121  00FFD9  48                 	db	72	;'H'
  1122  00FFDA  65                 	db	101	;'e'
  1123  00FFDB  61                 	db	97	;'a'
  1124  00FFDC  74                 	db	116	;'t'
  1125  00FFDD  65                 	db	101	;'e'
  1126  00FFDE  72                 	db	114	;'r'
  1127  00FFDF  00                 	db	0
  1128  00FFE0                     STR_10:
  1129  00FFE0  41                 	db	65	;'A'
  1130  00FFE1  4C                 	db	76	;'L'
  1131  00FFE2  41                 	db	65	;'A'
  1132  00FFE3  52                 	db	82	;'R'
  1133  00FFE4  4D                 	db	77	;'M'
  1134  00FFE5  00                 	db	0
  1135  00FFE6                     STR_8:
  1136  00FFE6  54                 	db	84	;'T'
  1137  00FFE7  69                 	db	105	;'i'
  1138  00FFE8  6D                 	db	109	;'m'
  1139  00FFE9  65                 	db	101	;'e'
  1140  00FFEA  00                 	db	0
  1141  00FFEB                     STR_9:
  1142  00FFEB  44                 	db	68	;'D'
  1143  00FFEC  61                 	db	97	;'a'
  1144  00FFED  74                 	db	116	;'t'
  1145  00FFEE  65                 	db	101	;'e'
  1146  00FFEF  00                 	db	0
  1147  00FFF0                     STR_15:
  1148  00FFF0  4F                 	db	79	;'O'
  1149  00FFF1  4E                 	db	78	;'N'
  1150  00FFF2  20                 	db	32
  1151  00FFF3  00                 	db	0
  1152  00FFF4                     STR_11:
  1153  00FFF4  4C                 	db	76	;'L'
  1154  00FFF5  45                 	db	69	;'E'
  1155  00FFF6  44                 	db	68	;'D'
  1156  00FFF7  00                 	db	0
  1157  00FFF8                     STR_16:
  1158  00FFF8  4F                 	db	79	;'O'
  1159  00FFF9  46                 	db	70	;'F'
  1160  00FFFA  46                 	db	70	;'F'
  1161  00FFFB  00                 	db	0
  1162  00FFFC                     STR_6:
  1163  00FFFC  43                 	db	67	;'C'
  1164  00FFFD  2F                 	db	47
  1165  00FFFE  00                 	db	0
  1166  0000                     
  1167                           ; #config settings
  1168  00FFFF  00                 	db	0	; dummy byte at the end
  1169  0000                     
  1170                           	psect	cinit
  1171  004088                     __pcinit:
  1172                           	opt stack 0
  1173  004088                     start_initialization:
  1174                           	opt stack 0
  1175  004088                     __initialization:
  1176                           	opt stack 0
  1177                           
  1178                           ; Clear objects allocated to BANK0 (30 bytes)
  1179  004088  EE00  F0DB         	lfsr	0,__pbssBANK0
  1180  00408C  0E1E               	movlw	30
  1181  00408E                     clear_0:
  1182  00408E  6AEE               	clrf	postinc0,c
  1183  004090  06E8               	decf	wreg,f,c
  1184  004092  E1FD               	bnz	clear_0
  1185                           
  1186                           ; Clear objects allocated to COMRAM (27 bytes)
  1187  004094  EE00  F049         	lfsr	0,__pbssCOMRAM
  1188  004098  0E1B               	movlw	27
  1189  00409A                     clear_1:
  1190  00409A  6AEE               	clrf	postinc0,c
  1191  00409C  06E8               	decf	wreg,f,c
  1192  00409E  E1FD               	bnz	clear_1
  1193                           
  1194                           ; Initialize objects allocated to BANK1 (49 bytes)
  1195                           ; load TBLPTR registers with __pidataBANK1
  1196  0040A0  0ECA               	movlw	low __pidataBANK1
  1197  0040A2  6EF6               	movwf	tblptrl,c
  1198  0040A4  0E48               	movlw	high __pidataBANK1
  1199  0040A6  6EF7               	movwf	tblptrh,c
  1200  0040A8  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1201  0040AA  6EF8               	movwf	tblptru,c
  1202  0040AC  EE01  F000         	lfsr	0,__pdataBANK1
  1203  0040B0  EE10 F031          	lfsr	1,49
  1204  0040B4                     copy_data0:
  1205  0040B4  0009               	tblrd		*+
  1206  0040B6  CFF5 FFEE          	movff	tablat,postinc0
  1207  0040BA  50E5               	movf	postdec1,w,c
  1208  0040BC  50E1               	movf	fsr1l,w,c
  1209  0040BE  E1FA               	bnz	copy_data0
  1210                           
  1211                           ; Initialize objects allocated to BANK0 (50 bytes)
  1212                           ; load TBLPTR registers with __pidataBANK0
  1213  0040C0  0E34               	movlw	low __pidataBANK0
  1214  0040C2  6EF6               	movwf	tblptrl,c
  1215  0040C4  0E48               	movlw	high __pidataBANK0
  1216  0040C6  6EF7               	movwf	tblptrh,c
  1217  0040C8  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1218  0040CA  6EF8               	movwf	tblptru,c
  1219  0040CC  EE00  F080         	lfsr	0,__pdataBANK0
  1220  0040D0  EE10 F032          	lfsr	1,50
  1221  0040D4                     copy_data1:
  1222  0040D4  0009               	tblrd		*+
  1223  0040D6  CFF5 FFEE          	movff	tablat,postinc0
  1224  0040DA  50E5               	movf	postdec1,w,c
  1225  0040DC  50E1               	movf	fsr1l,w,c
  1226  0040DE  E1FA               	bnz	copy_data1
  1227                           
  1228                           ; Initialize objects allocated to COMRAM (1 bytes)
  1229                           ; load TBLPTR registers with __pidataCOMRAM
  1230  0040E0  0EB0               	movlw	low __pidataCOMRAM
  1231  0040E2  6EF6               	movwf	tblptrl,c
  1232  0040E4  0E4C               	movlw	high __pidataCOMRAM
  1233  0040E6  6EF7               	movwf	tblptrh,c
  1234  0040E8  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1235  0040EA  6EF8               	movwf	tblptru,c
  1236  0040EC  0009               	tblrd		*+	;fetch initializer
  1237  0040EE  CFF5 F064          	movff	tablat,__pdataCOMRAM
  1238  0040F2                     end_of_initialization:
  1239                           	opt stack 0
  1240  0040F2                     __end_of__initialization:
  1241                           	opt stack 0
  1242  0040F2  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1243  0040F4  6EF8               	movwf	tblptru,c
  1244  0040F6  0100               	movlb	0
  1245  0040F8  EF2A  F00D         	goto	_main	;jump to C main() function
  1246                           tblptru	equ	0xFF8
  1247                           tblptrh	equ	0xFF7
  1248                           tblptrl	equ	0xFF6
  1249                           tablat	equ	0xFF5
  1250                           postinc0	equ	0xFEE
  1251                           wreg	equ	0xFE8
  1252                           postdec1	equ	0xFE5
  1253                           fsr1l	equ	0xFE1
  1254                           
  1255                           	psect	bssCOMRAM
  1256  000049                     __pbssCOMRAM:
  1257                           	opt stack 0
  1258  000049                     _nec_code:
  1259                           	opt stack 0
  1260  000049                     	ds	4
  1261  00004D                     _count:
  1262                           	opt stack 0
  1263  00004D                     	ds	2
  1264  00004F                     _txt:
  1265                           	opt stack 0
  1266  00004F                     	ds	2
  1267  000051                     __tft_type:
  1268                           	opt stack 0
  1269  000051                     	ds	1
  1270  000052                     _alarm_date:
  1271                           	opt stack 0
  1272  000052                     	ds	1
  1273  000053                     _alarm_hour:
  1274                           	opt stack 0
  1275  000053                     	ds	1
  1276  000054                     _alarm_minute:
  1277                           	opt stack 0
  1278  000054                     	ds	1
  1279  000055                     _alarm_second:
  1280                           	opt stack 0
  1281  000055                     	ds	1
  1282  000056                     _colstart:
  1283                           	opt stack 0
  1284  000056                     	ds	1
  1285  000057                     _dow:
  1286                           	opt stack 0
  1287  000057                     	ds	1
  1288  000058                     _nec_state:
  1289                           	opt stack 0
  1290  000058                     	ds	1
  1291  000059                     _rowstart:
  1292                           	opt stack 0
  1293  000059                     	ds	1
  1294  00005A                     _setup_alarm_hour:
  1295                           	opt stack 0
  1296  00005A                     	ds	1
  1297  00005B                     _setup_alarm_minute:
  1298                           	opt stack 0
  1299  00005B                     	ds	1
  1300  00005C                     _setup_alarm_second:
  1301                           	opt stack 0
  1302  00005C                     	ds	1
  1303  00005D                     _setup_day:
  1304                           	opt stack 0
  1305  00005D                     	ds	1
  1306  00005E                     _setup_heater_temp:
  1307                           	opt stack 0
  1308  00005E                     	ds	1
  1309  00005F                     _setup_hour:
  1310                           	opt stack 0
  1311  00005F                     	ds	1
  1312  000060                     _setup_minute:
  1313                           	opt stack 0
  1314  000060                     	ds	1
  1315  000061                     _setup_month:
  1316                           	opt stack 0
  1317  000061                     	ds	1
  1318  000062                     _setup_second:
  1319                           	opt stack 0
  1320  000062                     	ds	1
  1321  000063                     _setup_year:
  1322                           	opt stack 0
  1323  000063                     	ds	1
  1324                           tblptru	equ	0xFF8
  1325                           tblptrh	equ	0xFF7
  1326                           tblptrl	equ	0xFF6
  1327                           tablat	equ	0xFF5
  1328                           postinc0	equ	0xFEE
  1329                           wreg	equ	0xFE8
  1330                           postdec1	equ	0xFE5
  1331                           fsr1l	equ	0xFE1
  1332                           
  1333                           	psect	dataCOMRAM
  1334  000064                     __pdataCOMRAM:
  1335                           	opt stack 0
  1336  000064                     _wrap:
  1337                           	opt stack 0
  1338  000064                     	ds	1
  1339                           tblptru	equ	0xFF8
  1340                           tblptrh	equ	0xFF7
  1341                           tblptrl	equ	0xFF6
  1342                           tablat	equ	0xFF5
  1343                           postinc0	equ	0xFEE
  1344                           wreg	equ	0xFE8
  1345                           postdec1	equ	0xFE5
  1346                           fsr1l	equ	0xFE1
  1347                           
  1348                           	psect	bssBANK0
  1349  0000DB                     __pbssBANK0:
  1350                           	opt stack 0
  1351  0000DB                     _Volt:
  1352                           	opt stack 0
  1353  0000DB                     	ds	3
  1354  0000DE                     _DS3231_tempC:
  1355                           	opt stack 0
  1356  0000DE                     	ds	2
  1357  0000E0                     _DS3231_tempF:
  1358                           	opt stack 0
  1359  0000E0                     	ds	2
  1360  0000E2                     _alarm_count:
  1361                           	opt stack 0
  1362  0000E2                     	ds	2
  1363  0000E4                     _bit_count:
  1364                           	opt stack 0
  1365  0000E4                     	ds	2
  1366  0000E6                     _nbr:
  1367                           	opt stack 0
  1368  0000E6                     	ds	2
  1369  0000E8                     _LED_Intensity:
  1370                           	opt stack 0
  1371  0000E8                     	ds	1
  1372  0000E9                     _alarm_clear_flag:
  1373                           	opt stack 0
  1374  0000E9                     	ds	1
  1375  0000EA                     _alarm_match_flag:
  1376                           	opt stack 0
  1377  0000EA                     	ds	1
  1378  0000EB                     _alarm_mode:
  1379                           	opt stack 0
  1380  0000EB                     	ds	1
  1381  0000EC                     _alarm_on_flag:
  1382                           	opt stack 0
  1383  0000EC                     	ds	1
  1384  0000ED                     _cnt:
  1385                           	opt stack 0
  1386  0000ED                     	ds	1
  1387  0000EE                     _contr:
  1388                           	opt stack 0
  1389  0000EE                     	ds	1
  1390  0000EF                     _day:
  1391                           	opt stack 0
  1392  0000EF                     	ds	1
  1393  0000F0                     _heater_mode:
  1394                           	opt stack 0
  1395  0000F0                     	ds	1
  1396  0000F1                     _hour:
  1397                           	opt stack 0
  1398  0000F1                     	ds	1
  1399  0000F2                     _minute:
  1400                           	opt stack 0
  1401  0000F2                     	ds	1
  1402  0000F3                     _month:
  1403                           	opt stack 0
  1404  0000F3                     	ds	1
  1405  0000F4                     _nec_ok:
  1406                           	opt stack 0
  1407  0000F4                     	ds	1
  1408  0000F5                     _old_second:
  1409                           	opt stack 0
  1410  0000F5                     	ds	1
  1411  0000F6                     _second:
  1412                           	opt stack 0
  1413  0000F6                     	ds	1
  1414  0000F7                     _set_heater_temp:
  1415                           	opt stack 0
  1416  0000F7                     	ds	1
  1417  0000F8                     _year:
  1418                           	opt stack 0
  1419  0000F8                     	ds	1
  1420                           tblptru	equ	0xFF8
  1421                           tblptrh	equ	0xFF7
  1422                           tblptrl	equ	0xFF6
  1423                           tablat	equ	0xFF5
  1424                           postinc0	equ	0xFEE
  1425                           wreg	equ	0xFE8
  1426                           postdec1	equ	0xFE5
  1427                           fsr1l	equ	0xFE1
  1428                           
  1429                           	psect	dataBANK0
  1430  000080                     __pdataBANK0:
  1431                           	opt stack 0
  1432  000080                     _date:
  1433                           	opt stack 0
  1434  000080                     	ds	9
  1435  000089                     _setup_time:
  1436                           	opt stack 0
  1437  000089                     	ds	9
  1438  000092                     _time:
  1439                           	opt stack 0
  1440  000092                     	ds	9
  1441  00009B                     _alarm_text:
  1442                           	opt stack 0
  1443  00009B                     	ds	4
  1444  00009F                     _heater_text:
  1445                           	opt stack 0
  1446  00009F                     	ds	4
  1447  0000A3                     _LED_Int_text:
  1448                           	opt stack 0
  1449  0000A3                     	ds	3
  1450  0000A6                     _heater_S_text:
  1451                           	opt stack 0
  1452  0000A6                     	ds	3
  1453  0000A9                     _setup_heater_S_text:
  1454                           	opt stack 0
  1455  0000A9                     	ds	3
  1456  0000AC                     _tempC:
  1457                           	opt stack 0
  1458  0000AC                     	ds	3
  1459  0000AF                     _tempF:
  1460                           	opt stack 0
  1461  0000AF                     	ds	3
  1462                           tblptru	equ	0xFF8
  1463                           tblptrh	equ	0xFF7
  1464                           tblptrl	equ	0xFF6
  1465                           tablat	equ	0xFF5
  1466                           postinc0	equ	0xFEE
  1467                           wreg	equ	0xFE8
  1468                           postdec1	equ	0xFE5
  1469                           fsr1l	equ	0xFE1
  1470                           
  1471                           	psect	dataBANK1
  1472  000100                     __pdataBANK1:
  1473                           	opt stack 0
  1474  000100                     _buffer:
  1475                           	opt stack 0
  1476  000100                     	ds	31
  1477  00011F                     _setup_alarm_time:
  1478                           	opt stack 0
  1479  00011F                     	ds	9
  1480  000128                     _setup_date:
  1481                           	opt stack 0
  1482  000128                     	ds	9
  1483                           tblptru	equ	0xFF8
  1484                           tblptrh	equ	0xFF7
  1485                           tblptrl	equ	0xFF6
  1486                           tablat	equ	0xFF5
  1487                           postinc0	equ	0xFEE
  1488                           wreg	equ	0xFE8
  1489                           postdec1	equ	0xFE5
  1490                           fsr1l	equ	0xFE1
  1491                           
  1492                           	psect	cstackBANK1
  1493  000131                     __pcstackBANK1:
  1494                           	opt stack 0
  1495  000131                     _printf$2753:
  1496                           	opt stack 0
  1497                           
  1498                           ; 3 bytes @ 0x0
  1499  000131                     	ds	3
  1500  000134                     printf@idx:
  1501                           	opt stack 0
  1502                           
  1503                           ; 1 bytes @ 0x3
  1504  000134                     	ds	1
  1505  000135                     printf@ap:
  1506                           	opt stack 0
  1507                           
  1508                           ; 2 bytes @ 0x4
  1509  000135                     	ds	2
  1510  000137                     printf@prec:
  1511                           	opt stack 0
  1512                           
  1513                           ; 2 bytes @ 0x6
  1514  000137                     	ds	2
  1515  000139                     printf@tmpval:
  1516                           	opt stack 0
  1517                           
  1518                           ; 4 bytes @ 0x8
  1519  000139                     	ds	4
  1520  00013D                     printf@width:
  1521                           	opt stack 0
  1522                           
  1523                           ; 2 bytes @ 0xC
  1524  00013D                     	ds	2
  1525  00013F                     printf@exp:
  1526                           	opt stack 0
  1527                           
  1528                           ; 2 bytes @ 0xE
  1529  00013F                     	ds	2
  1530  000141                     printf@val:
  1531                           	opt stack 0
  1532                           
  1533                           ; 4 bytes @ 0x10
  1534  000141                     	ds	4
  1535  000145                     printf@flag:
  1536                           	opt stack 0
  1537                           
  1538                           ; 2 bytes @ 0x14
  1539  000145                     	ds	2
  1540  000147                     printf@fval:
  1541                           	opt stack 0
  1542                           
  1543                           ; 3 bytes @ 0x16
  1544  000147                     	ds	3
  1545  00014A                     printf@c:
  1546                           	opt stack 0
  1547                           
  1548                           ; 1 bytes @ 0x19
  1549  00014A                     	ds	1
  1550                           tblptru	equ	0xFF8
  1551                           tblptrh	equ	0xFF7
  1552                           tblptrl	equ	0xFF6
  1553                           tablat	equ	0xFF5
  1554                           postinc0	equ	0xFEE
  1555                           wreg	equ	0xFE8
  1556                           postdec1	equ	0xFE5
  1557                           fsr1l	equ	0xFE1
  1558                           
  1559                           	psect	cstackBANK0
  1560  0000B2                     __pcstackBANK0:
  1561                           	opt stack 0
  1562  0000B2                     ?___ftadd:
  1563                           	opt stack 0
  1564  0000B2                     ?___fttol:
  1565                           	opt stack 0
  1566  0000B2                     drawtext@y:
  1567                           	opt stack 0
  1568  0000B2                     ___ftdiv@cntr:
  1569                           	opt stack 0
  1570  0000B2                     ___ftadd@f1:
  1571                           	opt stack 0
  1572  0000B2                     ___fttol@f1:
  1573                           	opt stack 0
  1574                           
  1575                           ; 3 bytes @ 0x0
  1576  0000B2                     	ds	1
  1577  0000B3                     drawtext@_text:
  1578                           	opt stack 0
  1579  0000B3                     ___ftdiv@f3:
  1580                           	opt stack 0
  1581                           
  1582                           ; 3 bytes @ 0x1
  1583  0000B3                     	ds	2
  1584  0000B5                     drawtext@color:
  1585                           	opt stack 0
  1586  0000B5                     ___ftadd@f2:
  1587                           	opt stack 0
  1588                           
  1589                           ; 3 bytes @ 0x3
  1590  0000B5                     	ds	1
  1591  0000B6                     ??___fttol:
  1592  0000B6                     ___ftdiv@exp:
  1593                           	opt stack 0
  1594                           
  1595                           ; 1 bytes @ 0x4
  1596  0000B6                     	ds	1
  1597  0000B7                     ___ftdiv@sign:
  1598                           	opt stack 0
  1599  0000B7                     drawtext@bg:
  1600                           	opt stack 0
  1601                           
  1602                           ; 2 bytes @ 0x5
  1603  0000B7                     	ds	1
  1604  0000B8                     ??___ftadd:
  1605  0000B8                     Read_Volt_In@STEP:
  1606                           	opt stack 0
  1607                           
  1608                           ; 3 bytes @ 0x6
  1609  0000B8                     	ds	1
  1610  0000B9                     drawtext@size:
  1611                           	opt stack 0
  1612                           
  1613                           ; 1 bytes @ 0x7
  1614  0000B9                     	ds	1
  1615  0000BA                     drawtext@x:
  1616                           	opt stack 0
  1617                           
  1618                           ; 1 bytes @ 0x8
  1619  0000BA                     	ds	1
  1620  0000BB                     ___ftadd@sign:
  1621                           	opt stack 0
  1622  0000BB                     ___fttol@sign1:
  1623                           	opt stack 0
  1624  0000BB                     drawtext@textsize:
  1625                           	opt stack 0
  1626                           
  1627                           ; 2 bytes @ 0x9
  1628  0000BB                     	ds	1
  1629  0000BC                     ___ftadd@exp2:
  1630                           	opt stack 0
  1631  0000BC                     ___fttol@lval:
  1632                           	opt stack 0
  1633                           
  1634                           ; 4 bytes @ 0xA
  1635  0000BC                     	ds	1
  1636  0000BD                     ___ftadd@exp1:
  1637                           	opt stack 0
  1638  0000BD                     drawtext@i:
  1639                           	opt stack 0
  1640                           
  1641                           ; 2 bytes @ 0xB
  1642  0000BD                     	ds	1
  1643  0000BE                     ?___ftsub:
  1644                           	opt stack 0
  1645  0000BE                     ___ftsub@f1:
  1646                           	opt stack 0
  1647                           
  1648                           ; 3 bytes @ 0xC
  1649  0000BE                     	ds	1
  1650  0000BF                     drawtext@cursor_y:
  1651                           	opt stack 0
  1652                           
  1653                           ; 1 bytes @ 0xD
  1654  0000BF                     	ds	1
  1655  0000C0                     drawtext@cursor_x:
  1656                           	opt stack 0
  1657  0000C0                     ___fttol@exp1:
  1658                           	opt stack 0
  1659                           
  1660                           ; 1 bytes @ 0xE
  1661  0000C0                     	ds	1
  1662  0000C1                     Do_Setup_Time@Key_Up_Flag:
  1663                           	opt stack 0
  1664  0000C1                     Do_Setup_Alarm_Time@Key_Up_Flag:
  1665                           	opt stack 0
  1666  0000C1                     Do_Setup_Heater_Temp@Select_Field:
  1667                           	opt stack 0
  1668  0000C1                     ___ftsub@f2:
  1669                           	opt stack 0
  1670                           
  1671                           ; 3 bytes @ 0xF
  1672  0000C1                     	ds	1
  1673  0000C2                     Do_Setup_Time@Key_Dn_Flag:
  1674                           	opt stack 0
  1675  0000C2                     Do_Setup_Alarm_Time@Key_Dn_Flag:
  1676                           	opt stack 0
  1677  0000C2                     Do_Setup_Heater_Temp@Key_Up_Flag:
  1678                           	opt stack 0
  1679                           
  1680                           ; 1 bytes @ 0x10
  1681  0000C2                     	ds	1
  1682  0000C3                     Do_Setup_Time@Key_Abort_Flag:
  1683                           	opt stack 0
  1684  0000C3                     Do_Setup_Alarm_Time@Key_Abort_Flag:
  1685                           	opt stack 0
  1686  0000C3                     Do_Setup_Heater_Temp@Key_Dn_Flag:
  1687                           	opt stack 0
  1688                           
  1689                           ; 1 bytes @ 0x11
  1690  0000C3                     	ds	1
  1691  0000C4                     ?_printf:
  1692                           	opt stack 0
  1693  0000C4                     Do_Setup_Time@Key_Done_Flag:
  1694                           	opt stack 0
  1695  0000C4                     Do_Setup_Alarm_Time@Key_Done_Flag:
  1696                           	opt stack 0
  1697  0000C4                     Do_Setup_Heater_Temp@Key_Abort_Flag:
  1698                           	opt stack 0
  1699  0000C4                     printf@f:
  1700                           	opt stack 0
  1701                           
  1702                           ; 2 bytes @ 0x12
  1703  0000C4                     	ds	1
  1704  0000C5                     Do_Setup_Time@Key_Next_Flag:
  1705                           	opt stack 0
  1706  0000C5                     Do_Setup_Alarm_Time@Key_Next_Flag:
  1707                           	opt stack 0
  1708  0000C5                     Do_Setup_Heater_Temp@Key_Done_Flag:
  1709                           	opt stack 0
  1710                           
  1711                           ; 1 bytes @ 0x13
  1712  0000C5                     	ds	1
  1713  0000C6                     Do_Setup_Time@Setup_Mode:
  1714                           	opt stack 0
  1715  0000C6                     Do_Setup_Alarm_Time@Setup_Mode:
  1716                           	opt stack 0
  1717  0000C6                     Do_Setup_Heater_Temp@Setup_Mode:
  1718                           	opt stack 0
  1719                           
  1720                           ; 1 bytes @ 0x14
  1721  0000C6                     	ds	1
  1722  0000C7                     Do_Setup_Time@Select_Field:
  1723                           	opt stack 0
  1724  0000C7                     Do_Setup_Alarm_Time@Select_Field:
  1725                           	opt stack 0
  1726                           
  1727                           ; 1 bytes @ 0x15
  1728  0000C7                     	ds	11
  1729  0000D2                     ??_printf:
  1730                           
  1731                           ; 0 bytes @ 0x20
  1732  0000D2                     	ds	6
  1733  0000D8                     ??_main:
  1734                           
  1735                           ; 0 bytes @ 0x26
  1736  0000D8                     	ds	3
  1737                           tblptru	equ	0xFF8
  1738                           tblptrh	equ	0xFF7
  1739                           tblptrl	equ	0xFF6
  1740                           tablat	equ	0xFF5
  1741                           postinc0	equ	0xFEE
  1742                           wreg	equ	0xFE8
  1743                           postdec1	equ	0xFE5
  1744                           fsr1l	equ	0xFE1
  1745                           
  1746                           	psect	cstackCOMRAM
  1747  000001                     __pcstackCOMRAM:
  1748                           	opt stack 0
  1749  000001                     ??_INT2_isr:
  1750  000001                     ?i2___wmul:
  1751                           	opt stack 0
  1752  000001                     i2I2C_Write@outByte:
  1753                           	opt stack 0
  1754  000001                     i2___wmul@multiplier:
  1755                           	opt stack 0
  1756                           
  1757                           ; 2 bytes @ 0x0
  1758  000001                     	ds	1
  1759  000002                     i2I2C_Write@n:
  1760                           	opt stack 0
  1761                           
  1762                           ; 1 bytes @ 0x1
  1763  000002                     	ds	1
  1764  000003                     INT2_isr@timer:
  1765                           	opt stack 0
  1766  000003                     i2___wmul@multiplicand:
  1767                           	opt stack 0
  1768                           
  1769                           ; 2 bytes @ 0x2
  1770  000003                     	ds	2
  1771  000005                     i2___wmul@product:
  1772                           	opt stack 0
  1773                           
  1774                           ; 2 bytes @ 0x4
  1775  000005                     	ds	2
  1776  000007                     i2delay_ms@ms:
  1777                           	opt stack 0
  1778                           
  1779                           ; 2 bytes @ 0x6
  1780  000007                     	ds	2
  1781  000009                     ??i2_delay_ms:
  1782                           
  1783                           ; 0 bytes @ 0x8
  1784  000009                     	ds	2
  1785  00000B                     i2delay_ms@count:
  1786                           	opt stack 0
  1787                           
  1788                           ; 2 bytes @ 0xA
  1789  00000B                     	ds	2
  1790  00000D                     i2DS3231_Turn_Off_Alarm@device:
  1791                           	opt stack 0
  1792                           
  1793                           ; 1 bytes @ 0xC
  1794  00000D                     	ds	1
  1795  00000E                     ??_chkisr:
  1796                           
  1797                           ; 0 bytes @ 0xD
  1798  00000E                     	ds	14
  1799  00001C                     ??_SPI_out:
  1800  00001C                     ??_isdigit:
  1801  00001C                     ?_strlen:
  1802                           	opt stack 0
  1803  00001C                     ?_bcd_2_dec:
  1804                           	opt stack 0
  1805  00001C                     ?_Get_Full_ADC:
  1806                           	opt stack 0
  1807  00001C                     ?___awmod:
  1808                           	opt stack 0
  1809  00001C                     ?___ftpack:
  1810                           	opt stack 0
  1811  00001C                     ?___ftneg:
  1812                           	opt stack 0
  1813  00001C                     ?__tdiv_to_l_:
  1814                           	opt stack 0
  1815  00001C                     ?__div_to_l_:
  1816                           	opt stack 0
  1817  00001C                     ?___lldiv:
  1818                           	opt stack 0
  1819  00001C                     spiwrite@x:
  1820                           	opt stack 0
  1821  00001C                     I2C_Read@ack:
  1822                           	opt stack 0
  1823  00001C                     I2C_Write@outByte:
  1824                           	opt stack 0
  1825  00001C                     putch@c:
  1826                           	opt stack 0
  1827  00001C                     Select_ADC@ADC_Channel:
  1828                           	opt stack 0
  1829  00001C                     OpenUSART@spbrg:
  1830                           	opt stack 0
  1831  00001C                     ___awmod@dividend:
  1832                           	opt stack 0
  1833  00001C                     strcpy@to:
  1834                           	opt stack 0
  1835  00001C                     strlen@s:
  1836                           	opt stack 0
  1837  00001C                     __div_to_l_@f1:
  1838                           	opt stack 0
  1839  00001C                     ___ftpack@arg:
  1840                           	opt stack 0
  1841  00001C                     __tdiv_to_l_@f1:
  1842                           	opt stack 0
  1843  00001C                     ___ftneg@f1:
  1844                           	opt stack 0
  1845  00001C                     I2C_Init@c:
  1846                           	opt stack 0
  1847  00001C                     ___lldiv@dividend:
  1848                           	opt stack 0
  1849                           
  1850                           ; 4 bytes @ 0x1B
  1851  00001C                     	ds	1
  1852  00001D                     spiwrite@spidata:
  1853                           	opt stack 0
  1854  00001D                     I2C_Read@n:
  1855                           	opt stack 0
  1856  00001D                     I2C_Write@n:
  1857                           	opt stack 0
  1858  00001D                     SPI_out@Second_byte:
  1859                           	opt stack 0
  1860  00001D                     _isdigit$2411:
  1861                           	opt stack 0
  1862                           
  1863                           ; 1 bytes @ 0x1C
  1864  00001D                     	ds	1
  1865  00001E                     ??_strlen:
  1866  00001E                     ??_bcd_2_dec:
  1867  00001E                     ??_Get_Full_ADC:
  1868  00001E                     write_command@cmd_:
  1869                           	opt stack 0
  1870  00001E                     write_data@data_:
  1871                           	opt stack 0
  1872  00001E                     I2C_Read@inByte:
  1873                           	opt stack 0
  1874  00001E                     I2C_Write_Address_Write_One_Byte@Address:
  1875                           	opt stack 0
  1876  00001E                     SPI_out@SPI_data:
  1877                           	opt stack 0
  1878  00001E                     OpenUSART@config:
  1879                           	opt stack 0
  1880  00001E                     isdigit@c:
  1881                           	opt stack 0
  1882  00001E                     ___awmod@divisor:
  1883                           	opt stack 0
  1884  00001E                     strcpy@from:
  1885                           	opt stack 0
  1886                           
  1887                           ; 2 bytes @ 0x1D
  1888  00001E                     	ds	1
  1889  00001F                     setAddrWindow@y0:
  1890                           	opt stack 0
  1891  00001F                     I2C_Write_Address_Read_One_Byte@Address:
  1892                           	opt stack 0
  1893  00001F                     I2C_Write_Address_Write_One_Byte@Data_Out:
  1894                           	opt stack 0
  1895  00001F                     SPI_out@First_byte:
  1896                           	opt stack 0
  1897  00001F                     ___ftpack@exp:
  1898                           	opt stack 0
  1899  00001F                     __div_to_l_@f2:
  1900                           	opt stack 0
  1901  00001F                     __tdiv_to_l_@f2:
  1902                           	opt stack 0
  1903                           
  1904                           ; 3 bytes @ 0x1E
  1905  00001F                     	ds	1
  1906  000020                     setAddrWindow@x1:
  1907                           	opt stack 0
  1908  000020                     I2C_Write_Address_Read_One_Byte@Data_Ret:
  1909                           	opt stack 0
  1910  000020                     I2C_Write_Address_Write_One_Byte@Device:
  1911                           	opt stack 0
  1912  000020                     ___awmod@counter:
  1913                           	opt stack 0
  1914  000020                     ___ftpack@sign:
  1915                           	opt stack 0
  1916  000020                     bcd_2_dec@dec:
  1917                           	opt stack 0
  1918  000020                     Get_Full_ADC@result:
  1919                           	opt stack 0
  1920  000020                     SPI_out@i:
  1921                           	opt stack 0
  1922  000020                     strcpy@cp:
  1923                           	opt stack 0
  1924  000020                     strlen@cp:
  1925                           	opt stack 0
  1926  000020                     ___lldiv@divisor:
  1927                           	opt stack 0
  1928                           
  1929                           ; 4 bytes @ 0x1F
  1930  000020                     	ds	1
  1931  000021                     ??___ftpack:
  1932  000021                     setAddrWindow@y1:
  1933                           	opt stack 0
  1934  000021                     I2C_Write_Address_Read_One_Byte@Device:
  1935                           	opt stack 0
  1936  000021                     ___awmod@sign:
  1937                           	opt stack 0
  1938                           
  1939                           ; 1 bytes @ 0x20
  1940  000021                     	ds	1
  1941  000022                     ??__tdiv_to_l_:
  1942  000022                     ?___awdiv:
  1943                           	opt stack 0
  1944  000022                     setAddrWindow@x0:
  1945                           	opt stack 0
  1946  000022                     bcd_2_dec@bcd:
  1947                           	opt stack 0
  1948  000022                     ___awdiv@dividend:
  1949                           	opt stack 0
  1950  000022                     __div_to_l_@quot:
  1951                           	opt stack 0
  1952                           
  1953                           ; 4 bytes @ 0x21
  1954  000022                     	ds	1
  1955  000023                     drawPixel@y:
  1956                           	opt stack 0
  1957  000023                     drawFastVLine@y:
  1958                           	opt stack 0
  1959  000023                     fillRectangle@y:
  1960                           	opt stack 0
  1961                           
  1962                           ; 1 bytes @ 0x22
  1963  000023                     	ds	1
  1964  000024                     ?___lbtoft:
  1965                           	opt stack 0
  1966  000024                     ?___lltoft:
  1967                           	opt stack 0
  1968  000024                     ?___lwtoft:
  1969                           	opt stack 0
  1970  000024                     drawFastVLine@h:
  1971                           	opt stack 0
  1972  000024                     fillRectangle@w:
  1973                           	opt stack 0
  1974  000024                     drawPixel@color:
  1975                           	opt stack 0
  1976  000024                     ___awdiv@divisor:
  1977                           	opt stack 0
  1978  000024                     ___lwtoft@c:
  1979                           	opt stack 0
  1980  000024                     ___lldiv@quotient:
  1981                           	opt stack 0
  1982  000024                     ___lltoft@c:
  1983                           	opt stack 0
  1984                           
  1985                           ; 4 bytes @ 0x23
  1986  000024                     	ds	1
  1987  000025                     fillRectangle@h:
  1988                           	opt stack 0
  1989  000025                     drawFastVLine@color:
  1990                           	opt stack 0
  1991  000025                     __tdiv_to_l_@quot:
  1992                           	opt stack 0
  1993                           
  1994                           ; 4 bytes @ 0x24
  1995  000025                     	ds	1
  1996  000026                     drawPixel@x:
  1997                           	opt stack 0
  1998  000026                     ___awdiv@counter:
  1999                           	opt stack 0
  2000  000026                     __div_to_l_@cntr:
  2001                           	opt stack 0
  2002  000026                     fillRectangle@color:
  2003                           	opt stack 0
  2004                           
  2005                           ; 2 bytes @ 0x25
  2006  000026                     	ds	1
  2007  000027                     ??_drawFastVLine:
  2008  000027                     ___awdiv@sign:
  2009                           	opt stack 0
  2010  000027                     __div_to_l_@exp1:
  2011                           	opt stack 0
  2012  000027                     ___lbtoft@c:
  2013                           	opt stack 0
  2014  000027                     drawCircle@x0:
  2015                           	opt stack 0
  2016                           
  2017                           ; 2 bytes @ 0x26
  2018  000027                     	ds	1
  2019  000028                     ??_fillRectangle:
  2020  000028                     ??___lltoft:
  2021  000028                     ___lldiv@counter:
  2022                           	opt stack 0
  2023  000028                     ___awdiv@quotient:
  2024                           	opt stack 0
  2025  000028                     ___ftge@ff1:
  2026                           	opt stack 0
  2027                           
  2028                           ; 3 bytes @ 0x27
  2029  000028                     	ds	1
  2030  000029                     ?___llmod:
  2031                           	opt stack 0
  2032  000029                     __tdiv_to_l_@cntr:
  2033                           	opt stack 0
  2034  000029                     drawCircle@y0:
  2035                           	opt stack 0
  2036  000029                     ___llmod@dividend:
  2037                           	opt stack 0
  2038                           
  2039                           ; 4 bytes @ 0x28
  2040  000029                     	ds	1
  2041  00002A                     ?_dec_2_bcd:
  2042                           	opt stack 0
  2043  00002A                     ?___wmul:
  2044                           	opt stack 0
  2045  00002A                     __tdiv_to_l_@exp1:
  2046                           	opt stack 0
  2047  00002A                     ___wmul@multiplier:
  2048                           	opt stack 0
  2049                           
  2050                           ; 2 bytes @ 0x29
  2051  00002A                     	ds	1
  2052  00002B                     drawFastVLine@hi:
  2053                           	opt stack 0
  2054  00002B                     drawCircle@r:
  2055                           	opt stack 0
  2056  00002B                     ___ftge@ff2:
  2057                           	opt stack 0
  2058                           
  2059                           ; 3 bytes @ 0x2A
  2060  00002B                     	ds	1
  2061  00002C                     ??_dec_2_bcd:
  2062  00002C                     drawFastVLine@lo:
  2063                           	opt stack 0
  2064  00002C                     fillRectangle@hi:
  2065                           	opt stack 0
  2066  00002C                     ___lltoft@exp:
  2067                           	opt stack 0
  2068  00002C                     ___wmul@multiplicand:
  2069                           	opt stack 0
  2070                           
  2071                           ; 2 bytes @ 0x2B
  2072  00002C                     	ds	1
  2073  00002D                     drawFastVLine@x:
  2074                           	opt stack 0
  2075  00002D                     fillRectangle@lo:
  2076                           	opt stack 0
  2077  00002D                     drawCircle@color:
  2078                           	opt stack 0
  2079  00002D                     ___llmod@divisor:
  2080                           	opt stack 0
  2081                           
  2082                           ; 4 bytes @ 0x2C
  2083  00002D                     	ds	1
  2084  00002E                     ??___ftge:
  2085  00002E                     fillRect@y:
  2086                           	opt stack 0
  2087  00002E                     fillRectangle@x:
  2088                           	opt stack 0
  2089  00002E                     dec_2_bcd@bcd:
  2090                           	opt stack 0
  2091  00002E                     ___wmul@product:
  2092                           	opt stack 0
  2093                           
  2094                           ; 2 bytes @ 0x2D
  2095  00002E                     	ds	1
  2096  00002F                     ??_drawCircle:
  2097  00002F                     fillRect@w:
  2098                           	opt stack 0
  2099  00002F                     fillScreen@color:
  2100                           	opt stack 0
  2101                           
  2102                           ; 2 bytes @ 0x2E
  2103  00002F                     	ds	1
  2104  000030                     ?___ftmul:
  2105                           	opt stack 0
  2106  000030                     fillRect@h:
  2107                           	opt stack 0
  2108  000030                     dec_2_bcd@dec:
  2109                           	opt stack 0
  2110  000030                     delay_ms@ms:
  2111                           	opt stack 0
  2112  000030                     ___ftmul@f1:
  2113                           	opt stack 0
  2114                           
  2115                           ; 3 bytes @ 0x2F
  2116  000030                     	ds	1
  2117  000031                     Do_LED_Out@Volt:
  2118                           	opt stack 0
  2119  000031                     ___llmod@counter:
  2120                           	opt stack 0
  2121  000031                     fillRect@color:
  2122                           	opt stack 0
  2123  000031                     drawCircle@ddF_x:
  2124                           	opt stack 0
  2125                           
  2126                           ; 2 bytes @ 0x30
  2127  000031                     	ds	1
  2128  000032                     ??_delay_ms:
  2129                           
  2130                           ; 0 bytes @ 0x31
  2131  000032                     	ds	1
  2132  000033                     ??_fillRect:
  2133  000033                     drawCircle@ddF_y:
  2134                           	opt stack 0
  2135  000033                     ___ftmul@f2:
  2136                           	opt stack 0
  2137                           
  2138                           ; 3 bytes @ 0x32
  2139  000033                     	ds	1
  2140  000034                     delay_ms@count:
  2141                           	opt stack 0
  2142                           
  2143                           ; 2 bytes @ 0x33
  2144  000034                     	ds	1
  2145  000035                     drawCircle@f:
  2146                           	opt stack 0
  2147                           
  2148                           ; 2 bytes @ 0x34
  2149  000035                     	ds	1
  2150  000036                     ??___ftmul:
  2151  000036                     ?_DS3231_Read_Temp:
  2152                           	opt stack 0
  2153  000036                     fillRect@x:
  2154                           	opt stack 0
  2155  000036                     DS3231_Turn_On_Alarm@device:
  2156                           	opt stack 0
  2157  000036                     DS3231_Turn_Off_Alarm@device:
  2158                           	opt stack 0
  2159  000036                     DS3231_Read_Time@Device:
  2160                           	opt stack 0
  2161  000036                     DS3231_Read_Alarm_1_Time@Device:
  2162                           	opt stack 0
  2163  000036                     DS3231_Write_Time@Device:
  2164                           	opt stack 0
  2165  000036                     DS3231_Write_Alarm_1_Time@Device:
  2166                           	opt stack 0
  2167                           
  2168                           ; 1 bytes @ 0x35
  2169  000036                     	ds	1
  2170  000037                     DS3231_Init@device:
  2171                           	opt stack 0
  2172  000037                     fillRect@i:
  2173                           	opt stack 0
  2174  000037                     drawCircle@x:
  2175                           	opt stack 0
  2176                           
  2177                           ; 2 bytes @ 0x36
  2178  000037                     	ds	1
  2179  000038                     ??_DS3231_Read_Temp:
  2180  000038                     DS3231_Init@control:
  2181                           	opt stack 0
  2182                           
  2183                           ; 1 bytes @ 0x37
  2184  000038                     	ds	1
  2185  000039                     drawChar@y:
  2186                           	opt stack 0
  2187  000039                     Update_Setup_Screen_Cursor@cursor_position:
  2188                           	opt stack 0
  2189  000039                     ___ftmul@exp:
  2190                           	opt stack 0
  2191  000039                     drawCircle@y:
  2192                           	opt stack 0
  2193                           
  2194                           ; 2 bytes @ 0x38
  2195  000039                     	ds	1
  2196  00003A                     drawChar@c:
  2197                           	opt stack 0
  2198  00003A                     Update_Setup_Screen_Cursor@yinc:
  2199                           	opt stack 0
  2200  00003A                     DS3231_Read_Temp@T_lo:
  2201                           	opt stack 0
  2202  00003A                     ___ftmul@f3_as_product:
  2203                           	opt stack 0
  2204                           
  2205                           ; 3 bytes @ 0x39
  2206  00003A                     	ds	1
  2207  00003B                     Update_Setup_Screen_Cursor@xinc:
  2208                           	opt stack 0
  2209  00003B                     drawChar@color:
  2210                           	opt stack 0
  2211  00003B                     DS3231_Read_Temp@temp:
  2212                           	opt stack 0
  2213                           
  2214                           ; 2 bytes @ 0x3A
  2215  00003B                     	ds	2
  2216  00003D                     DS3231_Read_Temp@Device:
  2217                           	opt stack 0
  2218  00003D                     ___ftmul@cntr:
  2219                           	opt stack 0
  2220  00003D                     drawChar@bg:
  2221                           	opt stack 0
  2222                           
  2223                           ; 2 bytes @ 0x3C
  2224  00003D                     	ds	1
  2225  00003E                     DS3231_Read_Temp@T_hi:
  2226                           	opt stack 0
  2227  00003E                     ___ftmul@sign:
  2228                           	opt stack 0
  2229                           
  2230                           ; 1 bytes @ 0x3D
  2231  00003E                     	ds	1
  2232  00003F                     ?___ftdiv:
  2233                           	opt stack 0
  2234  00003F                     ?_fround:
  2235                           	opt stack 0
  2236  00003F                     ?_scale:
  2237                           	opt stack 0
  2238  00003F                     drawChar@size:
  2239                           	opt stack 0
  2240  00003F                     ___ftdiv@f1:
  2241                           	opt stack 0
  2242                           
  2243                           ; 3 bytes @ 0x3E
  2244  00003F                     	ds	1
  2245  000040                     drawChar@line:
  2246                           	opt stack 0
  2247                           
  2248                           ; 1 bytes @ 0x3F
  2249  000040                     	ds	1
  2250  000041                     drawChar@x:
  2251                           	opt stack 0
  2252                           
  2253                           ; 1 bytes @ 0x40
  2254  000041                     	ds	1
  2255  000042                     drawChar@j:
  2256                           	opt stack 0
  2257  000042                     ___ftdiv@f2:
  2258                           	opt stack 0
  2259  000042                     _fround$2751:
  2260                           	opt stack 0
  2261  000042                     _scale$2752:
  2262                           	opt stack 0
  2263                           
  2264                           ; 3 bytes @ 0x41
  2265  000042                     	ds	1
  2266  000043                     drawChar@i:
  2267                           	opt stack 0
  2268                           
  2269                           ; 1 bytes @ 0x42
  2270  000043                     	ds	1
  2271  000044                     ??_drawtext:
  2272                           
  2273                           ; 0 bytes @ 0x43
  2274  000044                     	ds	1
  2275  000045                     ??___ftdiv:
  2276  000045                     scale@scl:
  2277                           	opt stack 0
  2278  000045                     _fround$2750:
  2279                           	opt stack 0
  2280                           
  2281                           ; 3 bytes @ 0x44
  2282  000045                     	ds	1
  2283  000046                     
  2284                           ; 0 bytes @ 0x45
  2285  000046                     	ds	2
  2286  000048                     fround@prec:
  2287                           	opt stack 0
  2288                           
  2289                           ; 1 bytes @ 0x47
  2290  000048                     	ds	1
  2291  000049                     tblptru	equ	0xFF8
  2292                           tblptrh	equ	0xFF7
  2293                           tblptrl	equ	0xFF6
  2294                           tablat	equ	0xFF5
  2295                           postinc0	equ	0xFEE
  2296                           wreg	equ	0xFE8
  2297                           postdec1	equ	0xFE5
  2298                           fsr1l	equ	0xFE1
  2299                           
  2300                           ; 0 bytes @ 0x48
  2301 ;;
  2302 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  2303 ;;
  2304 ;; *************** function _main *****************
  2305 ;; Defined at:
  2306 ;;		line 1625 in file "lab_final_alt.c"
  2307 ;; Parameters:    Size  Location     Type
  2308 ;;		None
  2309 ;; Auto vars:     Size  Location     Type
  2310 ;;		None
  2311 ;; Return value:  Size  Location     Type
  2312 ;;		None               void
  2313 ;; Registers used:
  2314 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2315 ;; Tracked objects:
  2316 ;;		On entry : 0/0
  2317 ;;		On exit  : 0/0
  2318 ;;		Unchanged: 0/0
  2319 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2320 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2321 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2322 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2323 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2324 ;;Total ram usage:        3 bytes
  2325 ;; Hardware stack levels required when called:   14
  2326 ;; This function calls:
  2327 ;;		_DS3231_Init
  2328 ;;		_DS3231_Read_Temp
  2329 ;;		_DS3231_Read_Time
  2330 ;;		_DS3231_Turn_Off_Alarm
  2331 ;;		_DS3231_Turn_On_Alarm
  2332 ;;		_Do_LED_Down
  2333 ;;		_Do_LED_Out
  2334 ;;		_Do_LED_Up
  2335 ;;		_Do_Setup_Alarm_Time
  2336 ;;		_Do_Setup_Heater_Temp
  2337 ;;		_Do_Setup_Time
  2338 ;;		_Do_Update_Main_Screen
  2339 ;;		_I2C_Init
  2340 ;;		_Initialize_Main_Screen
  2341 ;;		_LCD_Reset
  2342 ;;		_LED_Alarm
  2343 ;;		_Read_Volt_In
  2344 ;;		_SPI_out
  2345 ;;		_TFT_GreenTab_Initialize
  2346 ;;		___fttol
  2347 ;;		_gen_2khz_sound
  2348 ;;		_init_UART
  2349 ;;		_printf
  2350 ;; This function is called by:
  2351 ;;		Startup code after reset
  2352 ;; This function uses a non-reentrant model
  2353 ;;
  2354                           
  2355                           	psect	text0
  2356  001A54                     __ptext0:
  2357                           	opt stack 0
  2358  001A54                     _main:
  2359                           	opt stack 17
  2360                           
  2361                           ;lab_final_alt.c: 1627: init_UART();
  2362                           
  2363                           ;incstack = 0
  2364  001A54  ECAE  F025         	call	_init_UART	;wreg free
  2365                           
  2366                           ;lab_final_alt.c: 1628: OSCCON = 0x70;
  2367  001A58  0E70               	movlw	112
  2368  001A5A  6ED3               	movwf	4051,c	;volatile
  2369                           
  2370                           ;lab_final_alt.c: 1629: ADCON1 = 0x0b;
  2371  001A5C  0E0B               	movlw	11
  2372  001A5E  6EC1               	movwf	4033,c	;volatile
  2373                           
  2374                           ;lab_final_alt.c: 1630: nRBPU = 0;
  2375  001A60  9EF1               	bcf	intcon2,7,c	;volatile
  2376                           
  2377                           ;lab_final_alt.c: 1631: TRISA = 0x3f;
  2378  001A62  0E3F               	movlw	63
  2379  001A64  6E92               	movwf	3986,c	;volatile
  2380                           
  2381                           ;lab_final_alt.c: 1632: TRISB = 0x07;
  2382  001A66  0E07               	movlw	7
  2383  001A68  6E93               	movwf	3987,c	;volatile
  2384                           
  2385                           ;lab_final_alt.c: 1633: TRISC = 0x00;
  2386  001A6A  0E00               	movlw	0
  2387  001A6C  6E94               	movwf	3988,c	;volatile
  2388                           
  2389                           ;lab_final_alt.c: 1634: TRISD = 0x00;
  2390  001A6E  0E00               	movlw	0
  2391  001A70  6E95               	movwf	3989,c	;volatile
  2392                           
  2393                           ;lab_final_alt.c: 1635: TRISE = 0x00;
  2394  001A72  0E00               	movlw	0
  2395  001A74  6E96               	movwf	3990,c	;volatile
  2396                           
  2397                           ;lab_final_alt.c: 1636: CCP2CON = 0x0;
  2398  001A76  0E00               	movlw	0
  2399  001A78  6EBA               	movwf	4026,c	;volatile
  2400                           
  2401                           ;lab_final_alt.c: 1639: INTCONbits.INT0IF = 0;
  2402  001A7A  92F2               	bcf	intcon,1,c	;volatile
  2403                           
  2404                           ;lab_final_alt.c: 1640: INTCON3bits.INT1IF = 0;
  2405  001A7C  90F0               	bcf	intcon3,0,c	;volatile
  2406                           
  2407                           ;lab_final_alt.c: 1641: INTCON3bits.INT2IF = 0;
  2408  001A7E  92F0               	bcf	intcon3,1,c	;volatile
  2409                           
  2410                           ;lab_final_alt.c: 1643: INTCONbits.INT0IE = 1;
  2411  001A80  88F2               	bsf	intcon,4,c	;volatile
  2412                           
  2413                           ;lab_final_alt.c: 1644: INTCON3bits.INT1IE = 1;
  2414  001A82  86F0               	bsf	intcon3,3,c	;volatile
  2415                           
  2416                           ;lab_final_alt.c: 1645: INTCON3bits.INT2IE = 1;
  2417  001A84  88F0               	bsf	intcon3,4,c	;volatile
  2418                           
  2419                           ;lab_final_alt.c: 1648: INTCON2bits.INTEDG0 = 0;
  2420  001A86  9CF1               	bcf	intcon2,6,c	;volatile
  2421                           
  2422                           ;lab_final_alt.c: 1649: INTCON2bits.INTEDG1 = 0;
  2423  001A88  9AF1               	bcf	intcon2,5,c	;volatile
  2424                           
  2425                           ;lab_final_alt.c: 1650: INTCON2bits.INTEDG2 = 0;
  2426  001A8A  98F1               	bcf	intcon2,4,c	;volatile
  2427                           
  2428                           ;lab_final_alt.c: 1652: INTCONbits.PEIE = 1;
  2429  001A8C  8CF2               	bsf	intcon,6,c	;volatile
  2430                           
  2431                           ;lab_final_alt.c: 1653: INTCONbits.GIE = 1;
  2432  001A8E  8EF2               	bsf	intcon,7,c	;volatile
  2433                           
  2434                           ;lab_final_alt.c: 1656: I2C_Init(100000);
  2435  001A90  0EA0               	movlw	160
  2436  001A92  6E1C               	movwf	I2C_Init@c,c
  2437  001A94  0E86               	movlw	134
  2438  001A96  6E1D               	movwf	I2C_Init@c+1,c
  2439  001A98  0E01               	movlw	1
  2440  001A9A  6E1E               	movwf	I2C_Init@c+2,c
  2441  001A9C  0E00               	movlw	0
  2442  001A9E  6E1F               	movwf	I2C_Init@c+3,c
  2443  001AA0  EC30  F026         	call	_I2C_Init	;wreg free
  2444                           
  2445                           ;lab_final_alt.c: 1657: txt = buffer;
  2446  001AA4  0E00               	movlw	low _buffer
  2447  001AA6  6E4F               	movwf	_txt,c
  2448  001AA8  0E01               	movlw	high _buffer
  2449  001AAA  6E50               	movwf	_txt+1,c
  2450                           
  2451                           ;lab_final_alt.c: 1658: LCD_Reset();
  2452  001AAC  ECCB  F025         	call	_LCD_Reset	;wreg free
  2453                           
  2454                           ;lab_final_alt.c: 1659: TFT_GreenTab_Initialize();
  2455  001AB0  ECAE  F024         	call	_TFT_GreenTab_Initialize	;wreg free
  2456                           
  2457                           ;lab_final_alt.c: 1660: DS3231_Init(0x68);
  2458  001AB4  0E68               	movlw	104
  2459  001AB6  EC80  F022         	call	_DS3231_Init
  2460                           
  2461                           ;lab_final_alt.c: 1661: set_heater_temp = 60;
  2462  001ABA  0E3C               	movlw	60
  2463  001ABC  0100               	movlb	0	; () banked
  2464  001ABE  6FF7               	movwf	_set_heater_temp& (0+255),b
  2465                           
  2466                           ; BSR set to: 0
  2467                           ;lab_final_alt.c: 1663: Initialize_Main_Screen();
  2468  001AC0  ECFB  F009         	call	_Initialize_Main_Screen	;wreg free
  2469                           
  2470                           ;lab_final_alt.c: 1665: TMR1L = 0;
  2471  001AC4  0E00               	movlw	0
  2472  001AC6  6ECE               	movwf	4046,c	;volatile
  2473                           
  2474                           ;lab_final_alt.c: 1666: TMR1H = 0;
  2475  001AC8  0E00               	movlw	0
  2476  001ACA  6ECF               	movwf	4047,c	;volatile
  2477                           
  2478                           ;lab_final_alt.c: 1667: T1CON = 0x83;
  2479  001ACC  0E83               	movlw	131
  2480  001ACE  6ECD               	movwf	4045,c	;volatile
  2481                           
  2482                           ;lab_final_alt.c: 1668: PIR1bits.TMR1IF=0;
  2483  001AD0  909E               	bcf	3998,0,c	;volatile
  2484                           
  2485                           ;lab_final_alt.c: 1669: PIE1bits.TMR1IE = 1;
  2486  001AD2  809D               	bsf	3997,0,c	;volatile
  2487                           
  2488                           ;lab_final_alt.c: 1670: nec_ok = 0;
  2489  001AD4  0E00               	movlw	0
  2490  001AD6  0100               	movlb	0	; () banked
  2491  001AD8  6FF4               	movwf	_nec_ok& (0+255),b
  2492                           
  2493                           ; BSR set to: 0
  2494                           ;lab_final_alt.c: 1671: nec_code = 0x0;
  2495  001ADA  0E00               	movlw	0
  2496  001ADC  6E49               	movwf	_nec_code,c
  2497  001ADE  0E00               	movlw	0
  2498  001AE0  6E4A               	movwf	_nec_code+1,c
  2499  001AE2  0E00               	movlw	0
  2500  001AE4  6E4B               	movwf	_nec_code+2,c
  2501  001AE6  0E00               	movlw	0
  2502  001AE8  6E4C               	movwf	_nec_code+3,c
  2503                           
  2504                           ; BSR set to: 0
  2505                           ;lab_final_alt.c: 1672: alarm_mode = 0;
  2506  001AEA  0E00               	movlw	0
  2507  001AEC  0100               	movlb	0	; () banked
  2508  001AEE  6FEB               	movwf	_alarm_mode& (0+255),b
  2509                           
  2510                           ; BSR set to: 0
  2511                           ;lab_final_alt.c: 1673: heater_mode = 0;
  2512  001AF0  0E00               	movlw	0
  2513  001AF2  0100               	movlb	0	; () banked
  2514  001AF4  6FF0               	movwf	_heater_mode& (0+255),b
  2515                           
  2516                           ; BSR set to: 0
  2517                           ;lab_final_alt.c: 1674: alarm_match_flag = 0;
  2518  001AF6  0E00               	movlw	0
  2519  001AF8  0100               	movlb	0	; () banked
  2520  001AFA  6FEA               	movwf	_alarm_match_flag& (0+255),b
  2521                           
  2522                           ; BSR set to: 0
  2523                           ;lab_final_alt.c: 1675: LED_Intensity = 0;
  2524  001AFC  0E00               	movlw	0
  2525  001AFE  0100               	movlb	0	; () banked
  2526  001B00  6FE8               	movwf	_LED_Intensity& (0+255),b
  2527                           
  2528                           ; BSR set to: 0
  2529                           ;lab_final_alt.c: 1676: SPI_out(LED_Intensity + 100);
  2530  001B02  0100               	movlb	0	; () banked
  2531  001B04  51E8               	movf	_LED_Intensity& (0+255),w,b
  2532  001B06  0F64               	addlw	100
  2533  001B08  EC84  F01F         	call	_SPI_out
  2534                           
  2535                           ;lab_final_alt.c: 1677: PORTD = 0;
  2536  001B0C  0E00               	movlw	0
  2537  001B0E  6E83               	movwf	3971,c	;volatile
  2538                           
  2539                           ;lab_final_alt.c: 1679: PORTBbits.RB3 = 0;
  2540  001B10  9681               	bcf	3969,3,c	;volatile
  2541                           
  2542                           ;lab_final_alt.c: 1681: while(TRUE)
  2543  001B12  D000               	goto	l10326
  2544  001B14                     l10326:
  2545                           
  2546                           ;lab_final_alt.c: 1682: {
  2547                           ;lab_final_alt.c: 1683: DS3231_Read_Time(0x68);
  2548  001B14  0E68               	movlw	104
  2549  001B16  EC09  F020         	call	_DS3231_Read_Time
  2550                           
  2551                           ;lab_final_alt.c: 1684: if (second != old_second)
  2552  001B1A  0100               	movlb	0	; () banked
  2553  001B1C  51F5               	movf	_old_second& (0+255),w,b
  2554  001B1E  0100               	movlb	0	; () banked
  2555  001B20  19F6               	xorwf	_second& (0+255),w,b
  2556  001B22  B4D8               	btfsc	status,2,c
  2557  001B24  D07F               	goto	l10364
  2558                           
  2559                           ; BSR set to: 0
  2560                           ;lab_final_alt.c: 1685: {
  2561                           ;lab_final_alt.c: 1686: alarm_mode = PORTAbits.RA4;
  2562  001B26  0E00               	movlw	0
  2563  001B28  B880               	btfsc	3968,4,c	;volatile
  2564  001B2A  0E01               	movlw	1
  2565  001B2C  0100               	movlb	0	; () banked
  2566  001B2E  6FEB               	movwf	_alarm_mode& (0+255),b
  2567                           
  2568                           ; BSR set to: 0
  2569                           ;lab_final_alt.c: 1687: if (alarm_mode == 1)
  2570  001B30  0100               	movlb	0	; () banked
  2571  001B32  05EB               	decf	_alarm_mode& (0+255),w,b
  2572  001B34  A4D8               	btfss	status,2,c
  2573  001B36  D004               	goto	l10336
  2574                           
  2575                           ; BSR set to: 0
  2576                           ;lab_final_alt.c: 1688: DS3231_Turn_On_Alarm(0x68);
  2577  001B38  0E68               	movlw	104
  2578  001B3A  EC00  F024         	call	_DS3231_Turn_On_Alarm
  2579  001B3E  D000               	goto	l10336
  2580  001B40                     l10336:
  2581                           
  2582                           ;lab_final_alt.c: 1689: if (alarm_mode == 0)
  2583  001B40  0100               	movlb	0	; () banked
  2584  001B42  51EB               	movf	_alarm_mode& (0+255),w,b
  2585  001B44  A4D8               	btfss	status,2,c
  2586  001B46  D004               	goto	l10340
  2587                           
  2588                           ; BSR set to: 0
  2589                           ;lab_final_alt.c: 1690: DS3231_Turn_Off_Alarm(0x68);
  2590  001B48  0E68               	movlw	104
  2591  001B4A  ECCA  F023         	call	_DS3231_Turn_Off_Alarm
  2592  001B4E  D000               	goto	l10340
  2593  001B50                     l10340:
  2594                           
  2595                           ;lab_final_alt.c: 1691: heater_mode = PORTAbits.RA5;
  2596  001B50  0E00               	movlw	0
  2597  001B52  BA80               	btfsc	3968,5,c	;volatile
  2598  001B54  0E01               	movlw	1
  2599  001B56  0100               	movlb	0	; () banked
  2600  001B58  6FF0               	movwf	_heater_mode& (0+255),b
  2601                           
  2602                           ; BSR set to: 0
  2603                           ;lab_final_alt.c: 1693: DS3231_tempC = DS3231_Read_Temp(0x68);
  2604  001B5A  0E68               	movlw	104
  2605  001B5C  ECFB  F01E         	call	_DS3231_Read_Temp
  2606  001B60  C036  F0DE         	movff	?_DS3231_Read_Temp,_DS3231_tempC
  2607  001B64  C037  F0DF         	movff	?_DS3231_Read_Temp+1,_DS3231_tempC+1
  2608                           
  2609                           ;lab_final_alt.c: 1694: Do_Update_Main_Screen();
  2610  001B68  EC24  F008         	call	_Do_Update_Main_Screen	;wreg free
  2611                           
  2612                           ;lab_final_alt.c: 1696: if((DS3231_tempF < set_heater_temp) && (heater_mode == 1))
  2613  001B6C  0100               	movlb	0	; () banked
  2614  001B6E  51F7               	movf	_set_heater_temp& (0+255),w,b
  2615  001B70  0100               	movlb	0	; () banked
  2616  001B72  6FD8               	movwf	??_main& (0+255),b
  2617  001B74  6BD9               	clrf	(??_main+1)& (0+255),b
  2618  001B76  0100               	movlb	0	; () banked
  2619  001B78  51D8               	movf	??_main& (0+255),w,b
  2620  001B7A  0100               	movlb	0	; () banked
  2621  001B7C  5DE0               	subwf	_DS3231_tempF& (0+255),w,b
  2622  001B7E  0100               	movlb	0	; () banked
  2623  001B80  51E1               	movf	(_DS3231_tempF+1)& (0+255),w,b
  2624  001B82  0A80               	xorlw	128
  2625  001B84  0100               	movlb	0	; () banked
  2626  001B86  6FDA               	movwf	(??_main+2)& (0+255),b
  2627  001B88  0100               	movlb	0	; () banked
  2628  001B8A  51D9               	movf	(??_main+1)& (0+255),w,b
  2629  001B8C  0A80               	xorlw	128
  2630  001B8E  0100               	movlb	0	; () banked
  2631  001B90  59DA               	subwfb	(??_main+2)& (0+255),w,b
  2632  001B92  B0D8               	btfsc	status,0,c
  2633  001B94  D006               	goto	l573
  2634                           
  2635                           ; BSR set to: 0
  2636  001B96  0100               	movlb	0	; () banked
  2637  001B98  05F0               	decf	_heater_mode& (0+255),w,b
  2638  001B9A  A4D8               	btfss	status,2,c
  2639  001B9C  D002               	goto	l573
  2640                           
  2641                           ; BSR set to: 0
  2642                           ;lab_final_alt.c: 1697: PORTCbits.RC0 = 1;
  2643  001B9E  8082               	bsf	3970,0,c	;volatile
  2644  001BA0  D002               	goto	l10352
  2645  001BA2                     l573:
  2646                           
  2647                           ; BSR set to: 0
  2648                           ;lab_final_alt.c: 1698: else
  2649                           ;lab_final_alt.c: 1699: PORTCbits.RC0 = 0;
  2650  001BA2  9082               	bcf	3970,0,c	;volatile
  2651  001BA4  D000               	goto	l10352
  2652  001BA6                     l10352:
  2653                           
  2654                           ; BSR set to: 0
  2655                           ;lab_final_alt.c: 1702: printf ("Time: %02x:%02x:%02x  Date: %02x:%02x:%02x  ",hour,minu
      +                          te,second,month,day,year);
  2656  001BA6  0E2A               	movlw	low STR_1
  2657  001BA8  0100               	movlb	0	; () banked
  2658  001BAA  6FC4               	movwf	printf@f& (0+255),b
  2659  001BAC  0EFF               	movlw	high STR_1
  2660  001BAE  0100               	movlb	0	; () banked
  2661  001BB0  6FC5               	movwf	(printf@f+1)& (0+255),b
  2662  001BB2  C0F1  F0C6         	movff	_hour,?_printf+2
  2663  001BB6  0100               	movlb	0	; () banked
  2664  001BB8  6BC7               	clrf	(?_printf+3)& (0+255),b
  2665  001BBA  C0F2  F0C8         	movff	_minute,?_printf+4
  2666  001BBE  0100               	movlb	0	; () banked
  2667  001BC0  6BC9               	clrf	(?_printf+5)& (0+255),b
  2668  001BC2  C0F6  F0CA         	movff	_second,?_printf+6
  2669  001BC6  0100               	movlb	0	; () banked
  2670  001BC8  6BCB               	clrf	(?_printf+7)& (0+255),b
  2671  001BCA  C0F3  F0CC         	movff	_month,?_printf+8
  2672  001BCE  0100               	movlb	0	; () banked
  2673  001BD0  6BCD               	clrf	(?_printf+9)& (0+255),b
  2674  001BD2  C0EF  F0CE         	movff	_day,?_printf+10
  2675  001BD6  0100               	movlb	0	; () banked
  2676  001BD8  6BCF               	clrf	(?_printf+11)& (0+255),b
  2677  001BDA  C0F8  F0D0         	movff	_year,?_printf+12
  2678  001BDE  0100               	movlb	0	; () banked
  2679  001BE0  6BD1               	clrf	(?_printf+13)& (0+255),b
  2680  001BE2  EC0E  F000         	call	_printf	;wreg free
  2681                           
  2682                           ;lab_final_alt.c: 1703: printf ("Temp: %2d C %2d F\r", DS3231_tempC,DS3231_tempF);
  2683  001BE6  0E6E               	movlw	low STR_2
  2684  001BE8  0100               	movlb	0	; () banked
  2685  001BEA  6FC4               	movwf	printf@f& (0+255),b
  2686  001BEC  0EFF               	movlw	high STR_2
  2687  001BEE  0100               	movlb	0	; () banked
  2688  001BF0  6FC5               	movwf	(printf@f+1)& (0+255),b
  2689  001BF2  C0DE  F0C6         	movff	_DS3231_tempC,?_printf+2
  2690  001BF6  C0DF  F0C7         	movff	_DS3231_tempC+1,?_printf+3
  2691  001BFA  C0E0  F0C8         	movff	_DS3231_tempF,?_printf+4
  2692  001BFE  C0E1  F0C9         	movff	_DS3231_tempF+1,?_printf+5
  2693  001C02  EC0E  F000         	call	_printf	;wreg free
  2694                           
  2695                           ;lab_final_alt.c: 1704: old_second = second;
  2696  001C06  C0F6  F0F5         	movff	_second,_old_second
  2697                           
  2698                           ;lab_final_alt.c: 1710: if (alarm_on_flag == 1 && alarm_mode == 1)
  2699  001C0A  0100               	movlb	0	; () banked
  2700  001C0C  05EC               	decf	_alarm_on_flag& (0+255),w,b
  2701  001C0E  A4D8               	btfss	status,2,c
  2702  001C10  D009               	goto	l10364
  2703                           
  2704                           ; BSR set to: 0
  2705  001C12  0100               	movlb	0	; () banked
  2706  001C14  05EB               	decf	_alarm_mode& (0+255),w,b
  2707  001C16  A4D8               	btfss	status,2,c
  2708  001C18  D005               	goto	l10364
  2709                           
  2710                           ; BSR set to: 0
  2711                           ;lab_final_alt.c: 1711: {
  2712                           ;lab_final_alt.c: 1712: gen_2khz_sound();
  2713  001C1A  ECC2  F025         	call	_gen_2khz_sound	;wreg free
  2714                           
  2715                           ;lab_final_alt.c: 1713: LED_Alarm();
  2716  001C1E  ECB6  F01E         	call	_LED_Alarm	;wreg free
  2717  001C22  D000               	goto	l10364
  2718  001C24                     l10364:
  2719                           
  2720                           ;lab_final_alt.c: 1714: }
  2721                           ;lab_final_alt.c: 1716: }
  2722                           ;lab_final_alt.c: 1718: Read_Volt_In();
  2723  001C24  ECEE  F020         	call	_Read_Volt_In	;wreg free
  2724                           
  2725                           ;lab_final_alt.c: 1719: Do_LED_Out(Volt);
  2726  001C28  C0DB  F0B2         	movff	_Volt,___fttol@f1
  2727  001C2C  C0DC  F0B3         	movff	_Volt+1,___fttol@f1+1
  2728  001C30  C0DD  F0B4         	movff	_Volt+2,___fttol@f1+2
  2729  001C34  EC99  F016         	call	___fttol	;wreg free
  2730  001C38  0100               	movlb	0	; () banked
  2731  001C3A  51B2               	movf	?___fttol& (0+255),w,b
  2732  001C3C  EC90  F023         	call	_Do_LED_Out
  2733                           
  2734                           ;lab_final_alt.c: 1720: printf("\rVolt = %f", Volt);
  2735  001C40  0EBB               	movlw	low STR_3
  2736  001C42  0100               	movlb	0	; () banked
  2737  001C44  6FC4               	movwf	printf@f& (0+255),b
  2738  001C46  0EFF               	movlw	high STR_3
  2739  001C48  0100               	movlb	0	; () banked
  2740  001C4A  6FC5               	movwf	(printf@f+1)& (0+255),b
  2741  001C4C  C0DB  F0C6         	movff	_Volt,?_printf+2
  2742  001C50  C0DC  F0C7         	movff	_Volt+1,?_printf+3
  2743  001C54  C0DD  F0C8         	movff	_Volt+2,?_printf+4
  2744  001C58  EC0E  F000         	call	_printf	;wreg free
  2745                           
  2746                           ;lab_final_alt.c: 1722: if (nec_ok == 1)
  2747  001C5C  0100               	movlb	0	; () banked
  2748  001C5E  05F4               	decf	_nec_ok& (0+255),w,b
  2749  001C60  A4D8               	btfss	status,2,c
  2750  001C62  D758               	goto	l10326
  2751                           
  2752                           ; BSR set to: 0
  2753                           ;lab_final_alt.c: 1723: {
  2754                           ;lab_final_alt.c: 1724: INTCON3bits.INT2IE = 1;
  2755  001C64  88F0               	bsf	intcon3,4,c	;volatile
  2756                           
  2757                           ;lab_final_alt.c: 1725: INTCON2bits.INTEDG2 = 0;
  2758  001C66  98F1               	bcf	intcon2,4,c	;volatile
  2759                           
  2760                           ; BSR set to: 0
  2761                           ;lab_final_alt.c: 1726: nec_ok = 0;
  2762  001C68  0E00               	movlw	0
  2763  001C6A  0100               	movlb	0	; () banked
  2764  001C6C  6FF4               	movwf	_nec_ok& (0+255),b
  2765                           
  2766                           ; BSR set to: 0
  2767                           ;lab_final_alt.c: 1727: if (nec_code == 0x00ff906f) Do_Setup_Time();
  2768  001C6E  0E6F               	movlw	111
  2769  001C70  1849               	xorwf	_nec_code,w,c
  2770  001C72  E10A               	bnz	l10380
  2771  001C74  0E90               	movlw	144
  2772  001C76  184A               	xorwf	_nec_code+1,w,c
  2773  001C78  E107               	bnz	l10380
  2774  001C7A  284B               	incf	_nec_code+2,w,c
  2775  001C7C  104C               	iorwf	_nec_code+3,w,c
  2776  001C7E  A4D8               	btfss	status,2,c
  2777  001C80  D003               	goto	l10380
  2778                           
  2779                           ; BSR set to: 0
  2780  001C82  EC9F  F00B         	call	_Do_Setup_Time	;wreg free
  2781  001C86  D000               	goto	l10380
  2782  001C88                     l10380:
  2783                           
  2784                           ;lab_final_alt.c: 1728: if (nec_code == 0x00ffa857) Do_Setup_Alarm_Time();
  2785  001C88  0E57               	movlw	87
  2786  001C8A  1849               	xorwf	_nec_code,w,c
  2787  001C8C  E10A               	bnz	l10384
  2788  001C8E  0EA8               	movlw	168
  2789  001C90  184A               	xorwf	_nec_code+1,w,c
  2790  001C92  E107               	bnz	l10384
  2791  001C94  284B               	incf	_nec_code+2,w,c
  2792  001C96  104C               	iorwf	_nec_code+3,w,c
  2793  001C98  A4D8               	btfss	status,2,c
  2794  001C9A  D003               	goto	l10384
  2795  001C9C  ECDB  F010         	call	_Do_Setup_Alarm_Time	;wreg free
  2796  001CA0  D000               	goto	l10384
  2797  001CA2                     l10384:
  2798                           
  2799                           ;lab_final_alt.c: 1729: if (nec_code == 0x00ffe01f) Do_Setup_Heater_Temp();
  2800  001CA2  0E1F               	movlw	31
  2801  001CA4  1849               	xorwf	_nec_code,w,c
  2802  001CA6  E10A               	bnz	l10388
  2803  001CA8  0EE0               	movlw	224
  2804  001CAA  184A               	xorwf	_nec_code+1,w,c
  2805  001CAC  E107               	bnz	l10388
  2806  001CAE  284B               	incf	_nec_code+2,w,c
  2807  001CB0  104C               	iorwf	_nec_code+3,w,c
  2808  001CB2  A4D8               	btfss	status,2,c
  2809  001CB4  D003               	goto	l10388
  2810  001CB6  EC64  F019         	call	_Do_Setup_Heater_Temp	;wreg free
  2811  001CBA  D000               	goto	l10388
  2812  001CBC                     l10388:
  2813                           
  2814                           ;lab_final_alt.c: 1730: if (nec_code == 0x00ffe21d) Do_LED_Up();
  2815  001CBC  0E1D               	movlw	29
  2816  001CBE  1849               	xorwf	_nec_code,w,c
  2817  001CC0  E10A               	bnz	l10392
  2818  001CC2  0EE2               	movlw	226
  2819  001CC4  184A               	xorwf	_nec_code+1,w,c
  2820  001CC6  E107               	bnz	l10392
  2821  001CC8  284B               	incf	_nec_code+2,w,c
  2822  001CCA  104C               	iorwf	_nec_code+3,w,c
  2823  001CCC  A4D8               	btfss	status,2,c
  2824  001CCE  D003               	goto	l10392
  2825  001CD0  EC11  F025         	call	_Do_LED_Up	;wreg free
  2826  001CD4  D000               	goto	l10392
  2827  001CD6                     l10392:
  2828                           
  2829                           ;lab_final_alt.c: 1731: if (nec_code == 0x00ffa25d) Do_LED_Down();
  2830  001CD6  0E5D               	movlw	93
  2831  001CD8  1849               	xorwf	_nec_code,w,c
  2832  001CDA  E106               	bnz	u9631
  2833  001CDC  0EA2               	movlw	162
  2834  001CDE  184A               	xorwf	_nec_code+1,w,c
  2835  001CE0  E103               	bnz	u9631
  2836  001CE2  284B               	incf	_nec_code+2,w,c
  2837  001CE4  104C               	iorwf	_nec_code+3,w,c
  2838  001CE6  A4D8               	btfss	status,2,c
  2839  001CE8                     u9631:
  2840  001CE8  D715               	goto	l10326
  2841  001CEA  EC49  F025         	call	_Do_LED_Down	;wreg free
  2842  001CEE  D712               	goto	l10326
  2843  001CF0  EF0C  F000         	goto	start
  2844  001CF4                     __end_of_main:
  2845                           	opt stack 0
  2846                           tblptru	equ	0xFF8
  2847                           tblptrh	equ	0xFF7
  2848                           tblptrl	equ	0xFF6
  2849                           tablat	equ	0xFF5
  2850                           intcon	equ	0xFF2
  2851                           intcon2	equ	0xFF1
  2852                           intcon3	equ	0xFF0
  2853                           postinc0	equ	0xFEE
  2854                           wreg	equ	0xFE8
  2855                           postdec1	equ	0xFE5
  2856                           fsr1l	equ	0xFE1
  2857                           status	equ	0xFD8
  2858                           
  2859 ;; *************** function _printf *****************
  2860 ;; Defined at:
  2861 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  2862 ;; Parameters:    Size  Location     Type
  2863 ;;  f               2   18[BANK0 ] PTR const unsigned char 
  2864 ;;		 -> STR_3(11), STR_2(19), STR_1(45), 
  2865 ;; Auto vars:     Size  Location     Type
  2866 ;;  idx             1    3[BANK1 ] unsigned char 
  2867 ;;  val             4   16[BANK1 ] unsigned long 
  2868 ;;  tmpval          4    8[BANK1 ] struct .
  2869 ;;  fval            3   22[BANK1 ] struct .
  2870 ;;  cp              3    0        PTR const unsigned char 
  2871 ;;  flag            2   20[BANK1 ] unsigned short 
  2872 ;;  exp             2   14[BANK1 ] int 
  2873 ;;  width           2   12[BANK1 ] int 
  2874 ;;  prec            2    6[BANK1 ] int 
  2875 ;;  ap              2    4[BANK1 ] PTR void [1]
  2876 ;;		 -> ?_printf(2), 
  2877 ;;  len             2    0        unsigned int 
  2878 ;;  c               1   25[BANK1 ] char 
  2879 ;;  d               1    0        unsigned char 
  2880 ;; Return value:  Size  Location     Type
  2881 ;;                  2   18[BANK0 ] int 
  2882 ;; Registers used:
  2883 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2884 ;; Tracked objects:
  2885 ;;		On entry : 0/0
  2886 ;;		On exit  : 0/0
  2887 ;;		Unchanged: 0/0
  2888 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2889 ;;      Params:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2890 ;;      Locals:         0       0      26       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2891 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2892 ;;      Totals:         0      20      26       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2893 ;;Total ram usage:       46 bytes
  2894 ;; Hardware stack levels used:    1
  2895 ;; Hardware stack levels required when called:    8
  2896 ;; This function calls:
  2897 ;;		___awdiv
  2898 ;;		___ftadd
  2899 ;;		___ftge
  2900 ;;		___ftmul
  2901 ;;		___ftneg
  2902 ;;		___ftsub
  2903 ;;		___fttol
  2904 ;;		___lldiv
  2905 ;;		___llmod
  2906 ;;		___lltoft
  2907 ;;		___wmul
  2908 ;;		__div_to_l_
  2909 ;;		__tdiv_to_l_
  2910 ;;		_fround
  2911 ;;		_isdigit
  2912 ;;		_putch
  2913 ;;		_scale
  2914 ;; This function is called by:
  2915 ;;		_main
  2916 ;; This function uses a non-reentrant model
  2917 ;;
  2918                           
  2919                           	psect	text1
  2920  00001C                     __ptext1:
  2921                           	opt stack 0
  2922  00001C                     _printf:
  2923                           	opt stack 22
  2924                           
  2925                           ;doprnt.c: 466: va_list ap;
  2926                           ;doprnt.c: 499: signed char c;
  2927                           ;doprnt.c: 501: int width;
  2928                           ;doprnt.c: 504: int prec;
  2929                           ;doprnt.c: 508: unsigned short flag;
  2930                           ;doprnt.c: 515: char d;
  2931                           ;doprnt.c: 516: double fval;
  2932                           ;doprnt.c: 517: int exp;
  2933                           ;doprnt.c: 523: union {
  2934                           ;doprnt.c: 524: unsigned long vd;
  2935                           ;doprnt.c: 525: double integ;
  2936                           ;doprnt.c: 526: } tmpval;
  2937                           ;doprnt.c: 528: unsigned long val;
  2938                           ;doprnt.c: 529: unsigned len;
  2939                           ;doprnt.c: 530: const char * cp;
  2940                           ;doprnt.c: 533: *ap = __va_start();
  2941                           
  2942                           ;incstack = 0
  2943  00001C  0EC6               	movlw	low (?_printf+2)
  2944  00001E  0101               	movlb	1	; () banked
  2945  000020  6F35               	movwf	printf@ap& (0+255),b
  2946  000022  0E00               	movlw	high (?_printf+2)
  2947  000024  0101               	movlb	1	; () banked
  2948  000026  6F36               	movwf	(printf@ap+1)& (0+255),b
  2949                           
  2950                           ;doprnt.c: 536: while(c = *f++) {
  2951  000028  EF22  F006         	goto	l9568
  2952  00002C                     l9282:
  2953                           
  2954                           ; BSR set to: 1
  2955                           ;doprnt.c: 538: if(c != '%')
  2956  00002C  0E25               	movlw	37
  2957  00002E  0101               	movlb	1	; () banked
  2958  000030  194A               	xorwf	printf@c& (0+255),w,b
  2959  000032  B4D8               	btfsc	status,2,c
  2960  000034  D006               	goto	l9286
  2961                           
  2962                           ; BSR set to: 1
  2963                           ;doprnt.c: 540: {
  2964                           ;doprnt.c: 541: (putch(c) );
  2965  000036  0101               	movlb	1	; () banked
  2966  000038  514A               	movf	printf@c& (0+255),w,b
  2967  00003A  EC11  F026         	call	_putch
  2968                           
  2969                           ;doprnt.c: 542: continue;
  2970  00003E  EF22  F006         	goto	l9568
  2971  000042                     l9286:
  2972                           
  2973                           ;doprnt.c: 543: }
  2974                           ;doprnt.c: 546: width = 0;
  2975  000042  0E00               	movlw	0
  2976  000044  0101               	movlb	1	; () banked
  2977  000046  6F3E               	movwf	(printf@width+1)& (0+255),b
  2978  000048  0E00               	movlw	0
  2979  00004A  6F3D               	movwf	printf@width& (0+255),b
  2980                           
  2981                           ;doprnt.c: 548: flag = 0;
  2982  00004C  0E00               	movlw	0
  2983  00004E  0101               	movlb	1	; () banked
  2984  000050  6F46               	movwf	(printf@flag+1)& (0+255),b
  2985  000052  0E00               	movlw	0
  2986  000054  6F45               	movwf	printf@flag& (0+255),b
  2987                           
  2988                           ; BSR set to: 1
  2989                           ;doprnt.c: 551: switch(*f) {
  2990                           
  2991                           ;doprnt.c: 550: for(;;) {
  2992  000056  D007               	goto	l9292
  2993  000058                     l9288:
  2994                           
  2995                           ;doprnt.c: 580: flag |= 0x04;
  2996  000058  0101               	movlb	1	; () banked
  2997  00005A  8545               	bsf	printf@flag& (0+255),2,b
  2998                           
  2999                           ;doprnt.c: 581: f++;
  3000  00005C  0100               	movlb	0	; () banked
  3001  00005E  4BC4               	infsnz	printf@f& (0+255),f,b
  3002  000060  2BC5               	incf	(printf@f+1)& (0+255),f,b
  3003                           
  3004                           ;doprnt.c: 582: continue;
  3005  000062  D001               	goto	l9292
  3006                           
  3007                           ; BSR set to: 0
  3008                           ;doprnt.c: 584: }
  3009  000064  D00B               	goto	l9294
  3010  000066                     l9292:
  3011  000066  C0C4  FFF6         	movff	printf@f,tblptrl
  3012  00006A  C0C5  FFF7         	movff	printf@f+1,tblptrh
  3013  00006E                     	if	0	;tblptru may be non-zero
  3014  00006E                     	endif
  3015  00006E                     	if	0	;tblptru may be non-zero
  3016  00006E                     	endif
  3017  00006E  0008               	tblrd		*
  3018  000070  50F5               	movf	tablat,w,c
  3019                           
  3020                           ; Switch size 1, requested type "space"
  3021                           ; Number of cases is 1, Range of values is 48 to 48
  3022                           ; switch strategies available:
  3023                           ; Name         Instructions Cycles
  3024                           ; simple_byte            4     3 (average)
  3025                           ;	Chosen strategy is simple_byte
  3026  000072  0A30               	xorlw	48	; case 48
  3027  000074  B4D8               	btfsc	status,2,c
  3028  000076  D7F0               	goto	l9288
  3029                           
  3030                           ;doprnt.c: 585: break;
  3031  000078  D001               	goto	l9294
  3032                           
  3033                           ;doprnt.c: 586: }
  3034  00007A  D7F5               	goto	l9292
  3035  00007C                     l9294:
  3036                           
  3037                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  3038  00007C  C0C4  FFF6         	movff	printf@f,tblptrl
  3039  000080  C0C5  FFF7         	movff	printf@f+1,tblptrh
  3040  000084                     	if	0	;tblptru may be non-zero
  3041  000084                     	endif
  3042  000084                     	if	0	;tblptru may be non-zero
  3043  000084                     	endif
  3044  000084  0008               	tblrd		*
  3045  000086  50F5               	movf	tablat,w,c
  3046  000088  EC5B  F025         	call	_isdigit
  3047  00008C  A0D8               	btfss	status,0,c
  3048  00008E  D04D               	goto	l9312
  3049                           
  3050                           ;doprnt.c: 598: width = 0;
  3051  000090  0E00               	movlw	0
  3052  000092  0101               	movlb	1	; () banked
  3053  000094  6F3E               	movwf	(printf@width+1)& (0+255),b
  3054  000096  0E00               	movlw	0
  3055  000098  6F3D               	movwf	printf@width& (0+255),b
  3056  00009A  D000               	goto	l9298
  3057  00009C                     l9298:
  3058                           
  3059                           ;doprnt.c: 600: width *= 10;
  3060  00009C  C13D  F02A         	movff	printf@width,___wmul@multiplier
  3061  0000A0  C13E  F02B         	movff	printf@width+1,___wmul@multiplier+1
  3062  0000A4  0E00               	movlw	0
  3063  0000A6  6E2D               	movwf	___wmul@multiplicand+1,c
  3064  0000A8  0E0A               	movlw	10
  3065  0000AA  6E2C               	movwf	___wmul@multiplicand,c
  3066  0000AC  ECC3  F024         	call	___wmul	;wreg free
  3067  0000B0  C02A  F13D         	movff	?___wmul,printf@width
  3068  0000B4  C02B  F13E         	movff	?___wmul+1,printf@width+1
  3069                           
  3070                           ;doprnt.c: 601: width += *f++ - '0';
  3071  0000B8  0ED0               	movlw	208
  3072  0000BA  0100               	movlb	0	; () banked
  3073  0000BC  6FD2               	movwf	??_printf& (0+255),b
  3074  0000BE  0EFF               	movlw	255
  3075  0000C0  0100               	movlb	0	; () banked
  3076  0000C2  6FD3               	movwf	(??_printf+1)& (0+255),b
  3077  0000C4  C0C4  FFF6         	movff	printf@f,tblptrl
  3078  0000C8  C0C5  FFF7         	movff	printf@f+1,tblptrh
  3079  0000CC                     	if	0	;tblptru may be non-zero
  3080  0000CC                     	endif
  3081  0000CC                     	if	0	;tblptru may be non-zero
  3082  0000CC                     	endif
  3083  0000CC  0008               	tblrd		*
  3084  0000CE  50F5               	movf	tablat,w,c
  3085  0000D0  0100               	movlb	0	; () banked
  3086  0000D2  6FD4               	movwf	(??_printf+2)& (0+255),b
  3087  0000D4  6BD5               	clrf	(??_printf+3)& (0+255),b
  3088  0000D6  0100               	movlb	0	; () banked
  3089  0000D8  51D2               	movf	??_printf& (0+255),w,b
  3090  0000DA  0100               	movlb	0	; () banked
  3091  0000DC  27D4               	addwf	(??_printf+2)& (0+255),f,b
  3092  0000DE  0100               	movlb	0	; () banked
  3093  0000E0  51D3               	movf	(??_printf+1)& (0+255),w,b
  3094  0000E2  0100               	movlb	0	; () banked
  3095  0000E4  23D5               	addwfc	(??_printf+3)& (0+255),f,b
  3096  0000E6  0100               	movlb	0	; () banked
  3097  0000E8  51D4               	movf	(??_printf+2)& (0+255),w,b
  3098  0000EA  0101               	movlb	1	; () banked
  3099  0000EC  273D               	addwf	printf@width& (0+255),f,b
  3100  0000EE  0100               	movlb	0	; () banked
  3101  0000F0  51D5               	movf	(??_printf+3)& (0+255),w,b
  3102  0000F2  0101               	movlb	1	; () banked
  3103  0000F4  233E               	addwfc	(printf@width+1)& (0+255),f,b
  3104                           
  3105                           ; BSR set to: 1
  3106  0000F6  0100               	movlb	0	; () banked
  3107  0000F8  4BC4               	infsnz	printf@f& (0+255),f,b
  3108  0000FA  2BC5               	incf	(printf@f+1)& (0+255),f,b
  3109                           
  3110                           ; BSR set to: 0
  3111                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  3112  0000FC  C0C4  FFF6         	movff	printf@f,tblptrl
  3113  000100  C0C5  FFF7         	movff	printf@f+1,tblptrh
  3114  000104                     	if	0	;tblptru may be non-zero
  3115  000104                     	endif
  3116  000104                     	if	0	;tblptru may be non-zero
  3117  000104                     	endif
  3118  000104  0008               	tblrd		*
  3119  000106  50F5               	movf	tablat,w,c
  3120  000108  EC5B  F025         	call	_isdigit
  3121  00010C  A0D8               	btfss	status,0,c
  3122  00010E  D00D               	goto	l9312
  3123  000110  D7C5               	goto	l9298
  3124                           
  3125                           ;doprnt.c: 608: }
  3126                           ;doprnt.c: 635: switch(c = *f++) {
  3127  000112  D00B               	goto	l9312
  3128                           
  3129                           ;doprnt.c: 638: goto alldone;
  3130                           
  3131                           ;doprnt.c: 637: case 0:
  3132  000114  EF33  F006         	goto	l966
  3133  000118                     l9306:
  3134                           
  3135                           ;doprnt.c: 663: flag |= 0x400;
  3136  000118  0101               	movlb	1	; () banked
  3137  00011A  8546               	bsf	(printf@flag+1)& (0+255),2,b
  3138                           
  3139                           ; BSR set to: 1
  3140                           ;doprnt.c: 698: case 'i':
  3141                           ;doprnt.c: 699: break;
  3142                           
  3143                           ; BSR set to: 1
  3144                           
  3145                           ;doprnt.c: 697: case 'd':
  3146                           
  3147                           ;doprnt.c: 664: break;
  3148  00011C  D024               	goto	l9314
  3149  00011E                     l9308:
  3150                           
  3151                           ; BSR set to: 1
  3152                           ;doprnt.c: 721: flag |= 0x80;
  3153  00011E  0101               	movlb	1	; () banked
  3154  000120  8F45               	bsf	printf@flag& (0+255),7,b
  3155                           
  3156                           ;doprnt.c: 723: break;
  3157  000122  D021               	goto	l9314
  3158                           
  3159                           ; BSR set to: 1
  3160                           ;doprnt.c: 813: continue;
  3161                           
  3162                           ;doprnt.c: 802: default:
  3163  000124  EF22  F006         	goto	l9568
  3164                           
  3165                           ; BSR set to: 1
  3166                           ;doprnt.c: 822: }
  3167  000128  D01E               	goto	l9314
  3168  00012A                     l9312:
  3169  00012A  C0C4  FFF6         	movff	printf@f,tblptrl
  3170  00012E  C0C5  FFF7         	movff	printf@f+1,tblptrh
  3171  000132  0100               	movlb	0	; () banked
  3172  000134  4BC4               	infsnz	printf@f& (0+255),f,b
  3173  000136  2BC5               	incf	(printf@f+1)& (0+255),f,b
  3174  000138                     	if	0	;tblptru may be non-zero
  3175  000138                     	endif
  3176  000138                     	if	0	;tblptru may be non-zero
  3177  000138                     	endif
  3178  000138  0008               	tblrd		*
  3179  00013A  CFF5 F14A          	movff	tablat,printf@c
  3180  00013E  0101               	movlb	1	; () banked
  3181  000140  514A               	movf	printf@c& (0+255),w,b
  3182                           
  3183                           ; Switch size 1, requested type "space"
  3184                           ; Number of cases is 5, Range of values is 0 to 120
  3185                           ; switch strategies available:
  3186                           ; Name         Instructions Cycles
  3187                           ; simple_byte           16     9 (average)
  3188                           ;	Chosen strategy is simple_byte
  3189  000142  0A00               	xorlw	0	; case 0
  3190  000144  B4D8               	btfsc	status,2,c
  3191  000146  EF33  F006         	goto	l966
  3192  00014A  0A64               	xorlw	100	; case 100
  3193  00014C  B4D8               	btfsc	status,2,c
  3194  00014E  D00B               	goto	l9314
  3195  000150  0A02               	xorlw	2	; case 102
  3196  000152  B4D8               	btfsc	status,2,c
  3197  000154  D7E1               	goto	l9306
  3198  000156  0A0F               	xorlw	15	; case 105
  3199  000158  B4D8               	btfsc	status,2,c
  3200  00015A  D005               	goto	l9314
  3201  00015C  0A11               	xorlw	17	; case 120
  3202  00015E  B4D8               	btfsc	status,2,c
  3203  000160  D7DE               	goto	l9308
  3204  000162  EF22  F006         	goto	l9568
  3205  000166                     l9314:
  3206                           
  3207                           ; BSR set to: 1
  3208                           ;doprnt.c: 825: if(flag & (0x700)) {
  3209  000166  0E07               	movlw	7
  3210  000168  0101               	movlb	1	; () banked
  3211  00016A  1546               	andwf	(printf@flag+1)& (0+255),w,b
  3212  00016C  B4D8               	btfsc	status,2,c
  3213  00016E  D39E               	goto	l884
  3214                           
  3215                           ; BSR set to: 1
  3216                           ;doprnt.c: 829: prec = 6;
  3217  000170  0E00               	movlw	0
  3218  000172  0101               	movlb	1	; () banked
  3219  000174  6F38               	movwf	(printf@prec+1)& (0+255),b
  3220  000176  0E06               	movlw	6
  3221  000178  6F37               	movwf	printf@prec& (0+255),b
  3222                           
  3223                           ; BSR set to: 1
  3224                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  3225  00017A  C135  FFD9         	movff	printf@ap,fsr2l
  3226  00017E  C136  FFDA         	movff	printf@ap+1,fsr2h
  3227  000182  CFDE F147          	movff	postinc2,printf@fval
  3228  000186  CFDE F148          	movff	postinc2,printf@fval+1
  3229  00018A  CFDD F149          	movff	postdec2,printf@fval+2
  3230                           
  3231                           ; BSR set to: 1
  3232  00018E  0E03               	movlw	3
  3233  000190  0101               	movlb	1	; () banked
  3234  000192  2735               	addwf	printf@ap& (0+255),f,b
  3235  000194  0E00               	movlw	0
  3236  000196  2336               	addwfc	(printf@ap+1)& (0+255),f,b
  3237                           
  3238                           ; BSR set to: 1
  3239                           ;doprnt.c: 831: if(fval < 0.0) {
  3240  000198  0101               	movlb	1	; () banked
  3241  00019A  AF49               	btfss	(printf@fval+2)& (0+255),7,b
  3242  00019C  D012               	goto	l9328
  3243                           
  3244                           ; BSR set to: 1
  3245                           ;doprnt.c: 832: fval = -fval;
  3246  00019E  C147  F01C         	movff	printf@fval,___ftneg@f1
  3247  0001A2  C148  F01D         	movff	printf@fval+1,___ftneg@f1+1
  3248  0001A6  C149  F01E         	movff	printf@fval+2,___ftneg@f1+2
  3249  0001AA  EC37  F025         	call	___ftneg	;wreg free
  3250  0001AE  C01C  F147         	movff	?___ftneg,printf@fval
  3251  0001B2  C01D  F148         	movff	?___ftneg+1,printf@fval+1
  3252  0001B6  C01E  F149         	movff	?___ftneg+2,printf@fval+2
  3253                           
  3254                           ;doprnt.c: 833: flag |= 0x03;
  3255  0001BA  0E03               	movlw	3
  3256  0001BC  0101               	movlb	1	; () banked
  3257  0001BE  1345               	iorwf	printf@flag& (0+255),f,b
  3258  0001C0  D000               	goto	l9328
  3259  0001C2                     l9328:
  3260                           
  3261                           ; BSR set to: 1
  3262                           ;doprnt.c: 834: }
  3263                           ;doprnt.c: 835: exp = 0;
  3264  0001C2  0E00               	movlw	0
  3265  0001C4  0101               	movlb	1	; () banked
  3266  0001C6  6F40               	movwf	(printf@exp+1)& (0+255),b
  3267  0001C8  0E00               	movlw	0
  3268  0001CA  6F3F               	movwf	printf@exp& (0+255),b
  3269                           
  3270                           ; BSR set to: 1
  3271                           ;doprnt.c: 836: if( fval!=0) {
  3272  0001CC  0101               	movlb	1	; () banked
  3273  0001CE  5147               	movf	printf@fval& (0+255),w,b
  3274  0001D0  0101               	movlb	1	; () banked
  3275  0001D2  1148               	iorwf	(printf@fval+1)& (0+255),w,b
  3276  0001D4  0101               	movlb	1	; () banked
  3277  0001D6  1149               	iorwf	(printf@fval+2)& (0+255),w,b
  3278  0001D8  B4D8               	btfsc	status,2,c
  3279  0001DA  D093               	goto	l9356
  3280                           
  3281                           ; BSR set to: 1
  3282                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  3283  0001DC  0E82               	movlw	130
  3284  0001DE  0100               	movlb	0	; () banked
  3285  0001E0  6FD2               	movwf	??_printf& (0+255),b
  3286  0001E2  0EFF               	movlw	255
  3287  0001E4  0100               	movlb	0	; () banked
  3288  0001E6  6FD3               	movwf	(??_printf+1)& (0+255),b
  3289  0001E8  C147  F0D4         	movff	printf@fval,??_printf+2
  3290  0001EC  C148  F0D5         	movff	printf@fval+1,??_printf+3
  3291  0001F0  C149  F0D6         	movff	printf@fval+2,??_printf+4
  3292  0001F4  C14A  F0D7         	movff	printf@fval+3,??_printf+5
  3293  0001F8  0E10               	movlw	16
  3294  0001FA  D006               	goto	u8370
  3295  0001FC                     u8375:
  3296  0001FC  0100               	movlb	0	; () banked
  3297  0001FE  90D8               	bcf	status,0,c
  3298  000200  33D7               	rrcf	(??_printf+5)& (0+255),f,b
  3299  000202  33D6               	rrcf	(??_printf+4)& (0+255),f,b
  3300  000204  33D5               	rrcf	(??_printf+3)& (0+255),f,b
  3301  000206  33D4               	rrcf	(??_printf+2)& (0+255),f,b
  3302  000208                     u8370:
  3303  000208  2EE8               	decfsz	wreg,f,c
  3304  00020A  D7F8               	goto	u8375
  3305  00020C  0100               	movlb	0	; () banked
  3306  00020E  51D4               	movf	(??_printf+2)& (0+255),w,b
  3307  000210  0100               	movlb	0	; () banked
  3308  000212  25D2               	addwf	??_printf& (0+255),w,b
  3309  000214  0101               	movlb	1	; () banked
  3310  000216  6F3F               	movwf	printf@exp& (0+255),b
  3311  000218  0E00               	movlw	0
  3312  00021A  0100               	movlb	0	; () banked
  3313  00021C  21D3               	addwfc	(??_printf+1)& (0+255),w,b
  3314  00021E  0101               	movlb	1	; () banked
  3315  000220  6F40               	movwf	(printf@exp+1)& (0+255),b
  3316                           
  3317                           ; BSR set to: 1
  3318                           ;doprnt.c: 838: exp--;
  3319  000222  0101               	movlb	1	; () banked
  3320  000224  073F               	decf	printf@exp& (0+255),f,b
  3321  000226  A0D8               	btfss	status,0,c
  3322  000228  0740               	decf	(printf@exp+1)& (0+255),f,b
  3323                           
  3324                           ; BSR set to: 1
  3325                           ;doprnt.c: 839: exp *= 3;
  3326  00022A  C13F  F02A         	movff	printf@exp,___wmul@multiplier
  3327  00022E  C140  F02B         	movff	printf@exp+1,___wmul@multiplier+1
  3328  000232  0E00               	movlw	0
  3329  000234  6E2D               	movwf	___wmul@multiplicand+1,c
  3330  000236  0E03               	movlw	3
  3331  000238  6E2C               	movwf	___wmul@multiplicand,c
  3332  00023A  ECC3  F024         	call	___wmul	;wreg free
  3333  00023E  C02A  F13F         	movff	?___wmul,printf@exp
  3334  000242  C02B  F140         	movff	?___wmul+1,printf@exp+1
  3335                           
  3336                           ;doprnt.c: 840: exp /= 10;
  3337  000246  C13F  F022         	movff	printf@exp,___awdiv@dividend
  3338  00024A  C140  F023         	movff	printf@exp+1,___awdiv@dividend+1
  3339  00024E  0E00               	movlw	0
  3340  000250  6E25               	movwf	___awdiv@divisor+1,c
  3341  000252  0E0A               	movlw	10
  3342  000254  6E24               	movwf	___awdiv@divisor,c
  3343  000256  EC92  F01D         	call	___awdiv	;wreg free
  3344  00025A  C022  F13F         	movff	?___awdiv,printf@exp
  3345  00025E  C023  F140         	movff	?___awdiv+1,printf@exp+1
  3346                           
  3347                           ;doprnt.c: 841: if(exp < 0)
  3348  000262  0101               	movlb	1	; () banked
  3349  000264  AF40               	btfss	(printf@exp+1)& (0+255),7,b
  3350  000266  D005               	goto	l9344
  3351                           
  3352                           ; BSR set to: 1
  3353                           ;doprnt.c: 842: exp--;
  3354  000268  0101               	movlb	1	; () banked
  3355  00026A  073F               	decf	printf@exp& (0+255),f,b
  3356  00026C  A0D8               	btfss	status,0,c
  3357  00026E  0740               	decf	(printf@exp+1)& (0+255),f,b
  3358  000270  D000               	goto	l9344
  3359  000272                     l9344:
  3360                           
  3361                           ; BSR set to: 1
  3362                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  3363  000272  0101               	movlb	1	; () banked
  3364  000274  513F               	movf	printf@exp& (0+255),w,b
  3365  000276  0800               	sublw	0
  3366  000278  EC34  F006         	call	_scale
  3367  00027C  C03F  F139         	movff	?_scale,printf@tmpval
  3368  000280  C040  F13A         	movff	?_scale+1,printf@tmpval+1
  3369  000284  C041  F13B         	movff	?_scale+2,printf@tmpval+2
  3370                           
  3371                           ;doprnt.c: 847: tmpval.integ *= fval;
  3372  000288  C139  F030         	movff	printf@tmpval,___ftmul@f1
  3373  00028C  C13A  F031         	movff	printf@tmpval+1,___ftmul@f1+1
  3374  000290  C13B  F032         	movff	printf@tmpval+2,___ftmul@f1+2
  3375  000294  C147  F033         	movff	printf@fval,___ftmul@f2
  3376  000298  C148  F034         	movff	printf@fval+1,___ftmul@f2+1
  3377  00029C  C149  F035         	movff	printf@fval+2,___ftmul@f2+2
  3378  0002A0  ECF0  F01A         	call	___ftmul	;wreg free
  3379  0002A4  C030  F139         	movff	?___ftmul,printf@tmpval
  3380  0002A8  C031  F13A         	movff	?___ftmul+1,printf@tmpval+1
  3381  0002AC  C032  F13B         	movff	?___ftmul+2,printf@tmpval+2
  3382                           
  3383                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  3384  0002B0  C139  F028         	movff	printf@tmpval,___ftge@ff1
  3385  0002B4  C13A  F029         	movff	printf@tmpval+1,___ftge@ff1+1
  3386  0002B8  C13B  F02A         	movff	printf@tmpval+2,___ftge@ff1+2
  3387  0002BC  0E00               	movlw	0
  3388  0002BE  6E2B               	movwf	___ftge@ff2,c
  3389  0002C0  0E80               	movlw	128
  3390  0002C2  6E2C               	movwf	___ftge@ff2+1,c
  3391  0002C4  0E3F               	movlw	63
  3392  0002C6  6E2D               	movwf	___ftge@ff2+2,c
  3393  0002C8  ECDD  F01D         	call	___ftge	;wreg free
  3394  0002CC  B0D8               	btfsc	status,0,c
  3395  0002CE  D005               	goto	l9352
  3396                           
  3397                           ;doprnt.c: 849: exp--;
  3398  0002D0  0101               	movlb	1	; () banked
  3399  0002D2  073F               	decf	printf@exp& (0+255),f,b
  3400  0002D4  A0D8               	btfss	status,0,c
  3401  0002D6  0740               	decf	(printf@exp+1)& (0+255),f,b
  3402  0002D8  D014               	goto	l9356
  3403  0002DA                     l9352:
  3404                           
  3405                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  3406  0002DA  C139  F028         	movff	printf@tmpval,___ftge@ff1
  3407  0002DE  C13A  F029         	movff	printf@tmpval+1,___ftge@ff1+1
  3408  0002E2  C13B  F02A         	movff	printf@tmpval+2,___ftge@ff1+2
  3409  0002E6  0E00               	movlw	0
  3410  0002E8  6E2B               	movwf	___ftge@ff2,c
  3411  0002EA  0E20               	movlw	32
  3412  0002EC  6E2C               	movwf	___ftge@ff2+1,c
  3413  0002EE  0E41               	movlw	65
  3414  0002F0  6E2D               	movwf	___ftge@ff2+2,c
  3415  0002F2  ECDD  F01D         	call	___ftge	;wreg free
  3416  0002F6  A0D8               	btfss	status,0,c
  3417  0002F8  D004               	goto	l9356
  3418                           
  3419                           ;doprnt.c: 851: exp++;
  3420  0002FA  0101               	movlb	1	; () banked
  3421  0002FC  4B3F               	infsnz	printf@exp& (0+255),f,b
  3422  0002FE  2B40               	incf	(printf@exp+1)& (0+255),f,b
  3423                           
  3424                           ; BSR set to: 1
  3425                           
  3426                           ; BSR set to: 1
  3427  000300  D000               	goto	l9356
  3428  000302                     l9356:
  3429                           
  3430                           ;doprnt.c: 852: }
  3431                           ;doprnt.c: 1112: if(prec <= 12)
  3432  000302  0101               	movlb	1	; () banked
  3433  000304  BF38               	btfsc	(printf@prec+1)& (0+255),7,b
  3434  000306  D008               	goto	l9358
  3435  000308  0101               	movlb	1	; () banked
  3436  00030A  5138               	movf	(printf@prec+1)& (0+255),w,b
  3437  00030C  E11E               	bnz	l9360
  3438  00030E  0E0D               	movlw	13
  3439  000310  0101               	movlb	1	; () banked
  3440  000312  5D37               	subwf	printf@prec& (0+255),w,b
  3441  000314  B0D8               	btfsc	status,0,c
  3442  000316  D019               	goto	l9360
  3443  000318                     l9358:
  3444                           
  3445                           ; BSR set to: 1
  3446                           ;doprnt.c: 1113: fval += fround(prec);
  3447  000318  C147  F0B2         	movff	printf@fval,___ftadd@f1
  3448  00031C  C148  F0B3         	movff	printf@fval+1,___ftadd@f1+1
  3449  000320  C149  F0B4         	movff	printf@fval+2,___ftadd@f1+2
  3450  000324  0101               	movlb	1	; () banked
  3451  000326  5137               	movf	printf@prec& (0+255),w,b
  3452  000328  ECB9  F00F         	call	_fround
  3453  00032C  C03F  F0B5         	movff	?_fround,___ftadd@f2
  3454  000330  C040  F0B6         	movff	?_fround+1,___ftadd@f2+1
  3455  000334  C041  F0B7         	movff	?_fround+2,___ftadd@f2+2
  3456  000338  EC7A  F00E         	call	___ftadd	;wreg free
  3457  00033C  C0B2  F147         	movff	?___ftadd,printf@fval
  3458  000340  C0B3  F148         	movff	?___ftadd+1,printf@fval+1
  3459  000344  C0B4  F149         	movff	?___ftadd+2,printf@fval+2
  3460  000348  D000               	goto	l9360
  3461  00034A                     l9360:
  3462                           
  3463                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  3464  00034A  0101               	movlb	1	; () banked
  3465  00034C  BF40               	btfsc	(printf@exp+1)& (0+255),7,b
  3466  00034E  D008               	goto	l9362
  3467  000350  0101               	movlb	1	; () banked
  3468  000352  5140               	movf	(printf@exp+1)& (0+255),w,b
  3469  000354  E12C               	bnz	l9368
  3470  000356  0E0A               	movlw	10
  3471  000358  0101               	movlb	1	; () banked
  3472  00035A  5D3F               	subwf	printf@exp& (0+255),w,b
  3473  00035C  B0D8               	btfsc	status,0,c
  3474  00035E  D027               	goto	l9368
  3475  000360                     l9362:
  3476                           
  3477                           ; BSR set to: 1
  3478  000360  0101               	movlb	1	; () banked
  3479  000362  5147               	movf	printf@fval& (0+255),w,b
  3480  000364  0101               	movlb	1	; () banked
  3481  000366  1148               	iorwf	(printf@fval+1)& (0+255),w,b
  3482  000368  0101               	movlb	1	; () banked
  3483  00036A  1149               	iorwf	(printf@fval+2)& (0+255),w,b
  3484  00036C  B4D8               	btfsc	status,2,c
  3485  00036E  D07B               	goto	l9382
  3486                           
  3487                           ; BSR set to: 1
  3488  000370  C147  F0B2         	movff	printf@fval,___fttol@f1
  3489  000374  C148  F0B3         	movff	printf@fval+1,___fttol@f1+1
  3490  000378  C149  F0B4         	movff	printf@fval+2,___fttol@f1+2
  3491  00037C  EC99  F016         	call	___fttol	;wreg free
  3492  000380  0100               	movlb	0	; () banked
  3493  000382  51B2               	movf	?___fttol& (0+255),w,b
  3494  000384  0100               	movlb	0	; () banked
  3495  000386  11B3               	iorwf	(?___fttol+1)& (0+255),w,b
  3496  000388  0100               	movlb	0	; () banked
  3497  00038A  11B4               	iorwf	(?___fttol+2)& (0+255),w,b
  3498  00038C  0100               	movlb	0	; () banked
  3499  00038E  11B5               	iorwf	(?___fttol+3)& (0+255),w,b
  3500  000390  A4D8               	btfss	status,2,c
  3501  000392  D069               	goto	l9382
  3502                           
  3503                           ; BSR set to: 0
  3504  000394  0101               	movlb	1	; () banked
  3505  000396  BF40               	btfsc	(printf@exp+1)& (0+255),7,b
  3506  000398  D066               	goto	l9382
  3507  00039A  0101               	movlb	1	; () banked
  3508  00039C  5140               	movf	(printf@exp+1)& (0+255),w,b
  3509  00039E  E107               	bnz	l9368
  3510  0003A0  0E02               	movlw	2
  3511  0003A2  0101               	movlb	1	; () banked
  3512  0003A4  5D3F               	subwf	printf@exp& (0+255),w,b
  3513  0003A6  B0D8               	btfsc	status,0,c
  3514  0003A8  D002               	goto	l9368
  3515  0003AA  D05D               	goto	l9382
  3516  0003AC  D000               	goto	l9368
  3517  0003AE                     l9368:
  3518                           
  3519                           ; BSR set to: 1
  3520                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  3521  0003AE  C139  F028         	movff	printf@tmpval,___ftge@ff1
  3522  0003B2  C13A  F029         	movff	printf@tmpval+1,___ftge@ff1+1
  3523  0003B6  C13B  F02A         	movff	printf@tmpval+2,___ftge@ff1+2
  3524  0003BA  0E70               	movlw	112
  3525  0003BC  6E2B               	movwf	___ftge@ff2,c
  3526  0003BE  0E89               	movlw	137
  3527  0003C0  6E2C               	movwf	___ftge@ff2+1,c
  3528  0003C2  0E40               	movlw	64
  3529  0003C4  6E2D               	movwf	___ftge@ff2+2,c
  3530  0003C6  ECDD  F01D         	call	___ftge	;wreg free
  3531  0003CA  B0D8               	btfsc	status,0,c
  3532  0003CC  D003               	goto	l9372
  3533                           
  3534                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  3535  0003CE  0101               	movlb	1	; () banked
  3536  0003D0  0EF7               	movlw	247
  3537  0003D2  D002               	goto	L1
  3538  0003D4                     l9372:
  3539                           
  3540                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  3541  0003D4  0101               	movlb	1	; () banked
  3542  0003D6  0EF8               	movlw	248
  3543  0003D8                     L1:
  3544  0003D8  273F               	addwf	printf@exp& (0+255),f,b
  3545  0003DA  0EFF               	movlw	255
  3546  0003DC  2340               	addwfc	(printf@exp+1)& (0+255),f,b
  3547  0003DE  D000               	goto	l9374
  3548  0003E0                     l9374:
  3549                           
  3550                           ; BSR set to: 1
  3551                           ;doprnt.c: 1124: }
  3552                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  3553  0003E0  0101               	movlb	1	; () banked
  3554  0003E2  513F               	movf	printf@exp& (0+255),w,b
  3555  0003E4  EC34  F006         	call	_scale
  3556  0003E8  C03F  F139         	movff	?_scale,printf@tmpval
  3557  0003EC  C040  F13A         	movff	?_scale+1,printf@tmpval+1
  3558  0003F0  C041  F13B         	movff	?_scale+2,printf@tmpval+2
  3559                           
  3560                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  3561  0003F4  D017               	goto	l9378
  3562  0003F6  C147  F01C         	movff	printf@fval,__div_to_l_@f1
  3563  0003FA  C148  F01D         	movff	printf@fval+1,__div_to_l_@f1+1
  3564  0003FE  C149  F01E         	movff	printf@fval+2,__div_to_l_@f1+2
  3565  000402  C139  F01F         	movff	printf@tmpval,__div_to_l_@f2
  3566  000406  C13A  F020         	movff	printf@tmpval+1,__div_to_l_@f2+1
  3567  00040A  C13B  F021         	movff	printf@tmpval+2,__div_to_l_@f2+2
  3568  00040E  ECEB  F019         	call	__div_to_l_	;wreg free
  3569  000412  C01C  F141         	movff	?__div_to_l_,printf@val
  3570  000416  C01D  F142         	movff	?__div_to_l_+1,printf@val+1
  3571  00041A  C01E  F143         	movff	?__div_to_l_+2,printf@val+2
  3572  00041E  C01F  F144         	movff	?__div_to_l_+3,printf@val+3
  3573  000422  D017               	goto	l9380
  3574  000424                     l9378:
  3575  000424  C147  F01C         	movff	printf@fval,__tdiv_to_l_@f1
  3576  000428  C148  F01D         	movff	printf@fval+1,__tdiv_to_l_@f1+1
  3577  00042C  C149  F01E         	movff	printf@fval+2,__tdiv_to_l_@f1+2
  3578  000430  C139  F01F         	movff	printf@tmpval,__tdiv_to_l_@f2
  3579  000434  C13A  F020         	movff	printf@tmpval+1,__tdiv_to_l_@f2+1
  3580  000438  C13B  F021         	movff	printf@tmpval+2,__tdiv_to_l_@f2+2
  3581  00043C  EC54  F018         	call	__tdiv_to_l_	;wreg free
  3582  000440  C01C  F141         	movff	?__tdiv_to_l_,printf@val
  3583  000444  C01D  F142         	movff	?__tdiv_to_l_+1,printf@val+1
  3584  000448  C01E  F143         	movff	?__tdiv_to_l_+2,printf@val+2
  3585  00044C  C01F  F144         	movff	?__tdiv_to_l_+3,printf@val+3
  3586  000450  D000               	goto	l9380
  3587  000452                     l9380:
  3588                           
  3589                           ;doprnt.c: 1129: fval = 0.0;
  3590  000452  0E00               	movlw	0
  3591  000454  0101               	movlb	1	; () banked
  3592  000456  6F47               	movwf	printf@fval& (0+255),b
  3593  000458  0E00               	movlw	0
  3594  00045A  0101               	movlb	1	; () banked
  3595  00045C  6F48               	movwf	(printf@fval+1)& (0+255),b
  3596  00045E  0E00               	movlw	0
  3597  000460  0101               	movlb	1	; () banked
  3598  000462  6F49               	movwf	(printf@fval+2)& (0+255),b
  3599                           
  3600                           ;doprnt.c: 1130: } else {
  3601  000464  D034               	goto	l9386
  3602  000466                     l9382:
  3603                           
  3604                           ;doprnt.c: 1131: val = (unsigned long)fval;
  3605  000466  C147  F0B2         	movff	printf@fval,___fttol@f1
  3606  00046A  C148  F0B3         	movff	printf@fval+1,___fttol@f1+1
  3607  00046E  C149  F0B4         	movff	printf@fval+2,___fttol@f1+2
  3608  000472  EC99  F016         	call	___fttol	;wreg free
  3609  000476  C0B2  F141         	movff	?___fttol,printf@val
  3610  00047A  C0B3  F142         	movff	?___fttol+1,printf@val+1
  3611  00047E  C0B4  F143         	movff	?___fttol+2,printf@val+2
  3612  000482  C0B5  F144         	movff	?___fttol+3,printf@val+3
  3613                           
  3614                           ;doprnt.c: 1132: fval -= (double)val;
  3615  000486  C147  F0BE         	movff	printf@fval,___ftsub@f1
  3616  00048A  C148  F0BF         	movff	printf@fval+1,___ftsub@f1+1
  3617  00048E  C149  F0C0         	movff	printf@fval+2,___ftsub@f1+2
  3618  000492  C141  F024         	movff	printf@val,___lltoft@c
  3619  000496  C142  F025         	movff	printf@val+1,___lltoft@c+1
  3620  00049A  C143  F026         	movff	printf@val+2,___lltoft@c+2
  3621  00049E  C144  F027         	movff	printf@val+3,___lltoft@c+3
  3622  0004A2  EC57  F021         	call	___lltoft	;wreg free
  3623  0004A6  C024  F0C1         	movff	?___lltoft,___ftsub@f2
  3624  0004AA  C025  F0C2         	movff	?___lltoft+1,___ftsub@f2+1
  3625  0004AE  C026  F0C3         	movff	?___lltoft+2,___ftsub@f2+2
  3626  0004B2  EC31  F022         	call	___ftsub	;wreg free
  3627  0004B6  C0BE  F147         	movff	?___ftsub,printf@fval
  3628  0004BA  C0BF  F148         	movff	?___ftsub+1,printf@fval+1
  3629  0004BE  C0C0  F149         	movff	?___ftsub+2,printf@fval+2
  3630                           
  3631                           ;doprnt.c: 1133: exp = 0;
  3632  0004C2  0E00               	movlw	0
  3633  0004C4  0101               	movlb	1	; () banked
  3634  0004C6  6F40               	movwf	(printf@exp+1)& (0+255),b
  3635  0004C8  0E00               	movlw	0
  3636  0004CA  6F3F               	movwf	printf@exp& (0+255),b
  3637  0004CC  D000               	goto	l9386
  3638  0004CE                     l9386:
  3639                           
  3640                           ; BSR set to: 1
  3641                           ;doprnt.c: 1134: }
  3642                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  3643  0004CE  0E01               	movlw	1
  3644  0004D0  0101               	movlb	1	; () banked
  3645  0004D2  6F4A               	movwf	printf@c& (0+255),b
  3646  0004D4                     l9388:
  3647                           
  3648                           ; BSR set to: 1
  3649  0004D4  0E0A               	movlw	10
  3650  0004D6  0101               	movlb	1	; () banked
  3651  0004D8  194A               	xorwf	printf@c& (0+255),w,b
  3652  0004DA  B4D8               	btfsc	status,2,c
  3653  0004DC  D022               	goto	l9400
  3654  0004DE  D001               	goto	l9392
  3655                           
  3656                           ; BSR set to: 1
  3657  0004E0  D020               	goto	l9400
  3658  0004E2                     l9392:
  3659                           
  3660                           ; BSR set to: 1
  3661                           ;doprnt.c: 1137: if(val < dpowers[c])
  3662  0004E2  0101               	movlb	1	; () banked
  3663  0004E4  514A               	movf	printf@c& (0+255),w,b
  3664  0004E6  0D04               	mullw	4
  3665  0004E8  0E94               	movlw	low _dpowers
  3666  0004EA  24F3               	addwf	prodl,w,c
  3667  0004EC  6EF6               	movwf	tblptrl,c
  3668  0004EE  0EFE               	movlw	high _dpowers
  3669  0004F0  20F4               	addwfc	prodh,w,c
  3670  0004F2  6EF7               	movwf	tblptrh,c
  3671  0004F4                     	if	0	;There are less than 3 active tblptr bytes
  3672  0004F4                     	endif
  3673  0004F4  0009               	tblrd		*+
  3674  0004F6  50F5               	movf	tablat,w,c
  3675  0004F8  0101               	movlb	1	; () banked
  3676  0004FA  5D41               	subwf	printf@val& (0+255),w,b
  3677  0004FC  0009               	tblrd		*+
  3678  0004FE  50F5               	movf	tablat,w,c
  3679  000500  0101               	movlb	1	; () banked
  3680  000502  5942               	subwfb	(printf@val+1)& (0+255),w,b
  3681  000504  0009               	tblrd		*+
  3682  000506  50F5               	movf	tablat,w,c
  3683  000508  0101               	movlb	1	; () banked
  3684  00050A  5943               	subwfb	(printf@val+2)& (0+255),w,b
  3685  00050C  0009               	tblrd		*+
  3686  00050E  50F5               	movf	tablat,w,c
  3687  000510  0101               	movlb	1	; () banked
  3688  000512  5944               	subwfb	(printf@val+3)& (0+255),w,b
  3689  000514  A0D8               	btfss	status,0,c
  3690  000516  D005               	goto	l9400
  3691  000518  D001               	goto	l9396
  3692                           
  3693                           ; BSR set to: 1
  3694                           ;doprnt.c: 1138: break;
  3695  00051A  D003               	goto	l9400
  3696  00051C                     l9396:
  3697                           
  3698                           ; BSR set to: 1
  3699  00051C  0101               	movlb	1	; () banked
  3700  00051E  2B4A               	incf	printf@c& (0+255),f,b
  3701  000520  D7D9               	goto	l9388
  3702  000522                     l9400:
  3703                           
  3704                           ; BSR set to: 1
  3705                           ;doprnt.c: 1142: width -= prec + c + exp;
  3706  000522  C14A  F0D2         	movff	printf@c,??_printf
  3707  000526  0100               	movlb	0	; () banked
  3708  000528  6BD3               	clrf	(??_printf+1)& (0+255),b
  3709  00052A  BFD2               	btfsc	??_printf& (0+255),7,b
  3710  00052C  07D3               	decf	(??_printf+1)& (0+255),f,b
  3711  00052E  0101               	movlb	1	; () banked
  3712  000530  5137               	movf	printf@prec& (0+255),w,b
  3713  000532  0100               	movlb	0	; () banked
  3714  000534  27D2               	addwf	??_printf& (0+255),f,b
  3715  000536  0101               	movlb	1	; () banked
  3716  000538  5138               	movf	(printf@prec+1)& (0+255),w,b
  3717  00053A  0100               	movlb	0	; () banked
  3718  00053C  23D3               	addwfc	(??_printf+1)& (0+255),f,b
  3719  00053E  0101               	movlb	1	; () banked
  3720  000540  513F               	movf	printf@exp& (0+255),w,b
  3721  000542  0100               	movlb	0	; () banked
  3722  000544  27D2               	addwf	??_printf& (0+255),f,b
  3723  000546  0101               	movlb	1	; () banked
  3724  000548  5140               	movf	(printf@exp+1)& (0+255),w,b
  3725  00054A  0100               	movlb	0	; () banked
  3726  00054C  23D3               	addwfc	(??_printf+1)& (0+255),f,b
  3727  00054E  0100               	movlb	0	; () banked
  3728  000550  51D2               	movf	??_printf& (0+255),w,b
  3729  000552  0101               	movlb	1	; () banked
  3730  000554  5F3D               	subwf	printf@width& (0+255),f,b
  3731  000556  0100               	movlb	0	; () banked
  3732  000558  51D3               	movf	(??_printf+1)& (0+255),w,b
  3733  00055A  0101               	movlb	1	; () banked
  3734  00055C  5B3E               	subwfb	(printf@width+1)& (0+255),f,b
  3735                           
  3736                           ;doprnt.c: 1143: if(
  3737                           ;doprnt.c: 1147: prec)
  3738  00055E  0101               	movlb	1	; () banked
  3739  000560  5137               	movf	printf@prec& (0+255),w,b
  3740  000562  0101               	movlb	1	; () banked
  3741  000564  1138               	iorwf	(printf@prec+1)& (0+255),w,b
  3742  000566  B4D8               	btfsc	status,2,c
  3743  000568  D005               	goto	l9404
  3744                           
  3745                           ; BSR set to: 1
  3746                           ;doprnt.c: 1148: width--;
  3747  00056A  0101               	movlb	1	; () banked
  3748  00056C  073D               	decf	printf@width& (0+255),f,b
  3749  00056E  A0D8               	btfss	status,0,c
  3750  000570  073E               	decf	(printf@width+1)& (0+255),f,b
  3751  000572  D000               	goto	l9404
  3752  000574                     l9404:
  3753                           
  3754                           ; BSR set to: 1
  3755                           ;doprnt.c: 1149: if(flag & 0x03)
  3756  000574  0E03               	movlw	3
  3757  000576  0101               	movlb	1	; () banked
  3758  000578  1545               	andwf	printf@flag& (0+255),w,b
  3759  00057A  0100               	movlb	0	; () banked
  3760  00057C  6FD2               	movwf	??_printf& (0+255),b
  3761  00057E  0E00               	movlw	0
  3762  000580  0101               	movlb	1	; () banked
  3763  000582  1546               	andwf	(printf@flag+1)& (0+255),w,b
  3764  000584  0100               	movlb	0	; () banked
  3765  000586  6FD3               	movwf	(??_printf+1)& (0+255),b
  3766  000588  0100               	movlb	0	; () banked
  3767  00058A  51D2               	movf	??_printf& (0+255),w,b
  3768  00058C  0100               	movlb	0	; () banked
  3769  00058E  11D3               	iorwf	(??_printf+1)& (0+255),w,b
  3770  000590  B4D8               	btfsc	status,2,c
  3771  000592  D005               	goto	l9408
  3772                           
  3773                           ; BSR set to: 0
  3774                           ;doprnt.c: 1150: width--;
  3775  000594  0101               	movlb	1	; () banked
  3776  000596  073D               	decf	printf@width& (0+255),f,b
  3777  000598  A0D8               	btfss	status,0,c
  3778  00059A  073E               	decf	(printf@width+1)& (0+255),f,b
  3779  00059C  D000               	goto	l9408
  3780  00059E                     l9408:
  3781                           
  3782                           ;doprnt.c: 1153: if(flag & 0x04) {
  3783  00059E  0101               	movlb	1	; () banked
  3784  0005A0  A545               	btfss	printf@flag& (0+255),2,b
  3785  0005A2  D031               	goto	l9424
  3786                           
  3787                           ; BSR set to: 1
  3788                           ;doprnt.c: 1157: if(flag & 0x03)
  3789  0005A4  0E03               	movlw	3
  3790  0005A6  0101               	movlb	1	; () banked
  3791  0005A8  1545               	andwf	printf@flag& (0+255),w,b
  3792  0005AA  0100               	movlb	0	; () banked
  3793  0005AC  6FD2               	movwf	??_printf& (0+255),b
  3794  0005AE  0E00               	movlw	0
  3795  0005B0  0101               	movlb	1	; () banked
  3796  0005B2  1546               	andwf	(printf@flag+1)& (0+255),w,b
  3797  0005B4  0100               	movlb	0	; () banked
  3798  0005B6  6FD3               	movwf	(??_printf+1)& (0+255),b
  3799  0005B8  0100               	movlb	0	; () banked
  3800  0005BA  51D2               	movf	??_printf& (0+255),w,b
  3801  0005BC  0100               	movlb	0	; () banked
  3802  0005BE  11D3               	iorwf	(??_printf+1)& (0+255),w,b
  3803  0005C0  B4D8               	btfsc	status,2,c
  3804  0005C2  D00C               	goto	l9418
  3805                           
  3806                           ; BSR set to: 0
  3807                           ;doprnt.c: 1159: (putch('-') );
  3808  0005C4  0E2D               	movlw	45
  3809  0005C6  EC11  F026         	call	_putch
  3810                           
  3811                           ;doprnt.c: 1168: while(width > 0) {
  3812  0005CA  D008               	goto	l9418
  3813  0005CC                     l9414:
  3814                           
  3815                           ;doprnt.c: 1169: (putch('0') );
  3816  0005CC  0E30               	movlw	48
  3817  0005CE  EC11  F026         	call	_putch
  3818                           
  3819                           ;doprnt.c: 1170: width--;
  3820  0005D2  0101               	movlb	1	; () banked
  3821  0005D4  073D               	decf	printf@width& (0+255),f,b
  3822  0005D6  A0D8               	btfss	status,0,c
  3823  0005D8  073E               	decf	(printf@width+1)& (0+255),f,b
  3824  0005DA  D000               	goto	l9418
  3825  0005DC                     l9418:
  3826  0005DC  0101               	movlb	1	; () banked
  3827  0005DE  BF3E               	btfsc	(printf@width+1)& (0+255),7,b
  3828  0005E0  D077               	goto	l9436
  3829  0005E2  0101               	movlb	1	; () banked
  3830  0005E4  513E               	movf	(printf@width+1)& (0+255),w,b
  3831  0005E6  E1F2               	bnz	l9414
  3832  0005E8  0101               	movlb	1	; () banked
  3833  0005EA  053D               	decf	printf@width& (0+255),w,b
  3834  0005EC  A0D8               	btfss	status,0,c
  3835  0005EE  D070               	goto	l9436
  3836  0005F0  D7ED               	goto	l9414
  3837                           
  3838                           ; BSR set to: 1
  3839                           ;doprnt.c: 1171: }
  3840                           ;doprnt.c: 1173: } else
  3841  0005F2  D06E               	goto	l9436
  3842                           
  3843                           ; BSR set to: 1
  3844                           ;doprnt.c: 1175: {
  3845                           ;doprnt.c: 1180: while(width > 0) {
  3846  0005F4  D008               	goto	l9424
  3847  0005F6                     l9420:
  3848                           
  3849                           ; BSR set to: 1
  3850                           ;doprnt.c: 1181: (putch(' ') );
  3851  0005F6  0E20               	movlw	32
  3852  0005F8  EC11  F026         	call	_putch
  3853                           
  3854                           ;doprnt.c: 1182: width--;
  3855  0005FC  0101               	movlb	1	; () banked
  3856  0005FE  073D               	decf	printf@width& (0+255),f,b
  3857  000600  A0D8               	btfss	status,0,c
  3858  000602  073E               	decf	(printf@width+1)& (0+255),f,b
  3859  000604  D000               	goto	l9424
  3860  000606                     l9424:
  3861                           
  3862                           ; BSR set to: 1
  3863  000606  0101               	movlb	1	; () banked
  3864  000608  BF3E               	btfsc	(printf@width+1)& (0+255),7,b
  3865  00060A  D007               	goto	l9426
  3866  00060C  0101               	movlb	1	; () banked
  3867  00060E  513E               	movf	(printf@width+1)& (0+255),w,b
  3868  000610  E1F2               	bnz	l9420
  3869  000612  0101               	movlb	1	; () banked
  3870  000614  053D               	decf	printf@width& (0+255),w,b
  3871  000616  B0D8               	btfsc	status,0,c
  3872  000618  D7EE               	goto	l9420
  3873  00061A                     l9426:
  3874                           
  3875                           ; BSR set to: 1
  3876                           ;doprnt.c: 1183: }
  3877                           ;doprnt.c: 1188: if(flag & 0x03)
  3878  00061A  0E03               	movlw	3
  3879  00061C  0101               	movlb	1	; () banked
  3880  00061E  1545               	andwf	printf@flag& (0+255),w,b
  3881  000620  0100               	movlb	0	; () banked
  3882  000622  6FD2               	movwf	??_printf& (0+255),b
  3883  000624  0E00               	movlw	0
  3884  000626  0101               	movlb	1	; () banked
  3885  000628  1546               	andwf	(printf@flag+1)& (0+255),w,b
  3886  00062A  0100               	movlb	0	; () banked
  3887  00062C  6FD3               	movwf	(??_printf+1)& (0+255),b
  3888  00062E  0100               	movlb	0	; () banked
  3889  000630  51D2               	movf	??_printf& (0+255),w,b
  3890  000632  0100               	movlb	0	; () banked
  3891  000634  11D3               	iorwf	(??_printf+1)& (0+255),w,b
  3892  000636  B4D8               	btfsc	status,2,c
  3893  000638  D04B               	goto	l9436
  3894                           
  3895                           ; BSR set to: 0
  3896                           ;doprnt.c: 1190: (putch('-') );
  3897  00063A  0E2D               	movlw	45
  3898  00063C  EC11  F026         	call	_putch
  3899                           
  3900                           ;doprnt.c: 1195: }
  3901                           ;doprnt.c: 1196: while(c--) {
  3902  000640  D047               	goto	l9436
  3903  000642                     l9430:
  3904                           
  3905                           ;doprnt.c: 1200: {
  3906                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  3907  000642  C141  F01C         	movff	printf@val,___lldiv@dividend
  3908  000646  C142  F01D         	movff	printf@val+1,___lldiv@dividend+1
  3909  00064A  C143  F01E         	movff	printf@val+2,___lldiv@dividend+2
  3910  00064E  C144  F01F         	movff	printf@val+3,___lldiv@dividend+3
  3911  000652  0101               	movlb	1	; () banked
  3912  000654  514A               	movf	printf@c& (0+255),w,b
  3913  000656  0D04               	mullw	4
  3914  000658  0E94               	movlw	low _dpowers
  3915  00065A  24F3               	addwf	prodl,w,c
  3916  00065C  6EF6               	movwf	tblptrl,c
  3917  00065E  0EFE               	movlw	high _dpowers
  3918  000660  20F4               	addwfc	prodh,w,c
  3919  000662  6EF7               	movwf	tblptrh,c
  3920  000664                     	if	0	;There are less than 3 active tblptr bytes
  3921  000664                     	endif
  3922  000664  0009               	tblrd		*+
  3923  000666  CFF5 F020          	movff	tablat,___lldiv@divisor
  3924  00066A  0009               	tblrd		*+
  3925  00066C  CFF5 F021          	movff	tablat,___lldiv@divisor+1
  3926  000670  0009               	tblrd		*+
  3927  000672  CFF5 F022          	movff	tablat,___lldiv@divisor+2
  3928  000676  000A               	tblrd		*-
  3929  000678  CFF5 F023          	movff	tablat,___lldiv@divisor+3
  3930  00067C  EC70  F01E         	call	___lldiv	;wreg free
  3931  000680  C01C  F139         	movff	?___lldiv,printf@tmpval
  3932  000684  C01D  F13A         	movff	?___lldiv+1,printf@tmpval+1
  3933  000688  C01E  F13B         	movff	?___lldiv+2,printf@tmpval+2
  3934  00068C  C01F  F13C         	movff	?___lldiv+3,printf@tmpval+3
  3935                           
  3936                           ;doprnt.c: 1202: tmpval.vd %= 10;
  3937  000690  C139  F029         	movff	printf@tmpval,___llmod@dividend
  3938  000694  C13A  F02A         	movff	printf@tmpval+1,___llmod@dividend+1
  3939  000698  C13B  F02B         	movff	printf@tmpval+2,___llmod@dividend+2
  3940  00069C  C13C  F02C         	movff	printf@tmpval+3,___llmod@dividend+3
  3941  0006A0  0E0A               	movlw	10
  3942  0006A2  6E2D               	movwf	___llmod@divisor,c
  3943  0006A4  0E00               	movlw	0
  3944  0006A6  6E2E               	movwf	___llmod@divisor+1,c
  3945  0006A8  0E00               	movlw	0
  3946  0006AA  6E2F               	movwf	___llmod@divisor+2,c
  3947  0006AC  0E00               	movlw	0
  3948  0006AE  6E30               	movwf	___llmod@divisor+3,c
  3949  0006B0  EC7E  F020         	call	___llmod	;wreg free
  3950  0006B4  C029  F139         	movff	?___llmod,printf@tmpval
  3951  0006B8  C02A  F13A         	movff	?___llmod+1,printf@tmpval+1
  3952  0006BC  C02B  F13B         	movff	?___llmod+2,printf@tmpval+2
  3953  0006C0  C02C  F13C         	movff	?___llmod+3,printf@tmpval+3
  3954                           
  3955                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
  3956  0006C4  0101               	movlb	1	; () banked
  3957  0006C6  5139               	movf	printf@tmpval& (0+255),w,b
  3958  0006C8  0F30               	addlw	48
  3959  0006CA  EC11  F026         	call	_putch
  3960  0006CE  D000               	goto	l9436
  3961  0006D0                     l9436:
  3962  0006D0  0101               	movlb	1	; () banked
  3963  0006D2  074A               	decf	printf@c& (0+255),f,b
  3964  0006D4  0101               	movlb	1	; () banked
  3965  0006D6  294A               	incf	printf@c& (0+255),w,b
  3966  0006D8  B4D8               	btfsc	status,2,c
  3967  0006DA  D00A               	goto	l9442
  3968  0006DC  D7B2               	goto	l9430
  3969                           
  3970                           ; BSR set to: 1
  3971                           ;doprnt.c: 1204: }
  3972                           ;doprnt.c: 1206: }
  3973                           ;doprnt.c: 1207: while(exp > 0) {
  3974  0006DE  D008               	goto	l9442
  3975  0006E0                     l9438:
  3976                           
  3977                           ; BSR set to: 1
  3978                           ;doprnt.c: 1208: (putch('0') );
  3979  0006E0  0E30               	movlw	48
  3980  0006E2  EC11  F026         	call	_putch
  3981                           
  3982                           ;doprnt.c: 1209: exp--;
  3983  0006E6  0101               	movlb	1	; () banked
  3984  0006E8  073F               	decf	printf@exp& (0+255),f,b
  3985  0006EA  A0D8               	btfss	status,0,c
  3986  0006EC  0740               	decf	(printf@exp+1)& (0+255),f,b
  3987  0006EE  D000               	goto	l9442
  3988  0006F0                     l9442:
  3989                           
  3990                           ; BSR set to: 1
  3991  0006F0  0101               	movlb	1	; () banked
  3992  0006F2  BF40               	btfsc	(printf@exp+1)& (0+255),7,b
  3993  0006F4  D007               	goto	l9444
  3994  0006F6  0101               	movlb	1	; () banked
  3995  0006F8  5140               	movf	(printf@exp+1)& (0+255),w,b
  3996  0006FA  E1F2               	bnz	l9438
  3997  0006FC  0101               	movlb	1	; () banked
  3998  0006FE  053F               	decf	printf@exp& (0+255),w,b
  3999  000700  B0D8               	btfsc	status,0,c
  4000  000702  D7EE               	goto	l9438
  4001  000704                     l9444:
  4002                           
  4003                           ; BSR set to: 1
  4004                           ;doprnt.c: 1210: }
  4005                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  4006  000704  0101               	movlb	1	; () banked
  4007  000706  BF38               	btfsc	(printf@prec+1)& (0+255),7,b
  4008  000708  D00C               	goto	l923
  4009  00070A  0101               	movlb	1	; () banked
  4010  00070C  5138               	movf	(printf@prec+1)& (0+255),w,b
  4011  00070E  E105               	bnz	u8590
  4012  000710  0E09               	movlw	9
  4013  000712  0101               	movlb	1	; () banked
  4014  000714  5D37               	subwf	printf@prec& (0+255),w,b
  4015  000716  A0D8               	btfss	status,0,c
  4016  000718  D004               	goto	l923
  4017  00071A                     u8590:
  4018                           
  4019                           ; BSR set to: 1
  4020                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  4021  00071A  0E08               	movlw	8
  4022  00071C  0101               	movlb	1	; () banked
  4023  00071E  6F4A               	movwf	printf@c& (0+255),b
  4024  000720  D003               	goto	l9448
  4025  000722                     l923:
  4026                           
  4027                           ; BSR set to: 1
  4028                           ;doprnt.c: 1213: else
  4029                           ;doprnt.c: 1214: c = prec;
  4030  000722  C137  F14A         	movff	printf@prec,printf@c
  4031  000726  D000               	goto	l9448
  4032  000728                     l9448:
  4033                           
  4034                           ; BSR set to: 1
  4035                           ;doprnt.c: 1215: prec -= c;
  4036  000728  0101               	movlb	1	; () banked
  4037  00072A  514A               	movf	printf@c& (0+255),w,b
  4038  00072C  0101               	movlb	1	; () banked
  4039  00072E  5F37               	subwf	printf@prec& (0+255),f,b
  4040  000730  0E00               	movlw	0
  4041  000732  0101               	movlb	1	; () banked
  4042  000734  BF4A               	btfsc	printf@c& (0+255),7,b
  4043  000736  0EFF               	movlw	255
  4044  000738  0101               	movlb	1	; () banked
  4045  00073A  5B38               	subwfb	(printf@prec+1)& (0+255),f,b
  4046                           
  4047                           ; BSR set to: 1
  4048                           ;doprnt.c: 1219: if(c)
  4049  00073C  0101               	movlb	1	; () banked
  4050  00073E  514A               	movf	printf@c& (0+255),w,b
  4051  000740  0101               	movlb	1	; () banked
  4052  000742  B4D8               	btfsc	status,2,c
  4053  000744  D004               	goto	l9454
  4054                           
  4055                           ; BSR set to: 1
  4056                           ;doprnt.c: 1221: (putch('.') );
  4057  000746  0E2E               	movlw	46
  4058  000748  EC11  F026         	call	_putch
  4059  00074C  D000               	goto	l9454
  4060  00074E                     l9454:
  4061                           
  4062                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  4063  00074E  0101               	movlb	1	; () banked
  4064  000750  514A               	movf	printf@c& (0+255),w,b
  4065  000752  EC34  F006         	call	_scale
  4066  000756  C03F  F131         	movff	?_scale,_printf$2753
  4067  00075A  C040  F132         	movff	?_scale+1,_printf$2753+1
  4068  00075E  C041  F133         	movff	?_scale+2,_printf$2753+2
  4069                           
  4070                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  4071  000762  C147  F033         	movff	printf@fval,___ftmul@f2
  4072  000766  C148  F034         	movff	printf@fval+1,___ftmul@f2+1
  4073  00076A  C149  F035         	movff	printf@fval+2,___ftmul@f2+2
  4074  00076E  C131  F030         	movff	_printf$2753,___ftmul@f1
  4075  000772  C132  F031         	movff	_printf$2753+1,___ftmul@f1+1
  4076  000776  C133  F032         	movff	_printf$2753+2,___ftmul@f1+2
  4077  00077A  ECF0  F01A         	call	___ftmul	;wreg free
  4078  00077E  C030  F0B2         	movff	?___ftmul,___fttol@f1
  4079  000782  C031  F0B3         	movff	?___ftmul+1,___fttol@f1+1
  4080  000786  C032  F0B4         	movff	?___ftmul+2,___fttol@f1+2
  4081  00078A  EC99  F016         	call	___fttol	;wreg free
  4082  00078E  C0B2  F141         	movff	?___fttol,printf@val
  4083  000792  C0B3  F142         	movff	?___fttol+1,printf@val+1
  4084  000796  C0B4  F143         	movff	?___fttol+2,printf@val+2
  4085  00079A  C0B5  F144         	movff	?___fttol+3,printf@val+3
  4086                           
  4087                           ;doprnt.c: 1228: while(c--) {
  4088  00079E  D06E               	goto	l9464
  4089  0007A0                     l9458:
  4090                           
  4091                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  4092  0007A0  C141  F01C         	movff	printf@val,___lldiv@dividend
  4093  0007A4  C142  F01D         	movff	printf@val+1,___lldiv@dividend+1
  4094  0007A8  C143  F01E         	movff	printf@val+2,___lldiv@dividend+2
  4095  0007AC  C144  F01F         	movff	printf@val+3,___lldiv@dividend+3
  4096  0007B0  0101               	movlb	1	; () banked
  4097  0007B2  514A               	movf	printf@c& (0+255),w,b
  4098  0007B4  0D04               	mullw	4
  4099  0007B6  0E94               	movlw	low _dpowers
  4100  0007B8  24F3               	addwf	prodl,w,c
  4101  0007BA  6EF6               	movwf	tblptrl,c
  4102  0007BC  0EFE               	movlw	high _dpowers
  4103  0007BE  20F4               	addwfc	prodh,w,c
  4104  0007C0  6EF7               	movwf	tblptrh,c
  4105  0007C2                     	if	0	;There are less than 3 active tblptr bytes
  4106  0007C2                     	endif
  4107  0007C2  0009               	tblrd		*+
  4108  0007C4  CFF5 F020          	movff	tablat,___lldiv@divisor
  4109  0007C8  0009               	tblrd		*+
  4110  0007CA  CFF5 F021          	movff	tablat,___lldiv@divisor+1
  4111  0007CE  0009               	tblrd		*+
  4112  0007D0  CFF5 F022          	movff	tablat,___lldiv@divisor+2
  4113  0007D4  000A               	tblrd		*-
  4114  0007D6  CFF5 F023          	movff	tablat,___lldiv@divisor+3
  4115  0007DA  EC70  F01E         	call	___lldiv	;wreg free
  4116  0007DE  C01C  F139         	movff	?___lldiv,printf@tmpval
  4117  0007E2  C01D  F13A         	movff	?___lldiv+1,printf@tmpval+1
  4118  0007E6  C01E  F13B         	movff	?___lldiv+2,printf@tmpval+2
  4119  0007EA  C01F  F13C         	movff	?___lldiv+3,printf@tmpval+3
  4120                           
  4121                           ;doprnt.c: 1230: tmpval.vd %= 10;
  4122  0007EE  C139  F029         	movff	printf@tmpval,___llmod@dividend
  4123  0007F2  C13A  F02A         	movff	printf@tmpval+1,___llmod@dividend+1
  4124  0007F6  C13B  F02B         	movff	printf@tmpval+2,___llmod@dividend+2
  4125  0007FA  C13C  F02C         	movff	printf@tmpval+3,___llmod@dividend+3
  4126  0007FE  0E0A               	movlw	10
  4127  000800  6E2D               	movwf	___llmod@divisor,c
  4128  000802  0E00               	movlw	0
  4129  000804  6E2E               	movwf	___llmod@divisor+1,c
  4130  000806  0E00               	movlw	0
  4131  000808  6E2F               	movwf	___llmod@divisor+2,c
  4132  00080A  0E00               	movlw	0
  4133  00080C  6E30               	movwf	___llmod@divisor+3,c
  4134  00080E  EC7E  F020         	call	___llmod	;wreg free
  4135  000812  C029  F139         	movff	?___llmod,printf@tmpval
  4136  000816  C02A  F13A         	movff	?___llmod+1,printf@tmpval+1
  4137  00081A  C02B  F13B         	movff	?___llmod+2,printf@tmpval+2
  4138  00081E  C02C  F13C         	movff	?___llmod+3,printf@tmpval+3
  4139                           
  4140                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
  4141  000822  0101               	movlb	1	; () banked
  4142  000824  5139               	movf	printf@tmpval& (0+255),w,b
  4143  000826  0F30               	addlw	48
  4144  000828  EC11  F026         	call	_putch
  4145                           
  4146                           ;doprnt.c: 1232: val %= dpowers[c];
  4147  00082C  C141  F029         	movff	printf@val,___llmod@dividend
  4148  000830  C142  F02A         	movff	printf@val+1,___llmod@dividend+1
  4149  000834  C143  F02B         	movff	printf@val+2,___llmod@dividend+2
  4150  000838  C144  F02C         	movff	printf@val+3,___llmod@dividend+3
  4151  00083C  0101               	movlb	1	; () banked
  4152  00083E  514A               	movf	printf@c& (0+255),w,b
  4153  000840  0D04               	mullw	4
  4154  000842  0E94               	movlw	low _dpowers
  4155  000844  24F3               	addwf	prodl,w,c
  4156  000846  6EF6               	movwf	tblptrl,c
  4157  000848  0EFE               	movlw	high _dpowers
  4158  00084A  20F4               	addwfc	prodh,w,c
  4159  00084C  6EF7               	movwf	tblptrh,c
  4160  00084E                     	if	0	;There are less than 3 active tblptr bytes
  4161  00084E                     	endif
  4162  00084E  0009               	tblrd		*+
  4163  000850  CFF5 F02D          	movff	tablat,___llmod@divisor
  4164  000854  0009               	tblrd		*+
  4165  000856  CFF5 F02E          	movff	tablat,___llmod@divisor+1
  4166  00085A  0009               	tblrd		*+
  4167  00085C  CFF5 F02F          	movff	tablat,___llmod@divisor+2
  4168  000860  000A               	tblrd		*-
  4169  000862  CFF5 F030          	movff	tablat,___llmod@divisor+3
  4170  000866  EC7E  F020         	call	___llmod	;wreg free
  4171  00086A  C029  F141         	movff	?___llmod,printf@val
  4172  00086E  C02A  F142         	movff	?___llmod+1,printf@val+1
  4173  000872  C02B  F143         	movff	?___llmod+2,printf@val+2
  4174  000876  C02C  F144         	movff	?___llmod+3,printf@val+3
  4175  00087A  D000               	goto	l9464
  4176  00087C                     l9464:
  4177  00087C  0101               	movlb	1	; () banked
  4178  00087E  074A               	decf	printf@c& (0+255),f,b
  4179  000880  0101               	movlb	1	; () banked
  4180  000882  294A               	incf	printf@c& (0+255),w,b
  4181  000884  B4D8               	btfsc	status,2,c
  4182  000886  D00A               	goto	l9470
  4183  000888  D78B               	goto	l9458
  4184                           
  4185                           ; BSR set to: 1
  4186                           ;doprnt.c: 1233: }
  4187                           ;doprnt.c: 1235: while(prec) {
  4188  00088A  D008               	goto	l9470
  4189  00088C                     l9466:
  4190                           
  4191                           ; BSR set to: 1
  4192                           ;doprnt.c: 1236: (putch('0') );
  4193  00088C  0E30               	movlw	48
  4194  00088E  EC11  F026         	call	_putch
  4195                           
  4196                           ;doprnt.c: 1237: prec--;
  4197  000892  0101               	movlb	1	; () banked
  4198  000894  0737               	decf	printf@prec& (0+255),f,b
  4199  000896  A0D8               	btfss	status,0,c
  4200  000898  0738               	decf	(printf@prec+1)& (0+255),f,b
  4201  00089A  D000               	goto	l9470
  4202  00089C                     l9470:
  4203                           
  4204                           ; BSR set to: 1
  4205  00089C  0101               	movlb	1	; () banked
  4206  00089E  5137               	movf	printf@prec& (0+255),w,b
  4207  0008A0  0101               	movlb	1	; () banked
  4208  0008A2  1138               	iorwf	(printf@prec+1)& (0+255),w,b
  4209  0008A4  B4D8               	btfsc	status,2,c
  4210  0008A6  D1CE               	goto	l9568
  4211  0008A8  D7F1               	goto	l9466
  4212                           
  4213                           ; BSR set to: 1
  4214                           ;doprnt.c: 1238: }
  4215                           ;doprnt.c: 1245: continue;
  4216  0008AA  D1CC               	goto	l9568
  4217  0008AC                     l884:
  4218                           
  4219                           ; BSR set to: 1
  4220                           ;doprnt.c: 1246: }
  4221                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  4222  0008AC  0101               	movlb	1	; () banked
  4223  0008AE  BF45               	btfsc	printf@flag& (0+255),7,b
  4224  0008B0  D023               	goto	l9482
  4225                           
  4226                           ; BSR set to: 1
  4227                           ;doprnt.c: 1253: {
  4228                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  4229  0008B2  C135  FFD9         	movff	printf@ap,fsr2l
  4230  0008B6  C136  FFDA         	movff	printf@ap+1,fsr2h
  4231  0008BA  CFDE F141          	movff	postinc2,printf@val
  4232  0008BE  CFDD F142          	movff	postdec2,printf@val+1
  4233  0008C2  0101               	movlb	1	; () banked
  4234  0008C4  0E00               	movlw	0
  4235  0008C6  BF42               	btfsc	(printf@val+1)& (0+255),7,b
  4236  0008C8  0EFF               	movlw	-1
  4237  0008CA  6F43               	movwf	(printf@val+2)& (0+255),b
  4238  0008CC  6F44               	movwf	(printf@val+3)& (0+255),b
  4239                           
  4240                           ; BSR set to: 1
  4241  0008CE  0E02               	movlw	2
  4242  0008D0  0101               	movlb	1	; () banked
  4243  0008D2  2735               	addwf	printf@ap& (0+255),f,b
  4244  0008D4  0E00               	movlw	0
  4245  0008D6  2336               	addwfc	(printf@ap+1)& (0+255),f,b
  4246                           
  4247                           ; BSR set to: 1
  4248                           ;doprnt.c: 1261: if((long)val < 0) {
  4249  0008D8  0101               	movlb	1	; () banked
  4250  0008DA  AF44               	btfss	(printf@val+3)& (0+255),7,b
  4251  0008DC  D078               	goto	l9516
  4252                           
  4253                           ; BSR set to: 1
  4254                           ;doprnt.c: 1262: flag |= 0x03;
  4255  0008DE  0E03               	movlw	3
  4256  0008E0  0101               	movlb	1	; () banked
  4257  0008E2  1345               	iorwf	printf@flag& (0+255),f,b
  4258                           
  4259                           ; BSR set to: 1
  4260                           ;doprnt.c: 1263: val = -val;
  4261  0008E4  0101               	movlb	1	; () banked
  4262  0008E6  1F44               	comf	(printf@val+3)& (0+255),f,b
  4263  0008E8  1F43               	comf	(printf@val+2)& (0+255),f,b
  4264  0008EA  1F42               	comf	(printf@val+1)& (0+255),f,b
  4265  0008EC  6D41               	negf	printf@val& (0+255),b
  4266  0008EE  0E00               	movlw	0
  4267  0008F0  2342               	addwfc	(printf@val+1)& (0+255),f,b
  4268  0008F2  2343               	addwfc	(printf@val+2)& (0+255),f,b
  4269  0008F4  2344               	addwfc	(printf@val+3)& (0+255),f,b
  4270                           
  4271                           ; BSR set to: 1
  4272                           ;doprnt.c: 1264: }
  4273                           ;doprnt.c: 1266: }
  4274  0008F6  D06B               	goto	l9516
  4275  0008F8                     l9482:
  4276                           
  4277                           ; BSR set to: 1
  4278                           ;doprnt.c: 1268: else
  4279                           ;doprnt.c: 1273: {
  4280                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  4281  0008F8  C135  FFD9         	movff	printf@ap,fsr2l
  4282  0008FC  C136  FFDA         	movff	printf@ap+1,fsr2h
  4283  000900  CFDE F0D2          	movff	postinc2,??_printf
  4284  000904  CFDD F0D3          	movff	postdec2,??_printf+1
  4285  000908  C0D2  F141         	movff	??_printf,printf@val
  4286  00090C  C0D3  F142         	movff	??_printf+1,printf@val+1
  4287  000910  0101               	movlb	1	; () banked
  4288  000912  6B43               	clrf	(printf@val+2)& (0+255),b
  4289  000914  6B44               	clrf	(printf@val+3)& (0+255),b
  4290                           
  4291                           ; BSR set to: 1
  4292  000916  0E02               	movlw	2
  4293  000918  0101               	movlb	1	; () banked
  4294  00091A  2735               	addwf	printf@ap& (0+255),f,b
  4295  00091C  0E00               	movlw	0
  4296  00091E  2336               	addwfc	(printf@ap+1)& (0+255),f,b
  4297                           
  4298                           ; BSR set to: 1
  4299                           ;doprnt.c: 1287: }
  4300                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  4301  000920  D056               	goto	l9516
  4302  000922                     l9486:
  4303                           
  4304                           ; BSR set to: 1
  4305                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4306  000922  0E01               	movlw	1
  4307  000924  0101               	movlb	1	; () banked
  4308  000926  6F4A               	movwf	printf@c& (0+255),b
  4309  000928                     l9488:
  4310                           
  4311                           ; BSR set to: 1
  4312  000928  0E0A               	movlw	10
  4313  00092A  0101               	movlb	1	; () banked
  4314  00092C  194A               	xorwf	printf@c& (0+255),w,b
  4315  00092E  B4D8               	btfsc	status,2,c
  4316  000930  D058               	goto	l9518
  4317  000932  D001               	goto	l9492
  4318                           
  4319                           ; BSR set to: 1
  4320  000934  D056               	goto	l9518
  4321  000936                     l9492:
  4322                           
  4323                           ; BSR set to: 1
  4324                           ;doprnt.c: 1306: if(val < dpowers[c])
  4325  000936  0101               	movlb	1	; () banked
  4326  000938  514A               	movf	printf@c& (0+255),w,b
  4327  00093A  0D04               	mullw	4
  4328  00093C  0E94               	movlw	low _dpowers
  4329  00093E  24F3               	addwf	prodl,w,c
  4330  000940  6EF6               	movwf	tblptrl,c
  4331  000942  0EFE               	movlw	high _dpowers
  4332  000944  20F4               	addwfc	prodh,w,c
  4333  000946  6EF7               	movwf	tblptrh,c
  4334  000948                     	if	0	;There are less than 3 active tblptr bytes
  4335  000948                     	endif
  4336  000948  0009               	tblrd		*+
  4337  00094A  50F5               	movf	tablat,w,c
  4338  00094C  0101               	movlb	1	; () banked
  4339  00094E  5D41               	subwf	printf@val& (0+255),w,b
  4340  000950  0009               	tblrd		*+
  4341  000952  50F5               	movf	tablat,w,c
  4342  000954  0101               	movlb	1	; () banked
  4343  000956  5942               	subwfb	(printf@val+1)& (0+255),w,b
  4344  000958  0009               	tblrd		*+
  4345  00095A  50F5               	movf	tablat,w,c
  4346  00095C  0101               	movlb	1	; () banked
  4347  00095E  5943               	subwfb	(printf@val+2)& (0+255),w,b
  4348  000960  0009               	tblrd		*+
  4349  000962  50F5               	movf	tablat,w,c
  4350  000964  0101               	movlb	1	; () banked
  4351  000966  5944               	subwfb	(printf@val+3)& (0+255),w,b
  4352  000968  A0D8               	btfss	status,0,c
  4353  00096A  D03B               	goto	l9518
  4354  00096C  D001               	goto	l9496
  4355                           
  4356                           ; BSR set to: 1
  4357                           ;doprnt.c: 1307: break;
  4358  00096E  D039               	goto	l9518
  4359  000970                     l9496:
  4360                           
  4361                           ; BSR set to: 1
  4362  000970  0101               	movlb	1	; () banked
  4363  000972  2B4A               	incf	printf@c& (0+255),f,b
  4364  000974  D7D9               	goto	l9488
  4365                           
  4366                           ; BSR set to: 1
  4367                           ;doprnt.c: 1309: break;
  4368                           
  4369                           ; BSR set to: 1
  4370  000976  D035               	goto	l9518
  4371  000978                     l9500:
  4372                           
  4373                           ; BSR set to: 1
  4374                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  4375  000978  0E01               	movlw	1
  4376  00097A  0101               	movlb	1	; () banked
  4377  00097C  6F4A               	movwf	printf@c& (0+255),b
  4378  00097E                     l9502:
  4379                           
  4380                           ; BSR set to: 1
  4381  00097E  0E08               	movlw	8
  4382  000980  0101               	movlb	1	; () banked
  4383  000982  194A               	xorwf	printf@c& (0+255),w,b
  4384  000984  B4D8               	btfsc	status,2,c
  4385  000986  D02D               	goto	l9518
  4386  000988  D001               	goto	l9506
  4387                           
  4388                           ; BSR set to: 1
  4389  00098A  D02B               	goto	l9518
  4390  00098C                     l9506:
  4391                           
  4392                           ; BSR set to: 1
  4393                           ;doprnt.c: 1317: if(val < hexpowers[c])
  4394  00098C  0101               	movlb	1	; () banked
  4395  00098E  514A               	movf	printf@c& (0+255),w,b
  4396  000990  0D04               	mullw	4
  4397  000992  0E0A               	movlw	low _hexpowers
  4398  000994  24F3               	addwf	prodl,w,c
  4399  000996  6EF6               	movwf	tblptrl,c
  4400  000998  0EFF               	movlw	high _hexpowers
  4401  00099A  20F4               	addwfc	prodh,w,c
  4402  00099C  6EF7               	movwf	tblptrh,c
  4403  00099E                     	if	0	;There are less than 3 active tblptr bytes
  4404  00099E                     	endif
  4405  00099E  0009               	tblrd		*+
  4406  0009A0  50F5               	movf	tablat,w,c
  4407  0009A2  0101               	movlb	1	; () banked
  4408  0009A4  5D41               	subwf	printf@val& (0+255),w,b
  4409  0009A6  0009               	tblrd		*+
  4410  0009A8  50F5               	movf	tablat,w,c
  4411  0009AA  0101               	movlb	1	; () banked
  4412  0009AC  5942               	subwfb	(printf@val+1)& (0+255),w,b
  4413  0009AE  0009               	tblrd		*+
  4414  0009B0  50F5               	movf	tablat,w,c
  4415  0009B2  0101               	movlb	1	; () banked
  4416  0009B4  5943               	subwfb	(printf@val+2)& (0+255),w,b
  4417  0009B6  0009               	tblrd		*+
  4418  0009B8  50F5               	movf	tablat,w,c
  4419  0009BA  0101               	movlb	1	; () banked
  4420  0009BC  5944               	subwfb	(printf@val+3)& (0+255),w,b
  4421  0009BE  A0D8               	btfss	status,0,c
  4422  0009C0  D010               	goto	l9518
  4423  0009C2  D001               	goto	l9510
  4424                           
  4425                           ; BSR set to: 1
  4426                           ;doprnt.c: 1318: break;
  4427  0009C4  D00E               	goto	l9518
  4428  0009C6                     l9510:
  4429                           
  4430                           ; BSR set to: 1
  4431  0009C6  0101               	movlb	1	; () banked
  4432  0009C8  2B4A               	incf	printf@c& (0+255),f,b
  4433  0009CA  D7D9               	goto	l9502
  4434                           
  4435                           ; BSR set to: 1
  4436                           ;doprnt.c: 1336: }
  4437                           
  4438                           ; BSR set to: 1
  4439                           ;doprnt.c: 1320: break;
  4440                           
  4441                           ; BSR set to: 1
  4442  0009CC  D00A               	goto	l9518
  4443  0009CE                     l9516:
  4444                           
  4445                           ; BSR set to: 1
  4446  0009CE  0101               	movlb	1	; () banked
  4447  0009D0  5145               	movf	printf@flag& (0+255),w,b
  4448  0009D2  0B80               	andlw	128
  4449                           
  4450                           ; Switch size 1, requested type "space"
  4451                           ; Number of cases is 2, Range of values is 0 to 128
  4452                           ; switch strategies available:
  4453                           ; Name         Instructions Cycles
  4454                           ; simple_byte            7     4 (average)
  4455                           ;	Chosen strategy is simple_byte
  4456  0009D4  0A00               	xorlw	0	; case 0
  4457  0009D6  B4D8               	btfsc	status,2,c
  4458  0009D8  D7A4               	goto	l9486
  4459  0009DA  0A80               	xorlw	128	; case 128
  4460  0009DC  B4D8               	btfsc	status,2,c
  4461  0009DE  D7CC               	goto	l9500
  4462  0009E0  D000               	goto	l9518
  4463  0009E2                     l9518:
  4464                           
  4465                           ; BSR set to: 1
  4466                           ;doprnt.c: 1345: if(width && flag & 0x03)
  4467  0009E2  0101               	movlb	1	; () banked
  4468  0009E4  513D               	movf	printf@width& (0+255),w,b
  4469  0009E6  0101               	movlb	1	; () banked
  4470  0009E8  113E               	iorwf	(printf@width+1)& (0+255),w,b
  4471  0009EA  B4D8               	btfsc	status,2,c
  4472  0009EC  D015               	goto	l9524
  4473                           
  4474                           ; BSR set to: 1
  4475  0009EE  0E03               	movlw	3
  4476  0009F0  0101               	movlb	1	; () banked
  4477  0009F2  1545               	andwf	printf@flag& (0+255),w,b
  4478  0009F4  0100               	movlb	0	; () banked
  4479  0009F6  6FD2               	movwf	??_printf& (0+255),b
  4480  0009F8  0E00               	movlw	0
  4481  0009FA  0101               	movlb	1	; () banked
  4482  0009FC  1546               	andwf	(printf@flag+1)& (0+255),w,b
  4483  0009FE  0100               	movlb	0	; () banked
  4484  000A00  6FD3               	movwf	(??_printf+1)& (0+255),b
  4485  000A02  0100               	movlb	0	; () banked
  4486  000A04  51D2               	movf	??_printf& (0+255),w,b
  4487  000A06  0100               	movlb	0	; () banked
  4488  000A08  11D3               	iorwf	(??_printf+1)& (0+255),w,b
  4489  000A0A  B4D8               	btfsc	status,2,c
  4490  000A0C  D005               	goto	l9524
  4491                           
  4492                           ; BSR set to: 0
  4493                           ;doprnt.c: 1346: width--;
  4494  000A0E  0101               	movlb	1	; () banked
  4495  000A10  073D               	decf	printf@width& (0+255),f,b
  4496  000A12  A0D8               	btfss	status,0,c
  4497  000A14  073E               	decf	(printf@width+1)& (0+255),f,b
  4498  000A16  D000               	goto	l9524
  4499  000A18                     l9524:
  4500                           
  4501                           ;doprnt.c: 1381: if(width > c)
  4502  000A18  0E80               	movlw	128
  4503  000A1A  0101               	movlb	1	; () banked
  4504  000A1C  BF4A               	btfsc	printf@c& (0+255),7,b
  4505  000A1E  0E7F               	movlw	127
  4506  000A20  0100               	movlb	0	; () banked
  4507  000A22  6FD2               	movwf	??_printf& (0+255),b
  4508  000A24  0101               	movlb	1	; () banked
  4509  000A26  513D               	movf	printf@width& (0+255),w,b
  4510  000A28  0101               	movlb	1	; () banked
  4511  000A2A  5D4A               	subwf	printf@c& (0+255),w,b
  4512  000A2C  0101               	movlb	1	; () banked
  4513  000A2E  513E               	movf	(printf@width+1)& (0+255),w,b
  4514  000A30  0A80               	xorlw	128
  4515  000A32  0100               	movlb	0	; () banked
  4516  000A34  59D2               	subwfb	??_printf& (0+255),w,b
  4517  000A36  B0D8               	btfsc	status,0,c
  4518  000A38  D00B               	goto	l9528
  4519                           
  4520                           ; BSR set to: 0
  4521                           ;doprnt.c: 1382: width -= c;
  4522  000A3A  0101               	movlb	1	; () banked
  4523  000A3C  514A               	movf	printf@c& (0+255),w,b
  4524  000A3E  0101               	movlb	1	; () banked
  4525  000A40  5F3D               	subwf	printf@width& (0+255),f,b
  4526  000A42  0E00               	movlw	0
  4527  000A44  0101               	movlb	1	; () banked
  4528  000A46  BF4A               	btfsc	printf@c& (0+255),7,b
  4529  000A48  0EFF               	movlw	255
  4530  000A4A  0101               	movlb	1	; () banked
  4531  000A4C  5B3E               	subwfb	(printf@width+1)& (0+255),f,b
  4532  000A4E  D006               	goto	l9530
  4533  000A50                     l9528:
  4534                           
  4535                           ;doprnt.c: 1383: else
  4536                           ;doprnt.c: 1384: width = 0;
  4537  000A50  0E00               	movlw	0
  4538  000A52  0101               	movlb	1	; () banked
  4539  000A54  6F3E               	movwf	(printf@width+1)& (0+255),b
  4540  000A56  0E00               	movlw	0
  4541  000A58  6F3D               	movwf	printf@width& (0+255),b
  4542  000A5A  D000               	goto	l9530
  4543  000A5C                     l9530:
  4544                           
  4545                           ; BSR set to: 1
  4546                           ;doprnt.c: 1387: if(flag & 0x04) {
  4547  000A5C  0101               	movlb	1	; () banked
  4548  000A5E  A545               	btfss	printf@flag& (0+255),2,b
  4549  000A60  D029               	goto	l9542
  4550                           
  4551                           ; BSR set to: 1
  4552                           ;doprnt.c: 1392: if(flag & 0x03)
  4553  000A62  0E03               	movlw	3
  4554  000A64  0101               	movlb	1	; () banked
  4555  000A66  1545               	andwf	printf@flag& (0+255),w,b
  4556  000A68  0100               	movlb	0	; () banked
  4557  000A6A  6FD2               	movwf	??_printf& (0+255),b
  4558  000A6C  0E00               	movlw	0
  4559  000A6E  0101               	movlb	1	; () banked
  4560  000A70  1546               	andwf	(printf@flag+1)& (0+255),w,b
  4561  000A72  0100               	movlb	0	; () banked
  4562  000A74  6FD3               	movwf	(??_printf+1)& (0+255),b
  4563  000A76  0100               	movlb	0	; () banked
  4564  000A78  51D2               	movf	??_printf& (0+255),w,b
  4565  000A7A  0100               	movlb	0	; () banked
  4566  000A7C  11D3               	iorwf	(??_printf+1)& (0+255),w,b
  4567  000A7E  B4D8               	btfsc	status,2,c
  4568  000A80  D004               	goto	l9536
  4569                           
  4570                           ; BSR set to: 0
  4571                           ;doprnt.c: 1393: (putch('-') );
  4572  000A82  0E2D               	movlw	45
  4573  000A84  EC11  F026         	call	_putch
  4574  000A88  D000               	goto	l9536
  4575  000A8A                     l9536:
  4576                           
  4577                           ;doprnt.c: 1415: if(width)
  4578  000A8A  0101               	movlb	1	; () banked
  4579  000A8C  513D               	movf	printf@width& (0+255),w,b
  4580  000A8E  0101               	movlb	1	; () banked
  4581  000A90  113E               	iorwf	(printf@width+1)& (0+255),w,b
  4582  000A92  B4D8               	btfsc	status,2,c
  4583  000A94  D038               	goto	l9552
  4584  000A96                     l9538:
  4585                           
  4586                           ; BSR set to: 1
  4587                           ;doprnt.c: 1417: (putch('0') );
  4588  000A96  0E30               	movlw	48
  4589  000A98  EC11  F026         	call	_putch
  4590                           
  4591                           ;doprnt.c: 1418: while(--width);
  4592  000A9C  0101               	movlb	1	; () banked
  4593  000A9E  073D               	decf	printf@width& (0+255),f,b
  4594  000AA0  A0D8               	btfss	status,0,c
  4595  000AA2  073E               	decf	(printf@width+1)& (0+255),f,b
  4596  000AA4  0101               	movlb	1	; () banked
  4597  000AA6  513D               	movf	printf@width& (0+255),w,b
  4598  000AA8  0101               	movlb	1	; () banked
  4599  000AAA  113E               	iorwf	(printf@width+1)& (0+255),w,b
  4600  000AAC  B4D8               	btfsc	status,2,c
  4601  000AAE  D02B               	goto	l9552
  4602  000AB0  D7F2               	goto	l9538
  4603                           
  4604                           ; BSR set to: 1
  4605                           ;doprnt.c: 1420: } else
  4606                           
  4607                           ; BSR set to: 1
  4608  000AB2  D029               	goto	l9552
  4609  000AB4                     l9542:
  4610                           
  4611                           ; BSR set to: 1
  4612                           ;doprnt.c: 1422: {
  4613                           ;doprnt.c: 1424: if(width
  4614                           ;doprnt.c: 1428: )
  4615  000AB4  0101               	movlb	1	; () banked
  4616  000AB6  513D               	movf	printf@width& (0+255),w,b
  4617  000AB8  0101               	movlb	1	; () banked
  4618  000ABA  113E               	iorwf	(printf@width+1)& (0+255),w,b
  4619  000ABC  B4D8               	btfsc	status,2,c
  4620  000ABE  D00F               	goto	l9548
  4621  000AC0                     l9544:
  4622                           
  4623                           ; BSR set to: 1
  4624                           ;doprnt.c: 1430: (putch(' ') );
  4625  000AC0  0E20               	movlw	32
  4626  000AC2  EC11  F026         	call	_putch
  4627                           
  4628                           ;doprnt.c: 1431: while(--width);
  4629  000AC6  0101               	movlb	1	; () banked
  4630  000AC8  073D               	decf	printf@width& (0+255),f,b
  4631  000ACA  A0D8               	btfss	status,0,c
  4632  000ACC  073E               	decf	(printf@width+1)& (0+255),f,b
  4633  000ACE  0101               	movlb	1	; () banked
  4634  000AD0  513D               	movf	printf@width& (0+255),w,b
  4635  000AD2  0101               	movlb	1	; () banked
  4636  000AD4  113E               	iorwf	(printf@width+1)& (0+255),w,b
  4637  000AD6  B4D8               	btfsc	status,2,c
  4638  000AD8  D002               	goto	l9548
  4639  000ADA  D7F2               	goto	l9544
  4640                           
  4641                           ; BSR set to: 1
  4642  000ADC  D000               	goto	l9548
  4643  000ADE                     l9548:
  4644                           
  4645                           ; BSR set to: 1
  4646                           ;doprnt.c: 1438: if(flag & 0x03)
  4647  000ADE  0E03               	movlw	3
  4648  000AE0  0101               	movlb	1	; () banked
  4649  000AE2  1545               	andwf	printf@flag& (0+255),w,b
  4650  000AE4  0100               	movlb	0	; () banked
  4651  000AE6  6FD2               	movwf	??_printf& (0+255),b
  4652  000AE8  0E00               	movlw	0
  4653  000AEA  0101               	movlb	1	; () banked
  4654  000AEC  1546               	andwf	(printf@flag+1)& (0+255),w,b
  4655  000AEE  0100               	movlb	0	; () banked
  4656  000AF0  6FD3               	movwf	(??_printf+1)& (0+255),b
  4657  000AF2  0100               	movlb	0	; () banked
  4658  000AF4  51D2               	movf	??_printf& (0+255),w,b
  4659  000AF6  0100               	movlb	0	; () banked
  4660  000AF8  11D3               	iorwf	(??_printf+1)& (0+255),w,b
  4661  000AFA  B4D8               	btfsc	status,2,c
  4662  000AFC  D004               	goto	l9552
  4663                           
  4664                           ; BSR set to: 0
  4665                           ;doprnt.c: 1439: (putch('-') );
  4666  000AFE  0E2D               	movlw	45
  4667  000B00  EC11  F026         	call	_putch
  4668  000B04  D000               	goto	l9552
  4669  000B06                     l9552:
  4670                           
  4671                           ;doprnt.c: 1469: }
  4672                           ;doprnt.c: 1472: prec = c;
  4673  000B06  0101               	movlb	1	; () banked
  4674  000B08  514A               	movf	printf@c& (0+255),w,b
  4675  000B0A  0101               	movlb	1	; () banked
  4676  000B0C  6F37               	movwf	printf@prec& (0+255),b
  4677  000B0E  6B38               	clrf	(printf@prec+1)& (0+255),b
  4678  000B10  BF37               	btfsc	printf@prec& (0+255),7,b
  4679  000B12  0738               	decf	(printf@prec+1)& (0+255),f,b
  4680                           
  4681                           ;doprnt.c: 1474: while(prec--) {
  4682  000B14  D08A               	goto	l9566
  4683                           
  4684                           ; BSR set to: 1
  4685                           ;doprnt.c: 1476: switch((unsigned char)(flag & 0x80))
  4686  000B16  D07A               	goto	l9562
  4687  000B18                     l9554:
  4688                           
  4689                           ; BSR set to: 1
  4690                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4691  000B18  C137  F0D2         	movff	printf@prec,??_printf
  4692  000B1C  C138  F0D3         	movff	printf@prec+1,??_printf+1
  4693  000B20  0100               	movlb	0	; () banked
  4694  000B22  90D8               	bcf	status,0,c
  4695  000B24  37D2               	rlcf	??_printf& (0+255),f,b
  4696  000B26  37D3               	rlcf	(??_printf+1)& (0+255),f,b
  4697  000B28  0100               	movlb	0	; () banked
  4698  000B2A  90D8               	bcf	status,0,c
  4699  000B2C  37D2               	rlcf	??_printf& (0+255),f,b
  4700  000B2E  37D3               	rlcf	(??_printf+1)& (0+255),f,b
  4701  000B30  0E94               	movlw	low _dpowers
  4702  000B32  0100               	movlb	0	; () banked
  4703  000B34  25D2               	addwf	??_printf& (0+255),w,b
  4704  000B36  6EF6               	movwf	tblptrl,c
  4705  000B38  0EFE               	movlw	high _dpowers
  4706  000B3A  21D3               	addwfc	(??_printf+1)& (0+255),w,b
  4707  000B3C  6EF7               	movwf	tblptrh,c
  4708  000B3E                     	if	0	;There are less than 3 active tblptr bytes
  4709  000B3E                     	endif
  4710  000B3E  0009               	tblrd		*+
  4711  000B40  CFF5 F020          	movff	tablat,___lldiv@divisor
  4712  000B44  0009               	tblrd		*+
  4713  000B46  CFF5 F021          	movff	tablat,___lldiv@divisor+1
  4714  000B4A  0009               	tblrd		*+
  4715  000B4C  CFF5 F022          	movff	tablat,___lldiv@divisor+2
  4716  000B50  000A               	tblrd		*-
  4717  000B52  CFF5 F023          	movff	tablat,___lldiv@divisor+3
  4718  000B56  C141  F01C         	movff	printf@val,___lldiv@dividend
  4719  000B5A  C142  F01D         	movff	printf@val+1,___lldiv@dividend+1
  4720  000B5E  C143  F01E         	movff	printf@val+2,___lldiv@dividend+2
  4721  000B62  C144  F01F         	movff	printf@val+3,___lldiv@dividend+3
  4722  000B66  EC70  F01E         	call	___lldiv	;wreg free
  4723  000B6A  C01C  F029         	movff	?___lldiv,___llmod@dividend
  4724  000B6E  C01D  F02A         	movff	?___lldiv+1,___llmod@dividend+1
  4725  000B72  C01E  F02B         	movff	?___lldiv+2,___llmod@dividend+2
  4726  000B76  C01F  F02C         	movff	?___lldiv+3,___llmod@dividend+3
  4727  000B7A  0E0A               	movlw	10
  4728  000B7C  6E2D               	movwf	___llmod@divisor,c
  4729  000B7E  0E00               	movlw	0
  4730  000B80  6E2E               	movwf	___llmod@divisor+1,c
  4731  000B82  0E00               	movlw	0
  4732  000B84  6E2F               	movwf	___llmod@divisor+2,c
  4733  000B86  0E00               	movlw	0
  4734  000B88  6E30               	movwf	___llmod@divisor+3,c
  4735  000B8A  EC7E  F020         	call	___llmod	;wreg free
  4736  000B8E  5029               	movf	?___llmod,w,c
  4737  000B90  0F30               	addlw	48
  4738  000B92  0101               	movlb	1	; () banked
  4739  000B94  6F4A               	movwf	printf@c& (0+255),b
  4740                           
  4741                           ;doprnt.c: 1491: break;
  4742  000B96  D044               	goto	l9564
  4743  000B98                     l9556:
  4744                           
  4745                           ; BSR set to: 1
  4746                           ;doprnt.c: 1499: {
  4747                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  4748  000B98  C141  F01C         	movff	printf@val,___lldiv@dividend
  4749  000B9C  C142  F01D         	movff	printf@val+1,___lldiv@dividend+1
  4750  000BA0  C143  F01E         	movff	printf@val+2,___lldiv@dividend+2
  4751  000BA4  C144  F01F         	movff	printf@val+3,___lldiv@dividend+3
  4752  000BA8  C137  F0D2         	movff	printf@prec,??_printf
  4753  000BAC  C138  F0D3         	movff	printf@prec+1,??_printf+1
  4754  000BB0  0100               	movlb	0	; () banked
  4755  000BB2  90D8               	bcf	status,0,c
  4756  000BB4  37D2               	rlcf	??_printf& (0+255),f,b
  4757  000BB6  37D3               	rlcf	(??_printf+1)& (0+255),f,b
  4758  000BB8  0100               	movlb	0	; () banked
  4759  000BBA  90D8               	bcf	status,0,c
  4760  000BBC  37D2               	rlcf	??_printf& (0+255),f,b
  4761  000BBE  37D3               	rlcf	(??_printf+1)& (0+255),f,b
  4762  000BC0  0E0A               	movlw	low _hexpowers
  4763  000BC2  0100               	movlb	0	; () banked
  4764  000BC4  25D2               	addwf	??_printf& (0+255),w,b
  4765  000BC6  6EF6               	movwf	tblptrl,c
  4766  000BC8  0EFF               	movlw	high _hexpowers
  4767  000BCA  21D3               	addwfc	(??_printf+1)& (0+255),w,b
  4768  000BCC  6EF7               	movwf	tblptrh,c
  4769  000BCE                     	if	0	;There are less than 3 active tblptr bytes
  4770  000BCE                     	endif
  4771  000BCE  0009               	tblrd		*+
  4772  000BD0  CFF5 F020          	movff	tablat,___lldiv@divisor
  4773  000BD4  0009               	tblrd		*+
  4774  000BD6  CFF5 F021          	movff	tablat,___lldiv@divisor+1
  4775  000BDA  0009               	tblrd		*+
  4776  000BDC  CFF5 F022          	movff	tablat,___lldiv@divisor+2
  4777  000BE0  000A               	tblrd		*-
  4778  000BE2  CFF5 F023          	movff	tablat,___lldiv@divisor+3
  4779  000BE6  EC70  F01E         	call	___lldiv	;wreg free
  4780  000BEA  501C               	movf	?___lldiv,w,c
  4781  000BEC  0B0F               	andlw	15
  4782  000BEE  0101               	movlb	1	; () banked
  4783  000BF0  6F34               	movwf	printf@idx& (0+255),b
  4784                           
  4785                           ; BSR set to: 1
  4786                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  4787  000BF2  0101               	movlb	1	; () banked
  4788  000BF4  5134               	movf	printf@idx& (0+255),w,b
  4789  000BF6  0D01               	mullw	1
  4790  000BF8  0E81               	movlw	low STR_31
  4791  000BFA  24F3               	addwf	prodl,w,c
  4792  000BFC  6EF6               	movwf	tblptrl,c
  4793  000BFE  0EFF               	movlw	high STR_31
  4794  000C00  20F4               	addwfc	prodh,w,c
  4795  000C02  6EF7               	movwf	tblptrh,c
  4796  000C04                     	if	0	;There are less than 3 active tblptr bytes
  4797  000C04                     	endif
  4798  000C04  0008               	tblrd		*
  4799  000C06  CFF5 F14A          	movff	tablat,printf@c
  4800                           
  4801                           ; BSR set to: 1
  4802                           ;doprnt.c: 1523: }
  4803                           
  4804                           ;doprnt.c: 1508: }
  4805                           ;doprnt.c: 1510: break;
  4806  000C0A  D00A               	goto	l9564
  4807  000C0C                     l9562:
  4808                           
  4809                           ; BSR set to: 1
  4810  000C0C  0101               	movlb	1	; () banked
  4811  000C0E  5145               	movf	printf@flag& (0+255),w,b
  4812  000C10  0B80               	andlw	128
  4813                           
  4814                           ; Switch size 1, requested type "space"
  4815                           ; Number of cases is 2, Range of values is 0 to 128
  4816                           ; switch strategies available:
  4817                           ; Name         Instructions Cycles
  4818                           ; simple_byte            7     4 (average)
  4819                           ;	Chosen strategy is simple_byte
  4820  000C12  0A00               	xorlw	0	; case 0
  4821  000C14  B4D8               	btfsc	status,2,c
  4822  000C16  D780               	goto	l9554
  4823  000C18  0A80               	xorlw	128	; case 128
  4824  000C1A  B4D8               	btfsc	status,2,c
  4825  000C1C  D7BD               	goto	l9556
  4826  000C1E  D000               	goto	l9564
  4827  000C20                     l9564:
  4828                           
  4829                           ; BSR set to: 1
  4830                           ;doprnt.c: 1524: (putch(c) );
  4831  000C20  0101               	movlb	1	; () banked
  4832  000C22  514A               	movf	printf@c& (0+255),w,b
  4833  000C24  EC11  F026         	call	_putch
  4834  000C28  D000               	goto	l9566
  4835  000C2A                     l9566:
  4836  000C2A  0101               	movlb	1	; () banked
  4837  000C2C  0737               	decf	printf@prec& (0+255),f,b
  4838  000C2E  A0D8               	btfss	status,0,c
  4839  000C30  0738               	decf	(printf@prec+1)& (0+255),f,b
  4840  000C32  0101               	movlb	1	; () banked
  4841  000C34  2937               	incf	printf@prec& (0+255),w,b
  4842  000C36  E1EA               	bnz	l9562
  4843  000C38  0101               	movlb	1	; () banked
  4844  000C3A  2938               	incf	(printf@prec+1)& (0+255),w,b
  4845  000C3C  B4D8               	btfsc	status,2,c
  4846  000C3E  D002               	goto	l9568
  4847  000C40  D7E5               	goto	l9562
  4848                           
  4849                           ; BSR set to: 1
  4850  000C42  D000               	goto	l9568
  4851  000C44                     l9568:
  4852  000C44  C0C4  FFF6         	movff	printf@f,tblptrl
  4853  000C48  C0C5  FFF7         	movff	printf@f+1,tblptrh
  4854  000C4C  0100               	movlb	0	; () banked
  4855  000C4E  4BC4               	infsnz	printf@f& (0+255),f,b
  4856  000C50  2BC5               	incf	(printf@f+1)& (0+255),f,b
  4857  000C52                     	if	0	;tblptru may be non-zero
  4858  000C52                     	endif
  4859  000C52                     	if	0	;tblptru may be non-zero
  4860  000C52                     	endif
  4861  000C52  0008               	tblrd		*
  4862  000C54  CFF5 F14A          	movff	tablat,printf@c
  4863  000C58  0101               	movlb	1	; () banked
  4864  000C5A  514A               	movf	printf@c& (0+255),w,b
  4865  000C5C  B4D8               	btfsc	status,2,c
  4866  000C5E  D003               	goto	l966
  4867  000C60  EF16  F000         	goto	l9282
  4868                           
  4869                           ; BSR set to: 1
  4870  000C64  D000               	goto	l966
  4871  000C66                     l966:
  4872  000C66  0012               	return		;funcret
  4873  000C68                     __end_of_printf:
  4874                           	opt stack 0
  4875                           tblptru	equ	0xFF8
  4876                           tblptrh	equ	0xFF7
  4877                           tblptrl	equ	0xFF6
  4878                           tablat	equ	0xFF5
  4879                           prodh	equ	0xFF4
  4880                           prodl	equ	0xFF3
  4881                           intcon	equ	0xFF2
  4882                           intcon2	equ	0xFF1
  4883                           intcon3	equ	0xFF0
  4884                           postinc0	equ	0xFEE
  4885                           wreg	equ	0xFE8
  4886                           postdec1	equ	0xFE5
  4887                           fsr1l	equ	0xFE1
  4888                           postinc2	equ	0xFDE
  4889                           postdec2	equ	0xFDD
  4890                           fsr2h	equ	0xFDA
  4891                           fsr2l	equ	0xFD9
  4892                           status	equ	0xFD8
  4893                           
  4894 ;; *************** function _scale *****************
  4895 ;; Defined at:
  4896 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  4897 ;; Parameters:    Size  Location     Type
  4898 ;;  scl             1    wreg     char 
  4899 ;; Auto vars:     Size  Location     Type
  4900 ;;  scl             1   68[COMRAM] char 
  4901 ;; Return value:  Size  Location     Type
  4902 ;;                  3   62[COMRAM] char 
  4903 ;; Registers used:
  4904 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4905 ;; Tracked objects:
  4906 ;;		On entry : 0/0
  4907 ;;		On exit  : 0/0
  4908 ;;		Unchanged: 0/0
  4909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4910 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4911 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4912 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4913 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4914 ;;Total ram usage:        7 bytes
  4915 ;; Hardware stack levels used:    1
  4916 ;; Hardware stack levels required when called:    7
  4917 ;; This function calls:
  4918 ;;		___awdiv
  4919 ;;		___awmod
  4920 ;;		___ftmul
  4921 ;;		___wmul
  4922 ;; This function is called by:
  4923 ;;		_printf
  4924 ;; This function uses a non-reentrant model
  4925 ;;
  4926                           
  4927                           	psect	text2
  4928  000C68                     __ptext2:
  4929                           	opt stack 0
  4930  000C68                     _scale:
  4931                           	opt stack 22
  4932                           
  4933                           ;incstack = 0
  4934                           ;scale@scl stored from wreg
  4935  000C68  6E45               	movwf	scale@scl,c
  4936                           
  4937                           ;doprnt.c: 428: if(scl < 0) {
  4938  000C6A  AE45               	btfss	scale@scl,7,c
  4939  000C6C  D0EF               	goto	l8754
  4940                           
  4941                           ;doprnt.c: 429: scl = -scl;
  4942  000C6E  6C45               	negf	scale@scl,c
  4943                           
  4944                           ;doprnt.c: 430: if(scl>=110)
  4945  000C70  5045               	movf	scale@scl,w,c
  4946  000C72  0A80               	xorlw	128
  4947  000C74  0F12               	addlw	-238
  4948  000C76  A0D8               	btfss	status,0,c
  4949  000C78  D08D               	goto	l8744
  4950                           
  4951                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  4952  000C7A  0E00               	movlw	0
  4953  000C7C  6E2D               	movwf	___wmul@multiplicand+1,c
  4954  000C7E  0E03               	movlw	3
  4955  000C80  6E2C               	movwf	___wmul@multiplicand,c
  4956  000C82  0E00               	movlw	0
  4957  000C84  6E25               	movwf	___awdiv@divisor+1,c
  4958  000C86  0E0A               	movlw	10
  4959  000C88  6E24               	movwf	___awdiv@divisor,c
  4960  000C8A  0E00               	movlw	0
  4961  000C8C  6E1F               	movwf	___awmod@divisor+1,c
  4962  000C8E  0E64               	movlw	100
  4963  000C90  6E1E               	movwf	___awmod@divisor,c
  4964  000C92  5045               	movf	scale@scl,w,c
  4965  000C94  6E1C               	movwf	___awmod@dividend,c
  4966  000C96  6A1D               	clrf	___awmod@dividend+1,c
  4967  000C98  BE1C               	btfsc	___awmod@dividend,7,c
  4968  000C9A  061D               	decf	___awmod@dividend+1,f,c
  4969  000C9C  ECC8  F01F         	call	___awmod	;wreg free
  4970  000CA0  C01C  F022         	movff	?___awmod,___awdiv@dividend
  4971  000CA4  C01D  F023         	movff	?___awmod+1,___awdiv@dividend+1
  4972  000CA8  EC92  F01D         	call	___awdiv	;wreg free
  4973  000CAC  0E09               	movlw	9
  4974  000CAE  2422               	addwf	?___awdiv,w,c
  4975  000CB0  6E2A               	movwf	___wmul@multiplier,c
  4976  000CB2  0E00               	movlw	0
  4977  000CB4  2023               	addwfc	?___awdiv+1,w,c
  4978  000CB6  6E2B               	movwf	___wmul@multiplier+1,c
  4979  000CB8  ECC3  F024         	call	___wmul	;wreg free
  4980  000CBC  0EBC               	movlw	low __npowers_
  4981  000CBE  242A               	addwf	?___wmul,w,c
  4982  000CC0  6EF6               	movwf	tblptrl,c
  4983  000CC2  0EFE               	movlw	high __npowers_
  4984  000CC4  202B               	addwfc	?___wmul+1,w,c
  4985  000CC6  6EF7               	movwf	tblptrh,c
  4986  000CC8                     	if	0	;There are less than 3 active tblptr bytes
  4987  000CC8                     	endif
  4988  000CC8  0009               	tblrd		*+
  4989  000CCA  CFF5 F033          	movff	tablat,___ftmul@f2
  4990  000CCE  0009               	tblrd		*+
  4991  000CD0  CFF5 F034          	movff	tablat,___ftmul@f2+1
  4992  000CD4  000A               	tblrd		*-
  4993  000CD6  CFF5 F035          	movff	tablat,___ftmul@f2+2
  4994  000CDA  0E00               	movlw	0
  4995  000CDC  6E25               	movwf	___awdiv@divisor+1,c
  4996  000CDE  0E64               	movlw	100
  4997  000CE0  6E24               	movwf	___awdiv@divisor,c
  4998  000CE2  5045               	movf	scale@scl,w,c
  4999  000CE4  6E22               	movwf	___awdiv@dividend,c
  5000  000CE6  6A23               	clrf	___awdiv@dividend+1,c
  5001  000CE8  BE22               	btfsc	___awdiv@dividend,7,c
  5002  000CEA  0623               	decf	___awdiv@dividend+1,f,c
  5003  000CEC  EC92  F01D         	call	___awdiv	;wreg free
  5004  000CF0  0E12               	movlw	18
  5005  000CF2  2422               	addwf	?___awdiv,w,c
  5006  000CF4  6E2A               	movwf	___wmul@multiplier,c
  5007  000CF6  0E00               	movlw	0
  5008  000CF8  2023               	addwfc	?___awdiv+1,w,c
  5009  000CFA  6E2B               	movwf	___wmul@multiplier+1,c
  5010  000CFC  0E00               	movlw	0
  5011  000CFE  6E2D               	movwf	___wmul@multiplicand+1,c
  5012  000D00  0E03               	movlw	3
  5013  000D02  6E2C               	movwf	___wmul@multiplicand,c
  5014  000D04  ECC3  F024         	call	___wmul	;wreg free
  5015  000D08  0EBC               	movlw	low __npowers_
  5016  000D0A  242A               	addwf	?___wmul,w,c
  5017  000D0C  6EF6               	movwf	tblptrl,c
  5018  000D0E  0EFE               	movlw	high __npowers_
  5019  000D10  202B               	addwfc	?___wmul+1,w,c
  5020  000D12  6EF7               	movwf	tblptrh,c
  5021  000D14                     	if	0	;There are less than 3 active tblptr bytes
  5022  000D14                     	endif
  5023  000D14  0009               	tblrd		*+
  5024  000D16  CFF5 F030          	movff	tablat,___ftmul@f1
  5025  000D1A  0009               	tblrd		*+
  5026  000D1C  CFF5 F031          	movff	tablat,___ftmul@f1+1
  5027  000D20  000A               	tblrd		*-
  5028  000D22  CFF5 F032          	movff	tablat,___ftmul@f1+2
  5029  000D26  ECF0  F01A         	call	___ftmul	;wreg free
  5030  000D2A  C030  F042         	movff	?___ftmul,_scale$2752
  5031  000D2E  C031  F043         	movff	?___ftmul+1,_scale$2752+1
  5032  000D32  C032  F044         	movff	?___ftmul+2,_scale$2752+2
  5033                           
  5034                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  5035  000D36  C042  F030         	movff	_scale$2752,___ftmul@f1
  5036  000D3A  C043  F031         	movff	_scale$2752+1,___ftmul@f1+1
  5037  000D3E  C044  F032         	movff	_scale$2752+2,___ftmul@f1+2
  5038  000D42  0E00               	movlw	0
  5039  000D44  6E2D               	movwf	___wmul@multiplicand+1,c
  5040  000D46  0E03               	movlw	3
  5041  000D48  6E2C               	movwf	___wmul@multiplicand,c
  5042  000D4A  0E00               	movlw	0
  5043  000D4C  6E1F               	movwf	___awmod@divisor+1,c
  5044  000D4E  0E0A               	movlw	10
  5045  000D50  6E1E               	movwf	___awmod@divisor,c
  5046  000D52  5045               	movf	scale@scl,w,c
  5047  000D54  6E1C               	movwf	___awmod@dividend,c
  5048  000D56  6A1D               	clrf	___awmod@dividend+1,c
  5049  000D58  BE1C               	btfsc	___awmod@dividend,7,c
  5050  000D5A  061D               	decf	___awmod@dividend+1,f,c
  5051  000D5C  ECC8  F01F         	call	___awmod	;wreg free
  5052  000D60  C01C  F02A         	movff	?___awmod,___wmul@multiplier
  5053  000D64  C01D  F02B         	movff	?___awmod+1,___wmul@multiplier+1
  5054  000D68  ECC3  F024         	call	___wmul	;wreg free
  5055  000D6C  0EBC               	movlw	low __npowers_
  5056  000D6E  242A               	addwf	?___wmul,w,c
  5057  000D70  6EF6               	movwf	tblptrl,c
  5058  000D72  0EFE               	movlw	high __npowers_
  5059  000D74  202B               	addwfc	?___wmul+1,w,c
  5060  000D76  6EF7               	movwf	tblptrh,c
  5061  000D78                     	if	0	;There are less than 3 active tblptr bytes
  5062  000D78                     	endif
  5063  000D78  0009               	tblrd		*+
  5064  000D7A  CFF5 F033          	movff	tablat,___ftmul@f2
  5065  000D7E  0009               	tblrd		*+
  5066  000D80  CFF5 F034          	movff	tablat,___ftmul@f2+1
  5067  000D84  000A               	tblrd		*-
  5068  000D86  CFF5 F035          	movff	tablat,___ftmul@f2+2
  5069  000D8A  ECF0  F01A         	call	___ftmul	;wreg free
  5070  000D8E  D141               	goto	L5
  5071  000D90  D15A               	goto	l855
  5072  000D92  D054               	goto	l8750
  5073  000D94                     l8744:
  5074                           
  5075                           ;doprnt.c: 432: else if(scl > 10)
  5076  000D94  5045               	movf	scale@scl,w,c
  5077  000D96  0A80               	xorlw	128
  5078  000D98  0F75               	addlw	-139
  5079  000D9A  A0D8               	btfss	status,0,c
  5080  000D9C  D04F               	goto	l8750
  5081                           
  5082                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  5083  000D9E  0E00               	movlw	0
  5084  000DA0  6E25               	movwf	___awdiv@divisor+1,c
  5085  000DA2  0E0A               	movlw	10
  5086  000DA4  6E24               	movwf	___awdiv@divisor,c
  5087  000DA6  5045               	movf	scale@scl,w,c
  5088  000DA8  6E22               	movwf	___awdiv@dividend,c
  5089  000DAA  6A23               	clrf	___awdiv@dividend+1,c
  5090  000DAC  BE22               	btfsc	___awdiv@dividend,7,c
  5091  000DAE  0623               	decf	___awdiv@dividend+1,f,c
  5092  000DB0  EC92  F01D         	call	___awdiv	;wreg free
  5093  000DB4  0E09               	movlw	9
  5094  000DB6  2422               	addwf	?___awdiv,w,c
  5095  000DB8  6E2A               	movwf	___wmul@multiplier,c
  5096  000DBA  0E00               	movlw	0
  5097  000DBC  2023               	addwfc	?___awdiv+1,w,c
  5098  000DBE  6E2B               	movwf	___wmul@multiplier+1,c
  5099  000DC0  0E00               	movlw	0
  5100  000DC2  6E2D               	movwf	___wmul@multiplicand+1,c
  5101  000DC4  0E03               	movlw	3
  5102  000DC6  6E2C               	movwf	___wmul@multiplicand,c
  5103  000DC8  ECC3  F024         	call	___wmul	;wreg free
  5104  000DCC  0EBC               	movlw	low __npowers_
  5105  000DCE  242A               	addwf	?___wmul,w,c
  5106  000DD0  6EF6               	movwf	tblptrl,c
  5107  000DD2  0EFE               	movlw	high __npowers_
  5108  000DD4  202B               	addwfc	?___wmul+1,w,c
  5109  000DD6  6EF7               	movwf	tblptrh,c
  5110  000DD8                     	if	0	;There are less than 3 active tblptr bytes
  5111  000DD8                     	endif
  5112  000DD8  0009               	tblrd		*+
  5113  000DDA  CFF5 F030          	movff	tablat,___ftmul@f1
  5114  000DDE  0009               	tblrd		*+
  5115  000DE0  CFF5 F031          	movff	tablat,___ftmul@f1+1
  5116  000DE4  000A               	tblrd		*-
  5117  000DE6  CFF5 F032          	movff	tablat,___ftmul@f1+2
  5118  000DEA  0E00               	movlw	0
  5119  000DEC  6E2D               	movwf	___wmul@multiplicand+1,c
  5120  000DEE  0E03               	movlw	3
  5121  000DF0  6E2C               	movwf	___wmul@multiplicand,c
  5122  000DF2  0E00               	movlw	0
  5123  000DF4  6E1F               	movwf	___awmod@divisor+1,c
  5124  000DF6  0E0A               	movlw	10
  5125  000DF8  6E1E               	movwf	___awmod@divisor,c
  5126  000DFA  5045               	movf	scale@scl,w,c
  5127  000DFC  6E1C               	movwf	___awmod@dividend,c
  5128  000DFE  6A1D               	clrf	___awmod@dividend+1,c
  5129  000E00  BE1C               	btfsc	___awmod@dividend,7,c
  5130  000E02  061D               	decf	___awmod@dividend+1,f,c
  5131  000E04  ECC8  F01F         	call	___awmod	;wreg free
  5132  000E08  C01C  F02A         	movff	?___awmod,___wmul@multiplier
  5133  000E0C  C01D  F02B         	movff	?___awmod+1,___wmul@multiplier+1
  5134  000E10  ECC3  F024         	call	___wmul	;wreg free
  5135  000E14  0EBC               	movlw	low __npowers_
  5136  000E16  242A               	addwf	?___wmul,w,c
  5137  000E18  6EF6               	movwf	tblptrl,c
  5138  000E1A  0EFE               	movlw	high __npowers_
  5139  000E1C  202B               	addwfc	?___wmul+1,w,c
  5140  000E1E  6EF7               	movwf	tblptrh,c
  5141  000E20                     	if	0	;There are less than 3 active tblptr bytes
  5142  000E20                     	endif
  5143  000E20  0009               	tblrd		*+
  5144  000E22  CFF5 F033          	movff	tablat,___ftmul@f2
  5145  000E26  0009               	tblrd		*+
  5146  000E28  CFF5 F034          	movff	tablat,___ftmul@f2+1
  5147  000E2C  000A               	tblrd		*-
  5148  000E2E  CFF5 F035          	movff	tablat,___ftmul@f2+2
  5149  000E32  ECF0  F01A         	call	___ftmul	;wreg free
  5150  000E36  D0ED               	goto	L5
  5151  000E38  D106               	goto	l855
  5152  000E3A  D000               	goto	l8750
  5153  000E3C                     l8750:
  5154                           
  5155                           ;doprnt.c: 434: return _npowers_[scl];
  5156  000E3C  5045               	movf	scale@scl,w,c
  5157  000E3E  0D03               	mullw	3
  5158  000E40  0EBC               	movlw	low __npowers_
  5159  000E42  24F3               	addwf	prodl,w,c
  5160  000E44  6EF6               	movwf	tblptrl,c
  5161  000E46  0EFE               	movlw	high __npowers_
  5162  000E48  D0F2               	goto	L4
  5163  000E4A  D0FD               	goto	l855
  5164  000E4C                     l8754:
  5165                           
  5166                           ;doprnt.c: 435: }
  5167                           ;doprnt.c: 436: if(scl>=110)
  5168  000E4C  5045               	movf	scale@scl,w,c
  5169  000E4E  0A80               	xorlw	128
  5170  000E50  0F12               	addlw	-238
  5171  000E52  A0D8               	btfss	status,0,c
  5172  000E54  D08D               	goto	l8762
  5173                           
  5174                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  5175  000E56  0E00               	movlw	0
  5176  000E58  6E2D               	movwf	___wmul@multiplicand+1,c
  5177  000E5A  0E03               	movlw	3
  5178  000E5C  6E2C               	movwf	___wmul@multiplicand,c
  5179  000E5E  0E00               	movlw	0
  5180  000E60  6E25               	movwf	___awdiv@divisor+1,c
  5181  000E62  0E0A               	movlw	10
  5182  000E64  6E24               	movwf	___awdiv@divisor,c
  5183  000E66  0E00               	movlw	0
  5184  000E68  6E1F               	movwf	___awmod@divisor+1,c
  5185  000E6A  0E64               	movlw	100
  5186  000E6C  6E1E               	movwf	___awmod@divisor,c
  5187  000E6E  5045               	movf	scale@scl,w,c
  5188  000E70  6E1C               	movwf	___awmod@dividend,c
  5189  000E72  6A1D               	clrf	___awmod@dividend+1,c
  5190  000E74  BE1C               	btfsc	___awmod@dividend,7,c
  5191  000E76  061D               	decf	___awmod@dividend+1,f,c
  5192  000E78  ECC8  F01F         	call	___awmod	;wreg free
  5193  000E7C  C01C  F022         	movff	?___awmod,___awdiv@dividend
  5194  000E80  C01D  F023         	movff	?___awmod+1,___awdiv@dividend+1
  5195  000E84  EC92  F01D         	call	___awdiv	;wreg free
  5196  000E88  0E09               	movlw	9
  5197  000E8A  2422               	addwf	?___awdiv,w,c
  5198  000E8C  6E2A               	movwf	___wmul@multiplier,c
  5199  000E8E  0E00               	movlw	0
  5200  000E90  2023               	addwfc	?___awdiv+1,w,c
  5201  000E92  6E2B               	movwf	___wmul@multiplier+1,c
  5202  000E94  ECC3  F024         	call	___wmul	;wreg free
  5203  000E98  0EE3               	movlw	low __powers_
  5204  000E9A  242A               	addwf	?___wmul,w,c
  5205  000E9C  6EF6               	movwf	tblptrl,c
  5206  000E9E  0EFE               	movlw	high __powers_
  5207  000EA0  202B               	addwfc	?___wmul+1,w,c
  5208  000EA2  6EF7               	movwf	tblptrh,c
  5209  000EA4                     	if	0	;There are less than 3 active tblptr bytes
  5210  000EA4                     	endif
  5211  000EA4  0009               	tblrd		*+
  5212  000EA6  CFF5 F033          	movff	tablat,___ftmul@f2
  5213  000EAA  0009               	tblrd		*+
  5214  000EAC  CFF5 F034          	movff	tablat,___ftmul@f2+1
  5215  000EB0  000A               	tblrd		*-
  5216  000EB2  CFF5 F035          	movff	tablat,___ftmul@f2+2
  5217  000EB6  0E00               	movlw	0
  5218  000EB8  6E25               	movwf	___awdiv@divisor+1,c
  5219  000EBA  0E64               	movlw	100
  5220  000EBC  6E24               	movwf	___awdiv@divisor,c
  5221  000EBE  5045               	movf	scale@scl,w,c
  5222  000EC0  6E22               	movwf	___awdiv@dividend,c
  5223  000EC2  6A23               	clrf	___awdiv@dividend+1,c
  5224  000EC4  BE22               	btfsc	___awdiv@dividend,7,c
  5225  000EC6  0623               	decf	___awdiv@dividend+1,f,c
  5226  000EC8  EC92  F01D         	call	___awdiv	;wreg free
  5227  000ECC  0E12               	movlw	18
  5228  000ECE  2422               	addwf	?___awdiv,w,c
  5229  000ED0  6E2A               	movwf	___wmul@multiplier,c
  5230  000ED2  0E00               	movlw	0
  5231  000ED4  2023               	addwfc	?___awdiv+1,w,c
  5232  000ED6  6E2B               	movwf	___wmul@multiplier+1,c
  5233  000ED8  0E00               	movlw	0
  5234  000EDA  6E2D               	movwf	___wmul@multiplicand+1,c
  5235  000EDC  0E03               	movlw	3
  5236  000EDE  6E2C               	movwf	___wmul@multiplicand,c
  5237  000EE0  ECC3  F024         	call	___wmul	;wreg free
  5238  000EE4  0EE3               	movlw	low __powers_
  5239  000EE6  242A               	addwf	?___wmul,w,c
  5240  000EE8  6EF6               	movwf	tblptrl,c
  5241  000EEA  0EFE               	movlw	high __powers_
  5242  000EEC  202B               	addwfc	?___wmul+1,w,c
  5243  000EEE  6EF7               	movwf	tblptrh,c
  5244  000EF0                     	if	0	;There are less than 3 active tblptr bytes
  5245  000EF0                     	endif
  5246  000EF0  0009               	tblrd		*+
  5247  000EF2  CFF5 F030          	movff	tablat,___ftmul@f1
  5248  000EF6  0009               	tblrd		*+
  5249  000EF8  CFF5 F031          	movff	tablat,___ftmul@f1+1
  5250  000EFC  000A               	tblrd		*-
  5251  000EFE  CFF5 F032          	movff	tablat,___ftmul@f1+2
  5252  000F02  ECF0  F01A         	call	___ftmul	;wreg free
  5253  000F06  C030  F042         	movff	?___ftmul,_scale$2752
  5254  000F0A  C031  F043         	movff	?___ftmul+1,_scale$2752+1
  5255  000F0E  C032  F044         	movff	?___ftmul+2,_scale$2752+2
  5256                           
  5257                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  5258  000F12  C042  F030         	movff	_scale$2752,___ftmul@f1
  5259  000F16  C043  F031         	movff	_scale$2752+1,___ftmul@f1+1
  5260  000F1A  C044  F032         	movff	_scale$2752+2,___ftmul@f1+2
  5261  000F1E  0E00               	movlw	0
  5262  000F20  6E2D               	movwf	___wmul@multiplicand+1,c
  5263  000F22  0E03               	movlw	3
  5264  000F24  6E2C               	movwf	___wmul@multiplicand,c
  5265  000F26  0E00               	movlw	0
  5266  000F28  6E1F               	movwf	___awmod@divisor+1,c
  5267  000F2A  0E0A               	movlw	10
  5268  000F2C  6E1E               	movwf	___awmod@divisor,c
  5269  000F2E  5045               	movf	scale@scl,w,c
  5270  000F30  6E1C               	movwf	___awmod@dividend,c
  5271  000F32  6A1D               	clrf	___awmod@dividend+1,c
  5272  000F34  BE1C               	btfsc	___awmod@dividend,7,c
  5273  000F36  061D               	decf	___awmod@dividend+1,f,c
  5274  000F38  ECC8  F01F         	call	___awmod	;wreg free
  5275  000F3C  C01C  F02A         	movff	?___awmod,___wmul@multiplier
  5276  000F40  C01D  F02B         	movff	?___awmod+1,___wmul@multiplier+1
  5277  000F44  ECC3  F024         	call	___wmul	;wreg free
  5278  000F48  0EE3               	movlw	low __powers_
  5279  000F4A  242A               	addwf	?___wmul,w,c
  5280  000F4C  6EF6               	movwf	tblptrl,c
  5281  000F4E  0EFE               	movlw	high __powers_
  5282  000F50  202B               	addwfc	?___wmul+1,w,c
  5283  000F52  6EF7               	movwf	tblptrh,c
  5284  000F54                     	if	0	;There are less than 3 active tblptr bytes
  5285  000F54                     	endif
  5286  000F54  0009               	tblrd		*+
  5287  000F56  CFF5 F033          	movff	tablat,___ftmul@f2
  5288  000F5A  0009               	tblrd		*+
  5289  000F5C  CFF5 F034          	movff	tablat,___ftmul@f2+1
  5290  000F60  000A               	tblrd		*-
  5291  000F62  CFF5 F035          	movff	tablat,___ftmul@f2+2
  5292  000F66  ECF0  F01A         	call	___ftmul	;wreg free
  5293  000F6A  D053               	goto	L5
  5294  000F6C  D06C               	goto	l855
  5295  000F6E  D059               	goto	l8768
  5296  000F70                     l8762:
  5297                           
  5298                           ;doprnt.c: 438: else if(scl > 10)
  5299  000F70  5045               	movf	scale@scl,w,c
  5300  000F72  0A80               	xorlw	128
  5301  000F74  0F75               	addlw	-139
  5302  000F76  A0D8               	btfss	status,0,c
  5303  000F78  D054               	goto	l8768
  5304                           
  5305                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  5306  000F7A  0E00               	movlw	0
  5307  000F7C  6E25               	movwf	___awdiv@divisor+1,c
  5308  000F7E  0E0A               	movlw	10
  5309  000F80  6E24               	movwf	___awdiv@divisor,c
  5310  000F82  5045               	movf	scale@scl,w,c
  5311  000F84  6E22               	movwf	___awdiv@dividend,c
  5312  000F86  6A23               	clrf	___awdiv@dividend+1,c
  5313  000F88  BE22               	btfsc	___awdiv@dividend,7,c
  5314  000F8A  0623               	decf	___awdiv@dividend+1,f,c
  5315  000F8C  EC92  F01D         	call	___awdiv	;wreg free
  5316  000F90  0E09               	movlw	9
  5317  000F92  2422               	addwf	?___awdiv,w,c
  5318  000F94  6E2A               	movwf	___wmul@multiplier,c
  5319  000F96  0E00               	movlw	0
  5320  000F98  2023               	addwfc	?___awdiv+1,w,c
  5321  000F9A  6E2B               	movwf	___wmul@multiplier+1,c
  5322  000F9C  0E00               	movlw	0
  5323  000F9E  6E2D               	movwf	___wmul@multiplicand+1,c
  5324  000FA0  0E03               	movlw	3
  5325  000FA2  6E2C               	movwf	___wmul@multiplicand,c
  5326  000FA4  ECC3  F024         	call	___wmul	;wreg free
  5327  000FA8  0EE3               	movlw	low __powers_
  5328  000FAA  242A               	addwf	?___wmul,w,c
  5329  000FAC  6EF6               	movwf	tblptrl,c
  5330  000FAE  0EFE               	movlw	high __powers_
  5331  000FB0  202B               	addwfc	?___wmul+1,w,c
  5332  000FB2  6EF7               	movwf	tblptrh,c
  5333  000FB4                     	if	0	;There are less than 3 active tblptr bytes
  5334  000FB4                     	endif
  5335  000FB4  0009               	tblrd		*+
  5336  000FB6  CFF5 F030          	movff	tablat,___ftmul@f1
  5337  000FBA  0009               	tblrd		*+
  5338  000FBC  CFF5 F031          	movff	tablat,___ftmul@f1+1
  5339  000FC0  000A               	tblrd		*-
  5340  000FC2  CFF5 F032          	movff	tablat,___ftmul@f1+2
  5341  000FC6  0E00               	movlw	0
  5342  000FC8  6E2D               	movwf	___wmul@multiplicand+1,c
  5343  000FCA  0E03               	movlw	3
  5344  000FCC  6E2C               	movwf	___wmul@multiplicand,c
  5345  000FCE  0E00               	movlw	0
  5346  000FD0  6E1F               	movwf	___awmod@divisor+1,c
  5347  000FD2  0E0A               	movlw	10
  5348  000FD4  6E1E               	movwf	___awmod@divisor,c
  5349  000FD6  5045               	movf	scale@scl,w,c
  5350  000FD8  6E1C               	movwf	___awmod@dividend,c
  5351  000FDA  6A1D               	clrf	___awmod@dividend+1,c
  5352  000FDC  BE1C               	btfsc	___awmod@dividend,7,c
  5353  000FDE  061D               	decf	___awmod@dividend+1,f,c
  5354  000FE0  ECC8  F01F         	call	___awmod	;wreg free
  5355  000FE4  C01C  F02A         	movff	?___awmod,___wmul@multiplier
  5356  000FE8  C01D  F02B         	movff	?___awmod+1,___wmul@multiplier+1
  5357  000FEC  ECC3  F024         	call	___wmul	;wreg free
  5358  000FF0  0EE3               	movlw	low __powers_
  5359  000FF2  242A               	addwf	?___wmul,w,c
  5360  000FF4  6EF6               	movwf	tblptrl,c
  5361  000FF6  0EFE               	movlw	high __powers_
  5362  000FF8  202B               	addwfc	?___wmul+1,w,c
  5363  000FFA  6EF7               	movwf	tblptrh,c
  5364  000FFC                     	if	0	;There are less than 3 active tblptr bytes
  5365  000FFC                     	endif
  5366  000FFC  0009               	tblrd		*+
  5367  000FFE  CFF5 F033          	movff	tablat,___ftmul@f2
  5368  001002  0009               	tblrd		*+
  5369  001004  CFF5 F034          	movff	tablat,___ftmul@f2+1
  5370  001008  000A               	tblrd		*-
  5371  00100A  CFF5 F035          	movff	tablat,___ftmul@f2+2
  5372  00100E  ECF0  F01A         	call	___ftmul	;wreg free
  5373  001012                     L5:
  5374  001012  C030  F03F         	movff	?___ftmul,?_scale
  5375  001016  C031  F040         	movff	?___ftmul+1,?_scale+1
  5376  00101A  C032  F041         	movff	?___ftmul+2,?_scale+2
  5377  00101E  D013               	goto	l855
  5378  001020  D000               	goto	l8768
  5379  001022                     l8768:
  5380                           
  5381                           ;doprnt.c: 440: return _powers_[scl];
  5382  001022  5045               	movf	scale@scl,w,c
  5383  001024  0D03               	mullw	3
  5384  001026  0EE3               	movlw	low __powers_
  5385  001028  24F3               	addwf	prodl,w,c
  5386  00102A  6EF6               	movwf	tblptrl,c
  5387  00102C  0EFE               	movlw	high __powers_
  5388  00102E                     L4:
  5389  00102E  20F4               	addwfc	prodh,w,c
  5390  001030  6EF7               	movwf	tblptrh,c
  5391  001032                     	if	0	;There are less than 3 active tblptr bytes
  5392  001032                     	endif
  5393  001032  0009               	tblrd		*+
  5394  001034  CFF5 F03F          	movff	tablat,?_scale
  5395  001038  0009               	tblrd		*+
  5396  00103A  CFF5 F040          	movff	tablat,?_scale+1
  5397  00103E  000A               	tblrd		*-
  5398  001040  CFF5 F041          	movff	tablat,?_scale+2
  5399  001044  D000               	goto	l855
  5400  001046                     l855:
  5401  001046  0012               	return		;funcret
  5402  001048                     __end_of_scale:
  5403                           	opt stack 0
  5404                           tblptru	equ	0xFF8
  5405                           tblptrh	equ	0xFF7
  5406                           tblptrl	equ	0xFF6
  5407                           tablat	equ	0xFF5
  5408                           prodh	equ	0xFF4
  5409                           prodl	equ	0xFF3
  5410                           intcon	equ	0xFF2
  5411                           intcon2	equ	0xFF1
  5412                           intcon3	equ	0xFF0
  5413                           postinc0	equ	0xFEE
  5414                           wreg	equ	0xFE8
  5415                           postdec1	equ	0xFE5
  5416                           fsr1l	equ	0xFE1
  5417                           postinc2	equ	0xFDE
  5418                           postdec2	equ	0xFDD
  5419                           fsr2h	equ	0xFDA
  5420                           fsr2l	equ	0xFD9
  5421                           status	equ	0xFD8
  5422                           
  5423 ;; *************** function _putch *****************
  5424 ;; Defined at:
  5425 ;;		line 1615 in file "lab_final_alt.c"
  5426 ;; Parameters:    Size  Location     Type
  5427 ;;  c               1    wreg     unsigned char 
  5428 ;; Auto vars:     Size  Location     Type
  5429 ;;  c               1   27[COMRAM] unsigned char 
  5430 ;; Return value:  Size  Location     Type
  5431 ;;		None               void
  5432 ;; Registers used:
  5433 ;;		wreg
  5434 ;; Tracked objects:
  5435 ;;		On entry : 0/0
  5436 ;;		On exit  : 0/0
  5437 ;;		Unchanged: 0/0
  5438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5439 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5440 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5441 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5442 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5443 ;;Total ram usage:        1 bytes
  5444 ;; Hardware stack levels used:    1
  5445 ;; Hardware stack levels required when called:    5
  5446 ;; This function calls:
  5447 ;;		Nothing
  5448 ;; This function is called by:
  5449 ;;		_printf
  5450 ;; This function uses a non-reentrant model
  5451 ;;
  5452                           
  5453                           	psect	text3
  5454  004C22                     __ptext3:
  5455                           	opt stack 0
  5456  004C22                     _putch:
  5457                           	opt stack 24
  5458                           
  5459                           ;incstack = 0
  5460                           ;putch@c stored from wreg
  5461  004C22  6E1C               	movwf	putch@c,c
  5462                           
  5463                           ;lab_final_alt.c: 1617: while (!TRMT);
  5464  004C24  D000               	goto	l559
  5465  004C26                     l559:
  5466  004C26  A2AC               	btfss	4012,1,c	;volatile
  5467  004C28  D7FE               	goto	l559
  5468                           
  5469                           ;lab_final_alt.c: 1618: TXREG = c;
  5470  004C2A  C01C  FFAD         	movff	putch@c,4013	;volatile
  5471  004C2E  0012               	return		;funcret
  5472  004C30                     __end_of_putch:
  5473                           	opt stack 0
  5474                           tblptru	equ	0xFF8
  5475                           tblptrh	equ	0xFF7
  5476                           tblptrl	equ	0xFF6
  5477                           tablat	equ	0xFF5
  5478                           prodh	equ	0xFF4
  5479                           prodl	equ	0xFF3
  5480                           intcon	equ	0xFF2
  5481                           intcon2	equ	0xFF1
  5482                           intcon3	equ	0xFF0
  5483                           postinc0	equ	0xFEE
  5484                           wreg	equ	0xFE8
  5485                           postdec1	equ	0xFE5
  5486                           fsr1l	equ	0xFE1
  5487                           postinc2	equ	0xFDE
  5488                           postdec2	equ	0xFDD
  5489                           fsr2h	equ	0xFDA
  5490                           fsr2l	equ	0xFD9
  5491                           status	equ	0xFD8
  5492                           
  5493 ;; *************** function _isdigit *****************
  5494 ;; Defined at:
  5495 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\isdigit.c"
  5496 ;; Parameters:    Size  Location     Type
  5497 ;;  c               1    wreg     unsigned char 
  5498 ;; Auto vars:     Size  Location     Type
  5499 ;;  c               1   29[COMRAM] unsigned char 
  5500 ;; Return value:  Size  Location     Type
  5501 ;;		None               void
  5502 ;; Registers used:
  5503 ;;		wreg, status,2, status,0
  5504 ;; Tracked objects:
  5505 ;;		On entry : 0/0
  5506 ;;		On exit  : 0/0
  5507 ;;		Unchanged: 0/0
  5508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5509 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5510 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5511 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5512 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5513 ;;Total ram usage:        3 bytes
  5514 ;; Hardware stack levels used:    1
  5515 ;; Hardware stack levels required when called:    5
  5516 ;; This function calls:
  5517 ;;		Nothing
  5518 ;; This function is called by:
  5519 ;;		_printf
  5520 ;; This function uses a non-reentrant model
  5521 ;;
  5522                           
  5523                           	psect	text4
  5524  004AB6                     __ptext4:
  5525                           	opt stack 0
  5526  004AB6                     _isdigit:
  5527                           	opt stack 24
  5528                           
  5529                           ;incstack = 0
  5530                           ;isdigit@c stored from wreg
  5531  004AB6  6E1E               	movwf	isdigit@c,c
  5532  004AB8  0E00               	movlw	0
  5533  004ABA  6E1D               	movwf	_isdigit$2411,c
  5534  004ABC  0E3A               	movlw	58
  5535  004ABE  601E               	cpfslt	isdigit@c,c
  5536  004AC0  D006               	goto	l8780
  5537  004AC2  0E2F               	movlw	47
  5538  004AC4  641E               	cpfsgt	isdigit@c,c
  5539  004AC6  D003               	goto	l8780
  5540  004AC8  0E01               	movlw	1
  5541  004ACA  6E1D               	movwf	_isdigit$2411,c
  5542  004ACC  D000               	goto	l8780
  5543  004ACE                     l8780:
  5544  004ACE  C01D  F01C         	movff	_isdigit$2411,??_isdigit
  5545  004AD2  301C               	rrcf	??_isdigit,w,c
  5546  004AD4  D000               	goto	l1467
  5547  004AD6                     l1467:
  5548  004AD6  0012               	return		;funcret
  5549  004AD8                     __end_of_isdigit:
  5550                           	opt stack 0
  5551                           tblptru	equ	0xFF8
  5552                           tblptrh	equ	0xFF7
  5553                           tblptrl	equ	0xFF6
  5554                           tablat	equ	0xFF5
  5555                           prodh	equ	0xFF4
  5556                           prodl	equ	0xFF3
  5557                           intcon	equ	0xFF2
  5558                           intcon2	equ	0xFF1
  5559                           intcon3	equ	0xFF0
  5560                           postinc0	equ	0xFEE
  5561                           wreg	equ	0xFE8
  5562                           postdec1	equ	0xFE5
  5563                           fsr1l	equ	0xFE1
  5564                           postinc2	equ	0xFDE
  5565                           postdec2	equ	0xFDD
  5566                           fsr2h	equ	0xFDA
  5567                           fsr2l	equ	0xFD9
  5568                           status	equ	0xFD8
  5569                           
  5570 ;; *************** function _fround *****************
  5571 ;; Defined at:
  5572 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  5573 ;; Parameters:    Size  Location     Type
  5574 ;;  prec            1    wreg     unsigned char 
  5575 ;; Auto vars:     Size  Location     Type
  5576 ;;  prec            1   71[COMRAM] unsigned char 
  5577 ;; Return value:  Size  Location     Type
  5578 ;;                  3   62[COMRAM] unsigned char 
  5579 ;; Registers used:
  5580 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5581 ;; Tracked objects:
  5582 ;;		On entry : 0/0
  5583 ;;		On exit  : 0/0
  5584 ;;		Unchanged: 0/0
  5585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5586 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5587 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5588 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5589 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5590 ;;Total ram usage:       10 bytes
  5591 ;; Hardware stack levels used:    1
  5592 ;; Hardware stack levels required when called:    7
  5593 ;; This function calls:
  5594 ;;		___awdiv
  5595 ;;		___awmod
  5596 ;;		___ftmul
  5597 ;;		___wmul
  5598 ;; This function is called by:
  5599 ;;		_printf
  5600 ;; This function uses a non-reentrant model
  5601 ;;
  5602                           
  5603                           	psect	text5
  5604  001F72                     __ptext5:
  5605                           	opt stack 0
  5606  001F72                     _fround:
  5607                           	opt stack 22
  5608                           
  5609                           ;incstack = 0
  5610                           ;fround@prec stored from wreg
  5611  001F72  6E48               	movwf	fround@prec,c
  5612                           
  5613                           ;doprnt.c: 413: if(prec>=110)
  5614  001F74  0E6D               	movlw	109
  5615  001F76  6448               	cpfsgt	fround@prec,c
  5616  001F78  D09B               	goto	l8722
  5617                           
  5618                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  5619  001F7A  0E00               	movlw	0
  5620  001F7C  6E2D               	movwf	___wmul@multiplicand+1,c
  5621  001F7E  0E03               	movlw	3
  5622  001F80  6E2C               	movwf	___wmul@multiplicand,c
  5623  001F82  0E00               	movlw	0
  5624  001F84  6E25               	movwf	___awdiv@divisor+1,c
  5625  001F86  0E0A               	movlw	10
  5626  001F88  6E24               	movwf	___awdiv@divisor,c
  5627  001F8A  0E00               	movlw	0
  5628  001F8C  6E1F               	movwf	___awmod@divisor+1,c
  5629  001F8E  0E64               	movlw	100
  5630  001F90  6E1E               	movwf	___awmod@divisor,c
  5631  001F92  C048  F01C         	movff	fround@prec,___awmod@dividend
  5632  001F96  6A1D               	clrf	___awmod@dividend+1,c
  5633  001F98  ECC8  F01F         	call	___awmod	;wreg free
  5634  001F9C  C01C  F022         	movff	?___awmod,___awdiv@dividend
  5635  001FA0  C01D  F023         	movff	?___awmod+1,___awdiv@dividend+1
  5636  001FA4  EC92  F01D         	call	___awdiv	;wreg free
  5637  001FA8  0E09               	movlw	9
  5638  001FAA  2422               	addwf	?___awdiv,w,c
  5639  001FAC  6E2A               	movwf	___wmul@multiplier,c
  5640  001FAE  0E00               	movlw	0
  5641  001FB0  2023               	addwfc	?___awdiv+1,w,c
  5642  001FB2  6E2B               	movwf	___wmul@multiplier+1,c
  5643  001FB4  ECC3  F024         	call	___wmul	;wreg free
  5644  001FB8  0EBC               	movlw	low __npowers_
  5645  001FBA  242A               	addwf	?___wmul,w,c
  5646  001FBC  6EF6               	movwf	tblptrl,c
  5647  001FBE  0EFE               	movlw	high __npowers_
  5648  001FC0  202B               	addwfc	?___wmul+1,w,c
  5649  001FC2  6EF7               	movwf	tblptrh,c
  5650  001FC4                     	if	0	;There are less than 3 active tblptr bytes
  5651  001FC4                     	endif
  5652  001FC4  0009               	tblrd		*+
  5653  001FC6  CFF5 F033          	movff	tablat,___ftmul@f2
  5654  001FCA  0009               	tblrd		*+
  5655  001FCC  CFF5 F034          	movff	tablat,___ftmul@f2+1
  5656  001FD0  000A               	tblrd		*-
  5657  001FD2  CFF5 F035          	movff	tablat,___ftmul@f2+2
  5658  001FD6  0E00               	movlw	0
  5659  001FD8  6E25               	movwf	___awdiv@divisor+1,c
  5660  001FDA  0E64               	movlw	100
  5661  001FDC  6E24               	movwf	___awdiv@divisor,c
  5662  001FDE  C048  F022         	movff	fround@prec,___awdiv@dividend
  5663  001FE2  6A23               	clrf	___awdiv@dividend+1,c
  5664  001FE4  EC92  F01D         	call	___awdiv	;wreg free
  5665  001FE8  0E12               	movlw	18
  5666  001FEA  2422               	addwf	?___awdiv,w,c
  5667  001FEC  6E2A               	movwf	___wmul@multiplier,c
  5668  001FEE  0E00               	movlw	0
  5669  001FF0  2023               	addwfc	?___awdiv+1,w,c
  5670  001FF2  6E2B               	movwf	___wmul@multiplier+1,c
  5671  001FF4  0E00               	movlw	0
  5672  001FF6  6E2D               	movwf	___wmul@multiplicand+1,c
  5673  001FF8  0E03               	movlw	3
  5674  001FFA  6E2C               	movwf	___wmul@multiplicand,c
  5675  001FFC  ECC3  F024         	call	___wmul	;wreg free
  5676  002000  0EBC               	movlw	low __npowers_
  5677  002002  242A               	addwf	?___wmul,w,c
  5678  002004  6EF6               	movwf	tblptrl,c
  5679  002006  0EFE               	movlw	high __npowers_
  5680  002008  202B               	addwfc	?___wmul+1,w,c
  5681  00200A  6EF7               	movwf	tblptrh,c
  5682  00200C                     	if	0	;There are less than 3 active tblptr bytes
  5683  00200C                     	endif
  5684  00200C  0009               	tblrd		*+
  5685  00200E  CFF5 F030          	movff	tablat,___ftmul@f1
  5686  002012  0009               	tblrd		*+
  5687  002014  CFF5 F031          	movff	tablat,___ftmul@f1+1
  5688  002018  000A               	tblrd		*-
  5689  00201A  CFF5 F032          	movff	tablat,___ftmul@f1+2
  5690  00201E  ECF0  F01A         	call	___ftmul	;wreg free
  5691  002022  C030  F045         	movff	?___ftmul,_fround$2750
  5692  002026  C031  F046         	movff	?___ftmul+1,_fround$2750+1
  5693  00202A  C032  F047         	movff	?___ftmul+2,_fround$2750+2
  5694                           
  5695                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  5696  00202E  0E00               	movlw	0
  5697  002030  6E2D               	movwf	___wmul@multiplicand+1,c
  5698  002032  0E03               	movlw	3
  5699  002034  6E2C               	movwf	___wmul@multiplicand,c
  5700  002036  0E00               	movlw	0
  5701  002038  6E1F               	movwf	___awmod@divisor+1,c
  5702  00203A  0E0A               	movlw	10
  5703  00203C  6E1E               	movwf	___awmod@divisor,c
  5704  00203E  C048  F01C         	movff	fround@prec,___awmod@dividend
  5705  002042  6A1D               	clrf	___awmod@dividend+1,c
  5706  002044  ECC8  F01F         	call	___awmod	;wreg free
  5707  002048  C01C  F02A         	movff	?___awmod,___wmul@multiplier
  5708  00204C  C01D  F02B         	movff	?___awmod+1,___wmul@multiplier+1
  5709  002050  ECC3  F024         	call	___wmul	;wreg free
  5710  002054  0EBC               	movlw	low __npowers_
  5711  002056  242A               	addwf	?___wmul,w,c
  5712  002058  6EF6               	movwf	tblptrl,c
  5713  00205A  0EFE               	movlw	high __npowers_
  5714  00205C  202B               	addwfc	?___wmul+1,w,c
  5715  00205E  6EF7               	movwf	tblptrh,c
  5716  002060                     	if	0	;There are less than 3 active tblptr bytes
  5717  002060                     	endif
  5718  002060  0009               	tblrd		*+
  5719  002062  CFF5 F033          	movff	tablat,___ftmul@f2
  5720  002066  0009               	tblrd		*+
  5721  002068  CFF5 F034          	movff	tablat,___ftmul@f2+1
  5722  00206C  000A               	tblrd		*-
  5723  00206E  CFF5 F035          	movff	tablat,___ftmul@f2+2
  5724  002072  C045  F030         	movff	_fround$2750,___ftmul@f1
  5725  002076  C046  F031         	movff	_fround$2750+1,___ftmul@f1+1
  5726  00207A  C047  F032         	movff	_fround$2750+2,___ftmul@f1+2
  5727  00207E  ECF0  F01A         	call	___ftmul	;wreg free
  5728  002082  C030  F042         	movff	?___ftmul,_fround$2751
  5729  002086  C031  F043         	movff	?___ftmul+1,_fround$2751+1
  5730  00208A  C032  F044         	movff	?___ftmul+2,_fround$2751+2
  5731                           
  5732                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  5733  00208E  C042  F030         	movff	_fround$2751,___ftmul@f1
  5734  002092  C043  F031         	movff	_fround$2751+1,___ftmul@f1+1
  5735  002096  C044  F032         	movff	_fround$2751+2,___ftmul@f1+2
  5736  00209A  0E00               	movlw	0
  5737  00209C  6E33               	movwf	___ftmul@f2,c
  5738  00209E  0E00               	movlw	0
  5739  0020A0  6E34               	movwf	___ftmul@f2+1,c
  5740  0020A2  0E3F               	movlw	63
  5741  0020A4  6E35               	movwf	___ftmul@f2+2,c
  5742  0020A6  ECF0  F01A         	call	___ftmul	;wreg free
  5743  0020AA  D07D               	goto	L7
  5744  0020AC  D083               	goto	l848
  5745  0020AE  D062               	goto	l8730
  5746  0020B0                     l8722:
  5747                           
  5748                           ;doprnt.c: 415: else if(prec > 10)
  5749  0020B0  0E0A               	movlw	10
  5750  0020B2  6448               	cpfsgt	fround@prec,c
  5751  0020B4  D05F               	goto	l8730
  5752                           
  5753                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  5754  0020B6  0E00               	movlw	0
  5755  0020B8  6E2D               	movwf	___wmul@multiplicand+1,c
  5756  0020BA  0E03               	movlw	3
  5757  0020BC  6E2C               	movwf	___wmul@multiplicand,c
  5758  0020BE  0E00               	movlw	0
  5759  0020C0  6E1F               	movwf	___awmod@divisor+1,c
  5760  0020C2  0E0A               	movlw	10
  5761  0020C4  6E1E               	movwf	___awmod@divisor,c
  5762  0020C6  C048  F01C         	movff	fround@prec,___awmod@dividend
  5763  0020CA  6A1D               	clrf	___awmod@dividend+1,c
  5764  0020CC  ECC8  F01F         	call	___awmod	;wreg free
  5765  0020D0  C01C  F02A         	movff	?___awmod,___wmul@multiplier
  5766  0020D4  C01D  F02B         	movff	?___awmod+1,___wmul@multiplier+1
  5767  0020D8  ECC3  F024         	call	___wmul	;wreg free
  5768  0020DC  0EBC               	movlw	low __npowers_
  5769  0020DE  242A               	addwf	?___wmul,w,c
  5770  0020E0  6EF6               	movwf	tblptrl,c
  5771  0020E2  0EFE               	movlw	high __npowers_
  5772  0020E4  202B               	addwfc	?___wmul+1,w,c
  5773  0020E6  6EF7               	movwf	tblptrh,c
  5774  0020E8                     	if	0	;There are less than 3 active tblptr bytes
  5775  0020E8                     	endif
  5776  0020E8  0009               	tblrd		*+
  5777  0020EA  CFF5 F033          	movff	tablat,___ftmul@f2
  5778  0020EE  0009               	tblrd		*+
  5779  0020F0  CFF5 F034          	movff	tablat,___ftmul@f2+1
  5780  0020F4  000A               	tblrd		*-
  5781  0020F6  CFF5 F035          	movff	tablat,___ftmul@f2+2
  5782  0020FA  0E00               	movlw	0
  5783  0020FC  6E25               	movwf	___awdiv@divisor+1,c
  5784  0020FE  0E0A               	movlw	10
  5785  002100  6E24               	movwf	___awdiv@divisor,c
  5786  002102  C048  F022         	movff	fround@prec,___awdiv@dividend
  5787  002106  6A23               	clrf	___awdiv@dividend+1,c
  5788  002108  EC92  F01D         	call	___awdiv	;wreg free
  5789  00210C  0E09               	movlw	9
  5790  00210E  2422               	addwf	?___awdiv,w,c
  5791  002110  6E2A               	movwf	___wmul@multiplier,c
  5792  002112  0E00               	movlw	0
  5793  002114  2023               	addwfc	?___awdiv+1,w,c
  5794  002116  6E2B               	movwf	___wmul@multiplier+1,c
  5795  002118  0E00               	movlw	0
  5796  00211A  6E2D               	movwf	___wmul@multiplicand+1,c
  5797  00211C  0E03               	movlw	3
  5798  00211E  6E2C               	movwf	___wmul@multiplicand,c
  5799  002120  ECC3  F024         	call	___wmul	;wreg free
  5800  002124  0EBC               	movlw	low __npowers_
  5801  002126  242A               	addwf	?___wmul,w,c
  5802  002128  6EF6               	movwf	tblptrl,c
  5803  00212A  0EFE               	movlw	high __npowers_
  5804  00212C  202B               	addwfc	?___wmul+1,w,c
  5805  00212E  6EF7               	movwf	tblptrh,c
  5806  002130                     	if	0	;There are less than 3 active tblptr bytes
  5807  002130                     	endif
  5808  002130  0009               	tblrd		*+
  5809  002132  CFF5 F030          	movff	tablat,___ftmul@f1
  5810  002136  0009               	tblrd		*+
  5811  002138  CFF5 F031          	movff	tablat,___ftmul@f1+1
  5812  00213C  000A               	tblrd		*-
  5813  00213E  CFF5 F032          	movff	tablat,___ftmul@f1+2
  5814  002142  ECF0  F01A         	call	___ftmul	;wreg free
  5815  002146  C030  F045         	movff	?___ftmul,_fround$2750
  5816  00214A  C031  F046         	movff	?___ftmul+1,_fround$2750+1
  5817  00214E  C032  F047         	movff	?___ftmul+2,_fround$2750+2
  5818                           
  5819                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  5820  002152  C045  F030         	movff	_fround$2750,___ftmul@f1
  5821  002156  C046  F031         	movff	_fround$2750+1,___ftmul@f1+1
  5822  00215A  C047  F032         	movff	_fround$2750+2,___ftmul@f1+2
  5823  00215E  0E00               	movlw	0
  5824  002160  6E33               	movwf	___ftmul@f2,c
  5825  002162  0E00               	movlw	0
  5826  002164  6E34               	movwf	___ftmul@f2+1,c
  5827  002166  0E3F               	movlw	63
  5828  002168  6E35               	movwf	___ftmul@f2+2,c
  5829  00216A  ECF0  F01A         	call	___ftmul	;wreg free
  5830  00216E  D01B               	goto	L7
  5831  002170  D021               	goto	l848
  5832  002172  D000               	goto	l8730
  5833  002174                     l8730:
  5834                           
  5835                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  5836  002174  5048               	movf	fround@prec,w,c
  5837  002176  0D03               	mullw	3
  5838  002178  0EBC               	movlw	low __npowers_
  5839  00217A  24F3               	addwf	prodl,w,c
  5840  00217C  6EF6               	movwf	tblptrl,c
  5841  00217E  0EFE               	movlw	high __npowers_
  5842  002180  20F4               	addwfc	prodh,w,c
  5843  002182  6EF7               	movwf	tblptrh,c
  5844  002184                     	if	0	;There are less than 3 active tblptr bytes
  5845  002184                     	endif
  5846  002184  0009               	tblrd		*+
  5847  002186  CFF5 F030          	movff	tablat,___ftmul@f1
  5848  00218A  0009               	tblrd		*+
  5849  00218C  CFF5 F031          	movff	tablat,___ftmul@f1+1
  5850  002190  000A               	tblrd		*-
  5851  002192  CFF5 F032          	movff	tablat,___ftmul@f1+2
  5852  002196  0E00               	movlw	0
  5853  002198  6E33               	movwf	___ftmul@f2,c
  5854  00219A  0E00               	movlw	0
  5855  00219C  6E34               	movwf	___ftmul@f2+1,c
  5856  00219E  0E3F               	movlw	63
  5857  0021A0  6E35               	movwf	___ftmul@f2+2,c
  5858  0021A2  ECF0  F01A         	call	___ftmul	;wreg free
  5859  0021A6                     L7:
  5860  0021A6  C030  F03F         	movff	?___ftmul,?_fround
  5861  0021AA  C031  F040         	movff	?___ftmul+1,?_fround+1
  5862  0021AE  C032  F041         	movff	?___ftmul+2,?_fround+2
  5863  0021B2  D000               	goto	l848
  5864  0021B4                     l848:
  5865  0021B4  0012               	return		;funcret
  5866  0021B6                     __end_of_fround:
  5867                           	opt stack 0
  5868                           tblptru	equ	0xFF8
  5869                           tblptrh	equ	0xFF7
  5870                           tblptrl	equ	0xFF6
  5871                           tablat	equ	0xFF5
  5872                           prodh	equ	0xFF4
  5873                           prodl	equ	0xFF3
  5874                           intcon	equ	0xFF2
  5875                           intcon2	equ	0xFF1
  5876                           intcon3	equ	0xFF0
  5877                           postinc0	equ	0xFEE
  5878                           wreg	equ	0xFE8
  5879                           postdec1	equ	0xFE5
  5880                           fsr1l	equ	0xFE1
  5881                           postinc2	equ	0xFDE
  5882                           postdec2	equ	0xFDD
  5883                           fsr2h	equ	0xFDA
  5884                           fsr2l	equ	0xFD9
  5885                           status	equ	0xFD8
  5886                           
  5887 ;; *************** function __tdiv_to_l_ *****************
  5888 ;; Defined at:
  5889 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftdivl.c"
  5890 ;; Parameters:    Size  Location     Type
  5891 ;;  f1              3   27[COMRAM] float 
  5892 ;;  f2              3   30[COMRAM] float 
  5893 ;; Auto vars:     Size  Location     Type
  5894 ;;  quot            4   36[COMRAM] unsigned long 
  5895 ;;  exp1            1   41[COMRAM] unsigned char 
  5896 ;;  cntr            1   40[COMRAM] unsigned char 
  5897 ;; Return value:  Size  Location     Type
  5898 ;;                  4   27[COMRAM] unsigned long 
  5899 ;; Registers used:
  5900 ;;		wreg, status,2, status,0
  5901 ;; Tracked objects:
  5902 ;;		On entry : 0/0
  5903 ;;		On exit  : 0/0
  5904 ;;		Unchanged: 0/0
  5905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5906 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5907 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5908 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5909 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5910 ;;Total ram usage:       15 bytes
  5911 ;; Hardware stack levels used:    1
  5912 ;; Hardware stack levels required when called:    5
  5913 ;; This function calls:
  5914 ;;		Nothing
  5915 ;; This function is called by:
  5916 ;;		_printf
  5917 ;; This function uses a non-reentrant model
  5918 ;;
  5919                           
  5920                           	psect	text6
  5921  0030A8                     __ptext6:
  5922                           	opt stack 0
  5923  0030A8                     __tdiv_to_l_:
  5924                           	opt stack 24
  5925                           
  5926                           ;incstack = 0
  5927  0030A8  C01E  F022         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  5928  0030AC  6A23               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  5929  0030AE  6A24               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  5930  0030B0  341D               	rlcf	__tdiv_to_l_@f1+1,w,c
  5931  0030B2  3622               	rlcf	??__tdiv_to_l_& (0+255),f,c
  5932  0030B4  E301               	bnc	u7801
  5933  0030B6  8023               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  5934  0030B8                     u7801:
  5935  0030B8  5022               	movf	??__tdiv_to_l_,w,c
  5936  0030BA  6E2A               	movwf	__tdiv_to_l_@exp1,c
  5937  0030BC  502A               	movf	__tdiv_to_l_@exp1,w,c
  5938  0030BE  A4D8               	btfss	status,2,c
  5939  0030C0  D002               	goto	l8790
  5940  0030C2  D05D               	goto	l8832
  5941  0030C4  D078               	goto	l1407
  5942  0030C6                     l8790:
  5943  0030C6  C021  F022         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  5944  0030CA  6A23               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  5945  0030CC  6A24               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  5946  0030CE  3420               	rlcf	__tdiv_to_l_@f2+1,w,c
  5947  0030D0  3622               	rlcf	??__tdiv_to_l_& (0+255),f,c
  5948  0030D2  E301               	bnc	u7821
  5949  0030D4  8023               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  5950  0030D6                     u7821:
  5951  0030D6  5022               	movf	??__tdiv_to_l_,w,c
  5952  0030D8  6E29               	movwf	__tdiv_to_l_@cntr,c
  5953  0030DA  5029               	movf	__tdiv_to_l_@cntr,w,c
  5954  0030DC  A4D8               	btfss	status,2,c
  5955  0030DE  D002               	goto	l8796
  5956  0030E0  D04E               	goto	l8832
  5957  0030E2  D069               	goto	l1407
  5958  0030E4                     l8796:
  5959  0030E4  8E1D               	bsf	__tdiv_to_l_@f1+1,7,c
  5960  0030E6  0EFF               	movlw	255
  5961  0030E8  161C               	andwf	__tdiv_to_l_@f1,f,c
  5962  0030EA  0EFF               	movlw	255
  5963  0030EC  161D               	andwf	__tdiv_to_l_@f1+1,f,c
  5964  0030EE  0E00               	movlw	0
  5965  0030F0  161E               	andwf	__tdiv_to_l_@f1+2,f,c
  5966  0030F2  8E20               	bsf	__tdiv_to_l_@f2+1,7,c
  5967  0030F4  0EFF               	movlw	255
  5968  0030F6  161F               	andwf	__tdiv_to_l_@f2,f,c
  5969  0030F8  0EFF               	movlw	255
  5970  0030FA  1620               	andwf	__tdiv_to_l_@f2+1,f,c
  5971  0030FC  0E00               	movlw	0
  5972  0030FE  1621               	andwf	__tdiv_to_l_@f2+2,f,c
  5973  003100  0E00               	movlw	0
  5974  003102  6E25               	movwf	__tdiv_to_l_@quot,c
  5975  003104  0E00               	movlw	0
  5976  003106  6E26               	movwf	__tdiv_to_l_@quot+1,c
  5977  003108  0E00               	movlw	0
  5978  00310A  6E27               	movwf	__tdiv_to_l_@quot+2,c
  5979  00310C  0E00               	movlw	0
  5980  00310E  6E28               	movwf	__tdiv_to_l_@quot+3,c
  5981  003110  0E7F               	movlw	127
  5982  003112  5E2A               	subwf	__tdiv_to_l_@exp1,f,c
  5983  003114  5029               	movf	__tdiv_to_l_@cntr,w,c
  5984  003116  0F98               	addlw	152
  5985  003118  5E2A               	subwf	__tdiv_to_l_@exp1,f,c
  5986  00311A  0E18               	movlw	24
  5987  00311C  6E29               	movwf	__tdiv_to_l_@cntr,c
  5988  00311E                     l1409:
  5989  00311E  90D8               	bcf	status,0,c
  5990  003120  3625               	rlcf	__tdiv_to_l_@quot,f,c
  5991  003122  3626               	rlcf	__tdiv_to_l_@quot+1,f,c
  5992  003124  3627               	rlcf	__tdiv_to_l_@quot+2,f,c
  5993  003126  3628               	rlcf	__tdiv_to_l_@quot+3,f,c
  5994  003128  501F               	movf	__tdiv_to_l_@f2,w,c
  5995  00312A  5C1C               	subwf	__tdiv_to_l_@f1,w,c
  5996  00312C  5020               	movf	__tdiv_to_l_@f2+1,w,c
  5997  00312E  581D               	subwfb	__tdiv_to_l_@f1+1,w,c
  5998  003130  5021               	movf	__tdiv_to_l_@f2+2,w,c
  5999  003132  581E               	subwfb	__tdiv_to_l_@f1+2,w,c
  6000  003134  A0D8               	btfss	status,0,c
  6001  003136  D007               	goto	l1410
  6002  003138  501F               	movf	__tdiv_to_l_@f2,w,c
  6003  00313A  5E1C               	subwf	__tdiv_to_l_@f1,f,c
  6004  00313C  5020               	movf	__tdiv_to_l_@f2+1,w,c
  6005  00313E  5A1D               	subwfb	__tdiv_to_l_@f1+1,f,c
  6006  003140  5021               	movf	__tdiv_to_l_@f2+2,w,c
  6007  003142  5A1E               	subwfb	__tdiv_to_l_@f1+2,f,c
  6008  003144  8025               	bsf	__tdiv_to_l_@quot,0,c
  6009  003146                     l1410:
  6010  003146  90D8               	bcf	status,0,c
  6011  003148  361C               	rlcf	__tdiv_to_l_@f1,f,c
  6012  00314A  361D               	rlcf	__tdiv_to_l_@f1+1,f,c
  6013  00314C  361E               	rlcf	__tdiv_to_l_@f1+2,f,c
  6014  00314E  2E29               	decfsz	__tdiv_to_l_@cntr,f,c
  6015  003150  D7E6               	goto	l1409
  6016  003152  D000               	goto	l8818
  6017  003154                     l8818:
  6018  003154  AE2A               	btfss	__tdiv_to_l_@exp1,7,c
  6019  003156  D010               	goto	l8830
  6020  003158  502A               	movf	__tdiv_to_l_@exp1,w,c
  6021  00315A  0A80               	xorlw	128
  6022  00315C  0F97               	addlw	151
  6023  00315E  B0D8               	btfsc	status,0,c
  6024  003160  D003               	goto	l8826
  6025  003162  D00D               	goto	l8832
  6026  003164  D028               	goto	l1407
  6027  003166  D000               	goto	l8826
  6028  003168                     l8826:
  6029  003168  90D8               	bcf	status,0,c
  6030  00316A  3228               	rrcf	__tdiv_to_l_@quot+3,f,c
  6031  00316C  3227               	rrcf	__tdiv_to_l_@quot+2,f,c
  6032  00316E  3226               	rrcf	__tdiv_to_l_@quot+1,f,c
  6033  003170  3225               	rrcf	__tdiv_to_l_@quot,f,c
  6034  003172  3E2A               	incfsz	__tdiv_to_l_@exp1,f,c
  6035  003174  D7F9               	goto	l8826
  6036  003176  D017               	goto	l1416
  6037  003178                     l8830:
  6038  003178  0E17               	movlw	23
  6039  00317A  642A               	cpfsgt	__tdiv_to_l_@exp1,c
  6040  00317C  D011               	goto	l8838
  6041  00317E                     l8832:
  6042  00317E  0E00               	movlw	0
  6043  003180  6E1C               	movwf	?__tdiv_to_l_,c
  6044  003182  0E00               	movlw	0
  6045  003184  6E1D               	movwf	?__tdiv_to_l_+1,c
  6046  003186  0E00               	movlw	0
  6047  003188  6E1E               	movwf	?__tdiv_to_l_+2,c
  6048  00318A  0E00               	movlw	0
  6049  00318C  6E1F               	movwf	?__tdiv_to_l_+3,c
  6050  00318E  D013               	goto	l1407
  6051  003190  D007               	goto	l8838
  6052  003192                     l8836:
  6053  003192  90D8               	bcf	status,0,c
  6054  003194  3625               	rlcf	__tdiv_to_l_@quot,f,c
  6055  003196  3626               	rlcf	__tdiv_to_l_@quot+1,f,c
  6056  003198  3627               	rlcf	__tdiv_to_l_@quot+2,f,c
  6057  00319A  3628               	rlcf	__tdiv_to_l_@quot+3,f,c
  6058  00319C  062A               	decf	__tdiv_to_l_@exp1,f,c
  6059  00319E  D000               	goto	l8838
  6060  0031A0                     l8838:
  6061  0031A0  502A               	movf	__tdiv_to_l_@exp1,w,c
  6062  0031A2  A4D8               	btfss	status,2,c
  6063  0031A4  D7F6               	goto	l8836
  6064  0031A6                     l1416:
  6065  0031A6  C025  F01C         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  6066  0031AA  C026  F01D         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  6067  0031AE  C027  F01E         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  6068  0031B2  C028  F01F         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  6069  0031B6                     l1407:
  6070  0031B6  0012               	return		;funcret
  6071  0031B8                     __end_of__tdiv_to_l_:
  6072                           	opt stack 0
  6073                           tblptru	equ	0xFF8
  6074                           tblptrh	equ	0xFF7
  6075                           tblptrl	equ	0xFF6
  6076                           tablat	equ	0xFF5
  6077                           prodh	equ	0xFF4
  6078                           prodl	equ	0xFF3
  6079                           intcon	equ	0xFF2
  6080                           intcon2	equ	0xFF1
  6081                           intcon3	equ	0xFF0
  6082                           postinc0	equ	0xFEE
  6083                           wreg	equ	0xFE8
  6084                           postdec1	equ	0xFE5
  6085                           fsr1l	equ	0xFE1
  6086                           postinc2	equ	0xFDE
  6087                           postdec2	equ	0xFDD
  6088                           fsr2h	equ	0xFDA
  6089                           fsr2l	equ	0xFD9
  6090                           status	equ	0xFD8
  6091                           
  6092 ;; *************** function __div_to_l_ *****************
  6093 ;; Defined at:
  6094 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fldivl.c"
  6095 ;; Parameters:    Size  Location     Type
  6096 ;;  f1              3   27[COMRAM] unsigned long 
  6097 ;;  f2              3   30[COMRAM] unsigned long 
  6098 ;; Auto vars:     Size  Location     Type
  6099 ;;  quot            4   33[COMRAM] unsigned long 
  6100 ;;  exp1            1   38[COMRAM] unsigned char 
  6101 ;;  cntr            1   37[COMRAM] unsigned char 
  6102 ;; Return value:  Size  Location     Type
  6103 ;;                  4   27[COMRAM] unsigned long 
  6104 ;; Registers used:
  6105 ;;		wreg, status,2, status,0
  6106 ;; Tracked objects:
  6107 ;;		On entry : 0/0
  6108 ;;		On exit  : 0/0
  6109 ;;		Unchanged: 0/0
  6110 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6111 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6112 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6113 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6114 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6115 ;;Total ram usage:       12 bytes
  6116 ;; Hardware stack levels used:    1
  6117 ;; Hardware stack levels required when called:    5
  6118 ;; This function calls:
  6119 ;;		Nothing
  6120 ;; This function is called by:
  6121 ;;		_printf
  6122 ;; This function uses a non-reentrant model
  6123 ;;
  6124                           
  6125                           	psect	text7
  6126  0033D6                     __ptext7:
  6127                           	opt stack 0
  6128  0033D6                     __div_to_l_:
  6129                           	opt stack 24
  6130                           
  6131                           ;incstack = 0
  6132  0033D6  341E               	rlcf	__div_to_l_@f1+2,w,c
  6133  0033D8  341F               	rlcf	__div_to_l_@f1+3,w,c
  6134  0033DA  6E27               	movwf	__div_to_l_@exp1,c
  6135  0033DC  5027               	movf	__div_to_l_@exp1,w,c
  6136  0033DE  A4D8               	btfss	status,2,c
  6137  0033E0  D002               	goto	l8846
  6138  0033E2  D061               	goto	l8892
  6139  0033E4  D07C               	goto	l1286
  6140  0033E6                     l8846:
  6141  0033E6  3421               	rlcf	__div_to_l_@f2+2,w,c
  6142  0033E8  3422               	rlcf	__div_to_l_@f2+3,w,c
  6143  0033EA  6E26               	movwf	__div_to_l_@cntr,c
  6144  0033EC  5026               	movf	__div_to_l_@cntr,w,c
  6145  0033EE  A4D8               	btfss	status,2,c
  6146  0033F0  D002               	goto	l8852
  6147  0033F2  D059               	goto	l8892
  6148  0033F4  D074               	goto	l1286
  6149  0033F6                     l8852:
  6150  0033F6  8E1E               	bsf	__div_to_l_@f1+2,7,c
  6151  0033F8  0EFF               	movlw	255
  6152  0033FA  161C               	andwf	__div_to_l_@f1,f,c
  6153  0033FC  0EFF               	movlw	255
  6154  0033FE  161D               	andwf	__div_to_l_@f1+1,f,c
  6155  003400  0EFF               	movlw	255
  6156  003402  161E               	andwf	__div_to_l_@f1+2,f,c
  6157  003404  0E00               	movlw	0
  6158  003406  161F               	andwf	__div_to_l_@f1+3,f,c
  6159  003408  8E21               	bsf	__div_to_l_@f2+2,7,c
  6160  00340A  0EFF               	movlw	255
  6161  00340C  161F               	andwf	__div_to_l_@f2,f,c
  6162  00340E  0EFF               	movlw	255
  6163  003410  1620               	andwf	__div_to_l_@f2+1,f,c
  6164  003412  0EFF               	movlw	255
  6165  003414  1621               	andwf	__div_to_l_@f2+2,f,c
  6166  003416  0E00               	movlw	0
  6167  003418  1622               	andwf	__div_to_l_@f2+3,f,c
  6168  00341A  0E00               	movlw	0
  6169  00341C  6E22               	movwf	__div_to_l_@quot,c
  6170  00341E  0E00               	movlw	0
  6171  003420  6E23               	movwf	__div_to_l_@quot+1,c
  6172  003422  0E00               	movlw	0
  6173  003424  6E24               	movwf	__div_to_l_@quot+2,c
  6174  003426  0E00               	movlw	0
  6175  003428  6E25               	movwf	__div_to_l_@quot+3,c
  6176  00342A  0E7F               	movlw	127
  6177  00342C  5E27               	subwf	__div_to_l_@exp1,f,c
  6178  00342E  5026               	movf	__div_to_l_@cntr,w,c
  6179  003430  0FA0               	addlw	160
  6180  003432  5E27               	subwf	__div_to_l_@exp1,f,c
  6181  003434  0E20               	movlw	32
  6182  003436  6E26               	movwf	__div_to_l_@cntr,c
  6183  003438  D000               	goto	l8866
  6184  00343A                     l8866:
  6185  00343A  90D8               	bcf	status,0,c
  6186  00343C  3622               	rlcf	__div_to_l_@quot,f,c
  6187  00343E  3623               	rlcf	__div_to_l_@quot+1,f,c
  6188  003440  3624               	rlcf	__div_to_l_@quot+2,f,c
  6189  003442  3625               	rlcf	__div_to_l_@quot+3,f,c
  6190  003444  501F               	movf	__div_to_l_@f2,w,c
  6191  003446  5C1C               	subwf	__div_to_l_@f1,w,c
  6192  003448  5020               	movf	__div_to_l_@f2+1,w,c
  6193  00344A  581D               	subwfb	__div_to_l_@f1+1,w,c
  6194  00344C  5021               	movf	__div_to_l_@f2+2,w,c
  6195  00344E  581E               	subwfb	__div_to_l_@f1+2,w,c
  6196  003450  5022               	movf	__div_to_l_@f2+3,w,c
  6197  003452  581F               	subwfb	__div_to_l_@f1+3,w,c
  6198  003454  A0D8               	btfss	status,0,c
  6199  003456  D00A               	goto	l8874
  6200  003458  501F               	movf	__div_to_l_@f2,w,c
  6201  00345A  5E1C               	subwf	__div_to_l_@f1,f,c
  6202  00345C  5020               	movf	__div_to_l_@f2+1,w,c
  6203  00345E  5A1D               	subwfb	__div_to_l_@f1+1,f,c
  6204  003460  5021               	movf	__div_to_l_@f2+2,w,c
  6205  003462  5A1E               	subwfb	__div_to_l_@f1+2,f,c
  6206  003464  5022               	movf	__div_to_l_@f2+3,w,c
  6207  003466  5A1F               	subwfb	__div_to_l_@f1+3,f,c
  6208  003468  8022               	bsf	__div_to_l_@quot,0,c
  6209  00346A  D000               	goto	l8874
  6210  00346C                     l8874:
  6211  00346C  90D8               	bcf	status,0,c
  6212  00346E  361C               	rlcf	__div_to_l_@f1,f,c
  6213  003470  361D               	rlcf	__div_to_l_@f1+1,f,c
  6214  003472  361E               	rlcf	__div_to_l_@f1+2,f,c
  6215  003474  361F               	rlcf	__div_to_l_@f1+3,f,c
  6216  003476  2E26               	decfsz	__div_to_l_@cntr,f,c
  6217  003478  D7E0               	goto	l8866
  6218  00347A  D000               	goto	l8878
  6219  00347C                     l8878:
  6220  00347C  AE27               	btfss	__div_to_l_@exp1,7,c
  6221  00347E  D010               	goto	l8890
  6222  003480  5027               	movf	__div_to_l_@exp1,w,c
  6223  003482  0A80               	xorlw	128
  6224  003484  0F9F               	addlw	159
  6225  003486  B0D8               	btfsc	status,0,c
  6226  003488  D003               	goto	l8886
  6227  00348A  D00D               	goto	l8892
  6228  00348C  D028               	goto	l1286
  6229  00348E  D000               	goto	l8886
  6230  003490                     l8886:
  6231  003490  90D8               	bcf	status,0,c
  6232  003492  3225               	rrcf	__div_to_l_@quot+3,f,c
  6233  003494  3224               	rrcf	__div_to_l_@quot+2,f,c
  6234  003496  3223               	rrcf	__div_to_l_@quot+1,f,c
  6235  003498  3222               	rrcf	__div_to_l_@quot,f,c
  6236  00349A  3E27               	incfsz	__div_to_l_@exp1,f,c
  6237  00349C  D7F9               	goto	l8886
  6238  00349E  D017               	goto	l1295
  6239  0034A0                     l8890:
  6240  0034A0  0E1F               	movlw	31
  6241  0034A2  6427               	cpfsgt	__div_to_l_@exp1,c
  6242  0034A4  D011               	goto	l8898
  6243  0034A6                     l8892:
  6244  0034A6  0E00               	movlw	0
  6245  0034A8  6E1C               	movwf	?__div_to_l_,c
  6246  0034AA  0E00               	movlw	0
  6247  0034AC  6E1D               	movwf	?__div_to_l_+1,c
  6248  0034AE  0E00               	movlw	0
  6249  0034B0  6E1E               	movwf	?__div_to_l_+2,c
  6250  0034B2  0E00               	movlw	0
  6251  0034B4  6E1F               	movwf	?__div_to_l_+3,c
  6252  0034B6  D013               	goto	l1286
  6253  0034B8  D007               	goto	l8898
  6254  0034BA                     l8896:
  6255  0034BA  90D8               	bcf	status,0,c
  6256  0034BC  3622               	rlcf	__div_to_l_@quot,f,c
  6257  0034BE  3623               	rlcf	__div_to_l_@quot+1,f,c
  6258  0034C0  3624               	rlcf	__div_to_l_@quot+2,f,c
  6259  0034C2  3625               	rlcf	__div_to_l_@quot+3,f,c
  6260  0034C4  0627               	decf	__div_to_l_@exp1,f,c
  6261  0034C6  D000               	goto	l8898
  6262  0034C8                     l8898:
  6263  0034C8  5027               	movf	__div_to_l_@exp1,w,c
  6264  0034CA  A4D8               	btfss	status,2,c
  6265  0034CC  D7F6               	goto	l8896
  6266  0034CE                     l1295:
  6267  0034CE  C022  F01C         	movff	__div_to_l_@quot,?__div_to_l_
  6268  0034D2  C023  F01D         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  6269  0034D6  C024  F01E         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  6270  0034DA  C025  F01F         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  6271  0034DE                     l1286:
  6272  0034DE  0012               	return		;funcret
  6273  0034E0                     __end_of__div_to_l_:
  6274                           	opt stack 0
  6275                           tblptru	equ	0xFF8
  6276                           tblptrh	equ	0xFF7
  6277                           tblptrl	equ	0xFF6
  6278                           tablat	equ	0xFF5
  6279                           prodh	equ	0xFF4
  6280                           prodl	equ	0xFF3
  6281                           intcon	equ	0xFF2
  6282                           intcon2	equ	0xFF1
  6283                           intcon3	equ	0xFF0
  6284                           postinc0	equ	0xFEE
  6285                           wreg	equ	0xFE8
  6286                           postdec1	equ	0xFE5
  6287                           fsr1l	equ	0xFE1
  6288                           postinc2	equ	0xFDE
  6289                           postdec2	equ	0xFDD
  6290                           fsr2h	equ	0xFDA
  6291                           fsr2l	equ	0xFD9
  6292                           status	equ	0xFD8
  6293                           
  6294 ;; *************** function ___lltoft *****************
  6295 ;; Defined at:
  6296 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lltoft.c"
  6297 ;; Parameters:    Size  Location     Type
  6298 ;;  c               4   35[COMRAM] unsigned long 
  6299 ;; Auto vars:     Size  Location     Type
  6300 ;;  exp             1   43[COMRAM] unsigned char 
  6301 ;; Return value:  Size  Location     Type
  6302 ;;                  3   35[COMRAM] float 
  6303 ;; Registers used:
  6304 ;;		wreg, status,2, status,0, cstack
  6305 ;; Tracked objects:
  6306 ;;		On entry : 0/0
  6307 ;;		On exit  : 0/0
  6308 ;;		Unchanged: 0/0
  6309 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6310 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6311 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6312 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6313 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6314 ;;Total ram usage:        9 bytes
  6315 ;; Hardware stack levels used:    1
  6316 ;; Hardware stack levels required when called:    6
  6317 ;; This function calls:
  6318 ;;		___ftpack
  6319 ;; This function is called by:
  6320 ;;		_printf
  6321 ;; This function uses a non-reentrant model
  6322 ;;
  6323                           
  6324                           	psect	text8
  6325  0042AE                     __ptext8:
  6326                           	opt stack 0
  6327  0042AE                     ___lltoft:
  6328                           	opt stack 23
  6329                           
  6330                           ;incstack = 0
  6331  0042AE  0E8E               	movlw	142
  6332  0042B0  6E2C               	movwf	___lltoft@exp,c
  6333  0042B2  D007               	goto	l9068
  6334  0042B4                     l9066:
  6335  0042B4  90D8               	bcf	status,0,c
  6336  0042B6  3227               	rrcf	___lltoft@c+3,f,c
  6337  0042B8  3226               	rrcf	___lltoft@c+2,f,c
  6338  0042BA  3225               	rrcf	___lltoft@c+1,f,c
  6339  0042BC  3224               	rrcf	___lltoft@c,f,c
  6340  0042BE  2A2C               	incf	___lltoft@exp,f,c
  6341  0042C0  D000               	goto	l9068
  6342  0042C2                     l9068:
  6343  0042C2  0E00               	movlw	0
  6344  0042C4  1424               	andwf	___lltoft@c,w,c
  6345  0042C6  6E28               	movwf	??___lltoft& (0+255),c
  6346  0042C8  0E00               	movlw	0
  6347  0042CA  1425               	andwf	___lltoft@c+1,w,c
  6348  0042CC  6E29               	movwf	(??___lltoft+1)& (0+255),c
  6349  0042CE  0E00               	movlw	0
  6350  0042D0  1426               	andwf	___lltoft@c+2,w,c
  6351  0042D2  6E2A               	movwf	(??___lltoft+2)& (0+255),c
  6352  0042D4  0EFF               	movlw	255
  6353  0042D6  1427               	andwf	___lltoft@c+3,w,c
  6354  0042D8  6E2B               	movwf	(??___lltoft+3)& (0+255),c
  6355  0042DA  5028               	movf	??___lltoft,w,c
  6356  0042DC  1029               	iorwf	??___lltoft+1,w,c
  6357  0042DE  102A               	iorwf	??___lltoft+2,w,c
  6358  0042E0  102B               	iorwf	??___lltoft+3,w,c
  6359  0042E2  A4D8               	btfss	status,2,c
  6360  0042E4  D7E7               	goto	l9066
  6361  0042E6  C024  F01C         	movff	___lltoft@c,___ftpack@arg
  6362  0042EA  C025  F01D         	movff	___lltoft@c+1,___ftpack@arg+1
  6363  0042EE  C026  F01E         	movff	___lltoft@c+2,___ftpack@arg+2
  6364  0042F2  C02C  F01F         	movff	___lltoft@exp,___ftpack@exp
  6365  0042F6  0E00               	movlw	0
  6366  0042F8  6E20               	movwf	___ftpack@sign,c
  6367  0042FA  EC2F  F01D         	call	___ftpack	;wreg free
  6368  0042FE  C01C  F024         	movff	?___ftpack,?___lltoft
  6369  004302  C01D  F025         	movff	?___ftpack+1,?___lltoft+1
  6370  004306  C01E  F026         	movff	?___ftpack+2,?___lltoft+2
  6371  00430A  D000               	goto	l1526
  6372  00430C                     l1526:
  6373  00430C  0012               	return		;funcret
  6374  00430E                     __end_of___lltoft:
  6375                           	opt stack 0
  6376                           tblptru	equ	0xFF8
  6377                           tblptrh	equ	0xFF7
  6378                           tblptrl	equ	0xFF6
  6379                           tablat	equ	0xFF5
  6380                           prodh	equ	0xFF4
  6381                           prodl	equ	0xFF3
  6382                           intcon	equ	0xFF2
  6383                           intcon2	equ	0xFF1
  6384                           intcon3	equ	0xFF0
  6385                           postinc0	equ	0xFEE
  6386                           wreg	equ	0xFE8
  6387                           postdec1	equ	0xFE5
  6388                           fsr1l	equ	0xFE1
  6389                           postinc2	equ	0xFDE
  6390                           postdec2	equ	0xFDD
  6391                           fsr2h	equ	0xFDA
  6392                           fsr2l	equ	0xFD9
  6393                           status	equ	0xFD8
  6394                           
  6395 ;; *************** function ___llmod *****************
  6396 ;; Defined at:
  6397 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\llmod.c"
  6398 ;; Parameters:    Size  Location     Type
  6399 ;;  dividend        4   40[COMRAM] unsigned long 
  6400 ;;  divisor         4   44[COMRAM] unsigned long 
  6401 ;; Auto vars:     Size  Location     Type
  6402 ;;  counter         1   48[COMRAM] unsigned char 
  6403 ;; Return value:  Size  Location     Type
  6404 ;;                  4   40[COMRAM] unsigned long 
  6405 ;; Registers used:
  6406 ;;		wreg, status,2, status,0
  6407 ;; Tracked objects:
  6408 ;;		On entry : 0/0
  6409 ;;		On exit  : 0/0
  6410 ;;		Unchanged: 0/0
  6411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6412 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6413 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6414 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6415 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6416 ;;Total ram usage:        9 bytes
  6417 ;; Hardware stack levels used:    1
  6418 ;; Hardware stack levels required when called:    5
  6419 ;; This function calls:
  6420 ;;		Nothing
  6421 ;; This function is called by:
  6422 ;;		_printf
  6423 ;; This function uses a non-reentrant model
  6424 ;;
  6425                           
  6426                           	psect	text9
  6427  0040FC                     __ptext9:
  6428                           	opt stack 0
  6429  0040FC                     ___llmod:
  6430                           	opt stack 24
  6431                           
  6432                           ;incstack = 0
  6433  0040FC  502D               	movf	___llmod@divisor,w,c
  6434  0040FE  102E               	iorwf	___llmod@divisor+1,w,c
  6435  004100  102F               	iorwf	___llmod@divisor+2,w,c
  6436  004102  1030               	iorwf	___llmod@divisor+3,w,c
  6437  004104  B4D8               	btfsc	status,2,c
  6438  004106  D029               	goto	l1506
  6439  004108  0E01               	movlw	1
  6440  00410A  6E31               	movwf	___llmod@counter,c
  6441  00410C  D007               	goto	l9054
  6442  00410E                     l9052:
  6443  00410E  90D8               	bcf	status,0,c
  6444  004110  362D               	rlcf	___llmod@divisor,f,c
  6445  004112  362E               	rlcf	___llmod@divisor+1,f,c
  6446  004114  362F               	rlcf	___llmod@divisor+2,f,c
  6447  004116  3630               	rlcf	___llmod@divisor+3,f,c
  6448  004118  2A31               	incf	___llmod@counter,f,c
  6449  00411A  D000               	goto	l9054
  6450  00411C                     l9054:
  6451  00411C  BE30               	btfsc	___llmod@divisor+3,7,c
  6452  00411E  D002               	goto	l9056
  6453  004120  D7F6               	goto	l9052
  6454  004122  D000               	goto	l9056
  6455  004124                     l9056:
  6456  004124  502D               	movf	___llmod@divisor,w,c
  6457  004126  5C29               	subwf	___llmod@dividend,w,c
  6458  004128  502E               	movf	___llmod@divisor+1,w,c
  6459  00412A  582A               	subwfb	___llmod@dividend+1,w,c
  6460  00412C  502F               	movf	___llmod@divisor+2,w,c
  6461  00412E  582B               	subwfb	___llmod@dividend+2,w,c
  6462  004130  5030               	movf	___llmod@divisor+3,w,c
  6463  004132  582C               	subwfb	___llmod@dividend+3,w,c
  6464  004134  A0D8               	btfss	status,0,c
  6465  004136  D009               	goto	l9060
  6466  004138  502D               	movf	___llmod@divisor,w,c
  6467  00413A  5E29               	subwf	___llmod@dividend,f,c
  6468  00413C  502E               	movf	___llmod@divisor+1,w,c
  6469  00413E  5A2A               	subwfb	___llmod@dividend+1,f,c
  6470  004140  502F               	movf	___llmod@divisor+2,w,c
  6471  004142  5A2B               	subwfb	___llmod@dividend+2,f,c
  6472  004144  5030               	movf	___llmod@divisor+3,w,c
  6473  004146  5A2C               	subwfb	___llmod@dividend+3,f,c
  6474  004148  D000               	goto	l9060
  6475  00414A                     l9060:
  6476  00414A  90D8               	bcf	status,0,c
  6477  00414C  3230               	rrcf	___llmod@divisor+3,f,c
  6478  00414E  322F               	rrcf	___llmod@divisor+2,f,c
  6479  004150  322E               	rrcf	___llmod@divisor+1,f,c
  6480  004152  322D               	rrcf	___llmod@divisor,f,c
  6481  004154  2E31               	decfsz	___llmod@counter,f,c
  6482  004156  D7E6               	goto	l9056
  6483  004158  D000               	goto	l1506
  6484  00415A                     l1506:
  6485  00415A  C029  F029         	movff	___llmod@dividend,?___llmod
  6486  00415E  C02A  F02A         	movff	___llmod@dividend+1,?___llmod+1
  6487  004162  C02B  F02B         	movff	___llmod@dividend+2,?___llmod+2
  6488  004166  C02C  F02C         	movff	___llmod@dividend+3,?___llmod+3
  6489  00416A  0012               	return		;funcret
  6490  00416C                     __end_of___llmod:
  6491                           	opt stack 0
  6492                           tblptru	equ	0xFF8
  6493                           tblptrh	equ	0xFF7
  6494                           tblptrl	equ	0xFF6
  6495                           tablat	equ	0xFF5
  6496                           prodh	equ	0xFF4
  6497                           prodl	equ	0xFF3
  6498                           intcon	equ	0xFF2
  6499                           intcon2	equ	0xFF1
  6500                           intcon3	equ	0xFF0
  6501                           postinc0	equ	0xFEE
  6502                           wreg	equ	0xFE8
  6503                           postdec1	equ	0xFE5
  6504                           fsr1l	equ	0xFE1
  6505                           postinc2	equ	0xFDE
  6506                           postdec2	equ	0xFDD
  6507                           fsr2h	equ	0xFDA
  6508                           fsr2l	equ	0xFD9
  6509                           status	equ	0xFD8
  6510                           
  6511 ;; *************** function ___lldiv *****************
  6512 ;; Defined at:
  6513 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lldiv.c"
  6514 ;; Parameters:    Size  Location     Type
  6515 ;;  dividend        4   27[COMRAM] unsigned long 
  6516 ;;  divisor         4   31[COMRAM] unsigned long 
  6517 ;; Auto vars:     Size  Location     Type
  6518 ;;  quotient        4   35[COMRAM] unsigned long 
  6519 ;;  counter         1   39[COMRAM] unsigned char 
  6520 ;; Return value:  Size  Location     Type
  6521 ;;                  4   27[COMRAM] unsigned long 
  6522 ;; Registers used:
  6523 ;;		wreg, status,2, status,0
  6524 ;; Tracked objects:
  6525 ;;		On entry : 0/0
  6526 ;;		On exit  : 0/0
  6527 ;;		Unchanged: 0/0
  6528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6529 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6530 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6531 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6532 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6533 ;;Total ram usage:       13 bytes
  6534 ;; Hardware stack levels used:    1
  6535 ;; Hardware stack levels required when called:    5
  6536 ;; This function calls:
  6537 ;;		Nothing
  6538 ;; This function is called by:
  6539 ;;		_printf
  6540 ;; This function uses a non-reentrant model
  6541 ;;
  6542                           
  6543                           	psect	text10
  6544  003CE0                     __ptext10:
  6545                           	opt stack 0
  6546  003CE0                     ___lldiv:
  6547                           	opt stack 24
  6548                           
  6549                           ;incstack = 0
  6550  003CE0  0E00               	movlw	0
  6551  003CE2  6E24               	movwf	___lldiv@quotient,c
  6552  003CE4  0E00               	movlw	0
  6553  003CE6  6E25               	movwf	___lldiv@quotient+1,c
  6554  003CE8  0E00               	movlw	0
  6555  003CEA  6E26               	movwf	___lldiv@quotient+2,c
  6556  003CEC  0E00               	movlw	0
  6557  003CEE  6E27               	movwf	___lldiv@quotient+3,c
  6558  003CF0  5020               	movf	___lldiv@divisor,w,c
  6559  003CF2  1021               	iorwf	___lldiv@divisor+1,w,c
  6560  003CF4  1022               	iorwf	___lldiv@divisor+2,w,c
  6561  003CF6  1023               	iorwf	___lldiv@divisor+3,w,c
  6562  003CF8  B4D8               	btfsc	status,2,c
  6563  003CFA  D02F               	goto	l1496
  6564  003CFC  0E01               	movlw	1
  6565  003CFE  6E28               	movwf	___lldiv@counter,c
  6566  003D00  D007               	goto	l9034
  6567  003D02                     l9032:
  6568  003D02  90D8               	bcf	status,0,c
  6569  003D04  3620               	rlcf	___lldiv@divisor,f,c
  6570  003D06  3621               	rlcf	___lldiv@divisor+1,f,c
  6571  003D08  3622               	rlcf	___lldiv@divisor+2,f,c
  6572  003D0A  3623               	rlcf	___lldiv@divisor+3,f,c
  6573  003D0C  2A28               	incf	___lldiv@counter,f,c
  6574  003D0E  D000               	goto	l9034
  6575  003D10                     l9034:
  6576  003D10  BE23               	btfsc	___lldiv@divisor+3,7,c
  6577  003D12  D002               	goto	l9036
  6578  003D14  D7F6               	goto	l9032
  6579  003D16  D000               	goto	l9036
  6580  003D18                     l9036:
  6581  003D18  90D8               	bcf	status,0,c
  6582  003D1A  3624               	rlcf	___lldiv@quotient,f,c
  6583  003D1C  3625               	rlcf	___lldiv@quotient+1,f,c
  6584  003D1E  3626               	rlcf	___lldiv@quotient+2,f,c
  6585  003D20  3627               	rlcf	___lldiv@quotient+3,f,c
  6586  003D22  5020               	movf	___lldiv@divisor,w,c
  6587  003D24  5C1C               	subwf	___lldiv@dividend,w,c
  6588  003D26  5021               	movf	___lldiv@divisor+1,w,c
  6589  003D28  581D               	subwfb	___lldiv@dividend+1,w,c
  6590  003D2A  5022               	movf	___lldiv@divisor+2,w,c
  6591  003D2C  581E               	subwfb	___lldiv@dividend+2,w,c
  6592  003D2E  5023               	movf	___lldiv@divisor+3,w,c
  6593  003D30  581F               	subwfb	___lldiv@dividend+3,w,c
  6594  003D32  A0D8               	btfss	status,0,c
  6595  003D34  D00A               	goto	l9044
  6596  003D36  5020               	movf	___lldiv@divisor,w,c
  6597  003D38  5E1C               	subwf	___lldiv@dividend,f,c
  6598  003D3A  5021               	movf	___lldiv@divisor+1,w,c
  6599  003D3C  5A1D               	subwfb	___lldiv@dividend+1,f,c
  6600  003D3E  5022               	movf	___lldiv@divisor+2,w,c
  6601  003D40  5A1E               	subwfb	___lldiv@dividend+2,f,c
  6602  003D42  5023               	movf	___lldiv@divisor+3,w,c
  6603  003D44  5A1F               	subwfb	___lldiv@dividend+3,f,c
  6604  003D46  8024               	bsf	___lldiv@quotient,0,c
  6605  003D48  D000               	goto	l9044
  6606  003D4A                     l9044:
  6607  003D4A  90D8               	bcf	status,0,c
  6608  003D4C  3223               	rrcf	___lldiv@divisor+3,f,c
  6609  003D4E  3222               	rrcf	___lldiv@divisor+2,f,c
  6610  003D50  3221               	rrcf	___lldiv@divisor+1,f,c
  6611  003D52  3220               	rrcf	___lldiv@divisor,f,c
  6612  003D54  2E28               	decfsz	___lldiv@counter,f,c
  6613  003D56  D7E0               	goto	l9036
  6614  003D58  D000               	goto	l1496
  6615  003D5A                     l1496:
  6616  003D5A  C024  F01C         	movff	___lldiv@quotient,?___lldiv
  6617  003D5E  C025  F01D         	movff	___lldiv@quotient+1,?___lldiv+1
  6618  003D62  C026  F01E         	movff	___lldiv@quotient+2,?___lldiv+2
  6619  003D66  C027  F01F         	movff	___lldiv@quotient+3,?___lldiv+3
  6620  003D6A  0012               	return		;funcret
  6621  003D6C                     __end_of___lldiv:
  6622                           	opt stack 0
  6623                           tblptru	equ	0xFF8
  6624                           tblptrh	equ	0xFF7
  6625                           tblptrl	equ	0xFF6
  6626                           tablat	equ	0xFF5
  6627                           prodh	equ	0xFF4
  6628                           prodl	equ	0xFF3
  6629                           intcon	equ	0xFF2
  6630                           intcon2	equ	0xFF1
  6631                           intcon3	equ	0xFF0
  6632                           postinc0	equ	0xFEE
  6633                           wreg	equ	0xFE8
  6634                           postdec1	equ	0xFE5
  6635                           fsr1l	equ	0xFE1
  6636                           postinc2	equ	0xFDE
  6637                           postdec2	equ	0xFDD
  6638                           fsr2h	equ	0xFDA
  6639                           fsr2l	equ	0xFD9
  6640                           status	equ	0xFD8
  6641                           
  6642 ;; *************** function ___fttol *****************
  6643 ;; Defined at:
  6644 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fttol.c"
  6645 ;; Parameters:    Size  Location     Type
  6646 ;;  f1              3    0[BANK0 ] float 
  6647 ;; Auto vars:     Size  Location     Type
  6648 ;;  lval            4   10[BANK0 ] unsigned long 
  6649 ;;  exp1            1   14[BANK0 ] unsigned char 
  6650 ;;  sign1           1    9[BANK0 ] unsigned char 
  6651 ;; Return value:  Size  Location     Type
  6652 ;;                  4    0[BANK0 ] long 
  6653 ;; Registers used:
  6654 ;;		wreg, status,2, status,0
  6655 ;; Tracked objects:
  6656 ;;		On entry : 0/0
  6657 ;;		On exit  : 0/0
  6658 ;;		Unchanged: 0/0
  6659 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6660 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6661 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6662 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6663 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6664 ;;Total ram usage:       15 bytes
  6665 ;; Hardware stack levels used:    1
  6666 ;; Hardware stack levels required when called:    5
  6667 ;; This function calls:
  6668 ;;		Nothing
  6669 ;; This function is called by:
  6670 ;;		_main
  6671 ;;		_printf
  6672 ;; This function uses a non-reentrant model
  6673 ;;
  6674                           
  6675                           	psect	text11
  6676  002D32                     __ptext11:
  6677                           	opt stack 0
  6678  002D32                     ___fttol:
  6679                           	opt stack 24
  6680                           
  6681                           ;incstack = 0
  6682  002D32  C0B4  F0B6         	movff	___fttol@f1+2,??___fttol
  6683  002D36  0100               	movlb	0	; () banked
  6684  002D38  6BB7               	clrf	(??___fttol+1)& (0+255),b
  6685  002D3A  6BB8               	clrf	(??___fttol+2)& (0+255),b
  6686  002D3C  0100               	movlb	0	; () banked
  6687  002D3E  35B3               	rlcf	(___fttol@f1+1)& (0+255),w,b
  6688  002D40  0100               	movlb	0	; () banked
  6689  002D42  37B6               	rlcf	??___fttol& (0+255),f,b
  6690  002D44  E301               	bnc	u8061
  6691  002D46  81B7               	bsf	(??___fttol+1)& (0+255),0,b
  6692  002D48                     u8061:
  6693  002D48  0100               	movlb	0	; () banked
  6694  002D4A  51B6               	movf	??___fttol& (0+255),w,b
  6695  002D4C  0100               	movlb	0	; () banked
  6696  002D4E  6FC0               	movwf	___fttol@exp1& (0+255),b
  6697  002D50  0100               	movlb	0	; () banked
  6698  002D52  51C0               	movf	___fttol@exp1& (0+255),w,b
  6699  002D54  A4D8               	btfss	status,2,c
  6700  002D56  D002               	goto	l8982
  6701  002D58  D051               	goto	l9006
  6702                           
  6703                           ; BSR set to: 0
  6704                           
  6705                           ; BSR set to: 0
  6706  002D5A  D083               	goto	l1452
  6707  002D5C                     l8982:
  6708                           
  6709                           ; BSR set to: 0
  6710  002D5C  0E17               	movlw	23
  6711  002D5E  0100               	movlb	0	; () banked
  6712  002D60  6FB6               	movwf	??___fttol& (0+255),b
  6713  002D62  C0B2  F0B7         	movff	___fttol@f1,??___fttol+1
  6714  002D66  C0B3  F0B8         	movff	___fttol@f1+1,??___fttol+2
  6715  002D6A  C0B4  F0B9         	movff	___fttol@f1+2,??___fttol+3
  6716  002D6E  0100               	movlb	0	; () banked
  6717  002D70  29B6               	incf	??___fttol& (0+255),w,b
  6718  002D72  0100               	movlb	0	; () banked
  6719  002D74  6FBA               	movwf	(??___fttol+4)& (0+255),b
  6720  002D76  D005               	goto	u8080
  6721  002D78                     u8085:
  6722  002D78  0100               	movlb	0	; () banked
  6723  002D7A  90D8               	bcf	status,0,c
  6724  002D7C  33B9               	rrcf	(??___fttol+3)& (0+255),f,b
  6725  002D7E  33B8               	rrcf	(??___fttol+2)& (0+255),f,b
  6726  002D80  33B7               	rrcf	(??___fttol+1)& (0+255),f,b
  6727  002D82                     u8080:
  6728  002D82  0100               	movlb	0	; () banked
  6729  002D84  2FBA               	decfsz	(??___fttol+4)& (0+255),f,b
  6730  002D86  D7F8               	goto	u8085
  6731  002D88  0100               	movlb	0	; () banked
  6732  002D8A  51B7               	movf	(??___fttol+1)& (0+255),w,b
  6733  002D8C  0100               	movlb	0	; () banked
  6734  002D8E  6FBB               	movwf	___fttol@sign1& (0+255),b
  6735                           
  6736                           ; BSR set to: 0
  6737  002D90  0100               	movlb	0	; () banked
  6738  002D92  8FB3               	bsf	(___fttol@f1+1)& (0+255),7,b
  6739                           
  6740                           ; BSR set to: 0
  6741  002D94  0EFF               	movlw	255
  6742  002D96  0100               	movlb	0	; () banked
  6743  002D98  17B2               	andwf	___fttol@f1& (0+255),f,b
  6744  002D9A  0EFF               	movlw	255
  6745  002D9C  0100               	movlb	0	; () banked
  6746  002D9E  17B3               	andwf	(___fttol@f1+1)& (0+255),f,b
  6747  002DA0  0E00               	movlw	0
  6748  002DA2  0100               	movlb	0	; () banked
  6749  002DA4  17B4               	andwf	(___fttol@f1+2)& (0+255),f,b
  6750                           
  6751                           ; BSR set to: 0
  6752  002DA6  0100               	movlb	0	; () banked
  6753  002DA8  51B2               	movf	___fttol@f1& (0+255),w,b
  6754  002DAA  0100               	movlb	0	; () banked
  6755  002DAC  6FBC               	movwf	___fttol@lval& (0+255),b
  6756  002DAE  0100               	movlb	0	; () banked
  6757  002DB0  51B3               	movf	(___fttol@f1+1)& (0+255),w,b
  6758  002DB2  0100               	movlb	0	; () banked
  6759  002DB4  6FBD               	movwf	(___fttol@lval+1)& (0+255),b
  6760  002DB6  0100               	movlb	0	; () banked
  6761  002DB8  51B4               	movf	(___fttol@f1+2)& (0+255),w,b
  6762  002DBA  0100               	movlb	0	; () banked
  6763  002DBC  6FBE               	movwf	(___fttol@lval+2)& (0+255),b
  6764  002DBE  0100               	movlb	0	; () banked
  6765  002DC0  6BBF               	clrf	(___fttol@lval+3)& (0+255),b
  6766                           
  6767                           ; BSR set to: 0
  6768  002DC2  0E8E               	movlw	142
  6769  002DC4  0100               	movlb	0	; () banked
  6770  002DC6  5FC0               	subwf	___fttol@exp1& (0+255),f,b
  6771                           
  6772                           ; BSR set to: 0
  6773  002DC8  0100               	movlb	0	; () banked
  6774  002DCA  AFC0               	btfss	___fttol@exp1& (0+255),7,b
  6775  002DCC  D013               	goto	l9004
  6776                           
  6777                           ; BSR set to: 0
  6778  002DCE  0100               	movlb	0	; () banked
  6779  002DD0  51C0               	movf	___fttol@exp1& (0+255),w,b
  6780  002DD2  0A80               	xorlw	128
  6781  002DD4  0F8F               	addlw	143
  6782  002DD6  B0D8               	btfsc	status,0,c
  6783  002DD8  D003               	goto	l9000
  6784  002DDA  D010               	goto	l9006
  6785                           
  6786                           ; BSR set to: 0
  6787                           
  6788                           ; BSR set to: 0
  6789  002DDC  D042               	goto	l1452
  6790                           
  6791                           ; BSR set to: 0
  6792  002DDE  D000               	goto	l9000
  6793  002DE0                     l9000:
  6794                           
  6795                           ; BSR set to: 0
  6796  002DE0  0100               	movlb	0	; () banked
  6797  002DE2  90D8               	bcf	status,0,c
  6798  002DE4  33BF               	rrcf	(___fttol@lval+3)& (0+255),f,b
  6799  002DE6  33BE               	rrcf	(___fttol@lval+2)& (0+255),f,b
  6800  002DE8  33BD               	rrcf	(___fttol@lval+1)& (0+255),f,b
  6801  002DEA  33BC               	rrcf	___fttol@lval& (0+255),f,b
  6802                           
  6803                           ; BSR set to: 0
  6804  002DEC  0100               	movlb	0	; () banked
  6805  002DEE  3FC0               	incfsz	___fttol@exp1& (0+255),f,b
  6806  002DF0  D7F7               	goto	l9000
  6807                           
  6808                           ; BSR set to: 0
  6809  002DF2  D01F               	goto	l9014
  6810  002DF4                     l9004:
  6811                           
  6812                           ; BSR set to: 0
  6813  002DF4  0E17               	movlw	23
  6814  002DF6  0100               	movlb	0	; () banked
  6815  002DF8  65C0               	cpfsgt	___fttol@exp1& (0+255),b
  6816  002DFA  D014               	goto	l9012
  6817  002DFC                     l9006:
  6818                           
  6819                           ; BSR set to: 0
  6820  002DFC  0E00               	movlw	0
  6821  002DFE  0100               	movlb	0	; () banked
  6822  002E00  6FB2               	movwf	?___fttol& (0+255),b
  6823  002E02  0E00               	movlw	0
  6824  002E04  6FB3               	movwf	(?___fttol+1)& (0+255),b
  6825  002E06  0E00               	movlw	0
  6826  002E08  6FB4               	movwf	(?___fttol+2)& (0+255),b
  6827  002E0A  0E00               	movlw	0
  6828  002E0C  6FB5               	movwf	(?___fttol+3)& (0+255),b
  6829                           
  6830                           ; BSR set to: 0
  6831  002E0E  D029               	goto	l1452
  6832                           
  6833                           ; BSR set to: 0
  6834  002E10  D009               	goto	l9012
  6835  002E12                     l9010:
  6836                           
  6837                           ; BSR set to: 0
  6838  002E12  0100               	movlb	0	; () banked
  6839  002E14  90D8               	bcf	status,0,c
  6840  002E16  37BC               	rlcf	___fttol@lval& (0+255),f,b
  6841  002E18  37BD               	rlcf	(___fttol@lval+1)& (0+255),f,b
  6842  002E1A  37BE               	rlcf	(___fttol@lval+2)& (0+255),f,b
  6843  002E1C  37BF               	rlcf	(___fttol@lval+3)& (0+255),f,b
  6844  002E1E  0100               	movlb	0	; () banked
  6845  002E20  07C0               	decf	___fttol@exp1& (0+255),f,b
  6846  002E22  D000               	goto	l9012
  6847  002E24                     l9012:
  6848                           
  6849                           ; BSR set to: 0
  6850  002E24  0100               	movlb	0	; () banked
  6851  002E26  51C0               	movf	___fttol@exp1& (0+255),w,b
  6852  002E28  0100               	movlb	0	; () banked
  6853  002E2A  B4D8               	btfsc	status,2,c
  6854  002E2C  D002               	goto	l9014
  6855  002E2E  D7F1               	goto	l9010
  6856                           
  6857                           ; BSR set to: 0
  6858  002E30  D000               	goto	l9014
  6859  002E32                     l9014:
  6860                           
  6861                           ; BSR set to: 0
  6862  002E32  0100               	movlb	0	; () banked
  6863  002E34  51BB               	movf	___fttol@sign1& (0+255),w,b
  6864  002E36  0100               	movlb	0	; () banked
  6865  002E38  B4D8               	btfsc	status,2,c
  6866  002E3A  D00A               	goto	l9018
  6867                           
  6868                           ; BSR set to: 0
  6869  002E3C  0100               	movlb	0	; () banked
  6870  002E3E  1FBF               	comf	(___fttol@lval+3)& (0+255),f,b
  6871  002E40  1FBE               	comf	(___fttol@lval+2)& (0+255),f,b
  6872  002E42  1FBD               	comf	(___fttol@lval+1)& (0+255),f,b
  6873  002E44  6DBC               	negf	___fttol@lval& (0+255),b
  6874  002E46  0E00               	movlw	0
  6875  002E48  23BD               	addwfc	(___fttol@lval+1)& (0+255),f,b
  6876  002E4A  23BE               	addwfc	(___fttol@lval+2)& (0+255),f,b
  6877  002E4C  23BF               	addwfc	(___fttol@lval+3)& (0+255),f,b
  6878  002E4E  D000               	goto	l9018
  6879  002E50                     l9018:
  6880                           
  6881                           ; BSR set to: 0
  6882  002E50  C0BC  F0B2         	movff	___fttol@lval,?___fttol
  6883  002E54  C0BD  F0B3         	movff	___fttol@lval+1,?___fttol+1
  6884  002E58  C0BE  F0B4         	movff	___fttol@lval+2,?___fttol+2
  6885  002E5C  C0BF  F0B5         	movff	___fttol@lval+3,?___fttol+3
  6886  002E60  D000               	goto	l1452
  6887  002E62                     l1452:
  6888                           
  6889                           ; BSR set to: 0
  6890  002E62  0012               	return		;funcret
  6891  002E64                     __end_of___fttol:
  6892                           	opt stack 0
  6893                           tblptru	equ	0xFF8
  6894                           tblptrh	equ	0xFF7
  6895                           tblptrl	equ	0xFF6
  6896                           tablat	equ	0xFF5
  6897                           prodh	equ	0xFF4
  6898                           prodl	equ	0xFF3
  6899                           intcon	equ	0xFF2
  6900                           intcon2	equ	0xFF1
  6901                           intcon3	equ	0xFF0
  6902                           postinc0	equ	0xFEE
  6903                           wreg	equ	0xFE8
  6904                           postdec1	equ	0xFE5
  6905                           fsr1l	equ	0xFE1
  6906                           postinc2	equ	0xFDE
  6907                           postdec2	equ	0xFDD
  6908                           fsr2h	equ	0xFDA
  6909                           fsr2l	equ	0xFD9
  6910                           status	equ	0xFD8
  6911                           
  6912 ;; *************** function ___ftsub *****************
  6913 ;; Defined at:
  6914 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftsub.c"
  6915 ;; Parameters:    Size  Location     Type
  6916 ;;  f1              3   12[BANK0 ] float 
  6917 ;;  f2              3   15[BANK0 ] float 
  6918 ;; Auto vars:     Size  Location     Type
  6919 ;;		None
  6920 ;; Return value:  Size  Location     Type
  6921 ;;                  3   12[BANK0 ] float 
  6922 ;; Registers used:
  6923 ;;		wreg, status,2, status,0, cstack
  6924 ;; Tracked objects:
  6925 ;;		On entry : 0/0
  6926 ;;		On exit  : 0/0
  6927 ;;		Unchanged: 0/0
  6928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6929 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6930 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6931 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6932 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6933 ;;Total ram usage:        6 bytes
  6934 ;; Hardware stack levels used:    1
  6935 ;; Hardware stack levels required when called:    7
  6936 ;; This function calls:
  6937 ;;		___ftadd
  6938 ;; This function is called by:
  6939 ;;		_printf
  6940 ;; This function uses a non-reentrant model
  6941 ;;
  6942                           
  6943                           	psect	text12
  6944  004462                     __ptext12:
  6945                           	opt stack 0
  6946  004462                     ___ftsub:
  6947                           	opt stack 22
  6948                           
  6949                           ; BSR set to: 0
  6950                           ;incstack = 0
  6951  004462  0100               	movlb	0	; () banked
  6952  004464  51C1               	movf	___ftsub@f2& (0+255),w,b
  6953  004466  0100               	movlb	0	; () banked
  6954  004468  11C2               	iorwf	(___ftsub@f2+1)& (0+255),w,b
  6955  00446A  0100               	movlb	0	; () banked
  6956  00446C  11C3               	iorwf	(___ftsub@f2+2)& (0+255),w,b
  6957  00446E  B4D8               	btfsc	status,2,c
  6958  004470  D00A               	goto	l8950
  6959                           
  6960                           ; BSR set to: 0
  6961  004472  0E00               	movlw	0
  6962  004474  0100               	movlb	0	; () banked
  6963  004476  1BC1               	xorwf	___ftsub@f2& (0+255),f,b
  6964  004478  0E00               	movlw	0
  6965  00447A  0100               	movlb	0	; () banked
  6966  00447C  1BC2               	xorwf	(___ftsub@f2+1)& (0+255),f,b
  6967  00447E  0E80               	movlw	128
  6968  004480  0100               	movlb	0	; () banked
  6969  004482  1BC3               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  6970  004484  D000               	goto	l8950
  6971  004486                     l8950:
  6972                           
  6973                           ; BSR set to: 0
  6974  004486  C0BE  F0B2         	movff	___ftsub@f1,___ftadd@f1
  6975  00448A  C0BF  F0B3         	movff	___ftsub@f1+1,___ftadd@f1+1
  6976  00448E  C0C0  F0B4         	movff	___ftsub@f1+2,___ftadd@f1+2
  6977  004492  C0C1  F0B5         	movff	___ftsub@f2,___ftadd@f2
  6978  004496  C0C2  F0B6         	movff	___ftsub@f2+1,___ftadd@f2+1
  6979  00449A  C0C3  F0B7         	movff	___ftsub@f2+2,___ftadd@f2+2
  6980  00449E  EC7A  F00E         	call	___ftadd	;wreg free
  6981  0044A2  C0B2  F0BE         	movff	?___ftadd,?___ftsub
  6982  0044A6  C0B3  F0BF         	movff	?___ftadd+1,?___ftsub+1
  6983  0044AA  C0B4  F0C0         	movff	?___ftadd+2,?___ftsub+2
  6984  0044AE  D000               	goto	l1448
  6985  0044B0                     l1448:
  6986  0044B0  0012               	return		;funcret
  6987  0044B2                     __end_of___ftsub:
  6988                           	opt stack 0
  6989                           tblptru	equ	0xFF8
  6990                           tblptrh	equ	0xFF7
  6991                           tblptrl	equ	0xFF6
  6992                           tablat	equ	0xFF5
  6993                           prodh	equ	0xFF4
  6994                           prodl	equ	0xFF3
  6995                           intcon	equ	0xFF2
  6996                           intcon2	equ	0xFF1
  6997                           intcon3	equ	0xFF0
  6998                           postinc0	equ	0xFEE
  6999                           wreg	equ	0xFE8
  7000                           postdec1	equ	0xFE5
  7001                           fsr1l	equ	0xFE1
  7002                           postinc2	equ	0xFDE
  7003                           postdec2	equ	0xFDD
  7004                           fsr2h	equ	0xFDA
  7005                           fsr2l	equ	0xFD9
  7006                           status	equ	0xFD8
  7007                           
  7008 ;; *************** function ___ftadd *****************
  7009 ;; Defined at:
  7010 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftadd.c"
  7011 ;; Parameters:    Size  Location     Type
  7012 ;;  f1              3    0[BANK0 ] float 
  7013 ;;  f2              3    3[BANK0 ] float 
  7014 ;; Auto vars:     Size  Location     Type
  7015 ;;  exp1            1   11[BANK0 ] unsigned char 
  7016 ;;  exp2            1   10[BANK0 ] unsigned char 
  7017 ;;  sign            1    9[BANK0 ] unsigned char 
  7018 ;; Return value:  Size  Location     Type
  7019 ;;                  3    0[BANK0 ] float 
  7020 ;; Registers used:
  7021 ;;		wreg, status,2, status,0, cstack
  7022 ;; Tracked objects:
  7023 ;;		On entry : 0/0
  7024 ;;		On exit  : 0/0
  7025 ;;		Unchanged: 0/0
  7026 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7027 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7028 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7029 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7030 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7031 ;;Total ram usage:       12 bytes
  7032 ;; Hardware stack levels used:    1
  7033 ;; Hardware stack levels required when called:    6
  7034 ;; This function calls:
  7035 ;;		___ftpack
  7036 ;; This function is called by:
  7037 ;;		_printf
  7038 ;;		___ftsub
  7039 ;; This function uses a non-reentrant model
  7040 ;;
  7041                           
  7042                           	psect	text13
  7043  001CF4                     __ptext13:
  7044                           	opt stack 0
  7045  001CF4                     ___ftadd:
  7046                           	opt stack 22
  7047                           
  7048                           ;incstack = 0
  7049  001CF4  C0B4  F0B8         	movff	___ftadd@f1+2,??___ftadd
  7050  001CF8  0100               	movlb	0	; () banked
  7051  001CFA  6BB9               	clrf	(??___ftadd+1)& (0+255),b
  7052  001CFC  6BBA               	clrf	(??___ftadd+2)& (0+255),b
  7053  001CFE  0100               	movlb	0	; () banked
  7054  001D00  35B3               	rlcf	(___ftadd@f1+1)& (0+255),w,b
  7055  001D02  0100               	movlb	0	; () banked
  7056  001D04  37B8               	rlcf	??___ftadd& (0+255),f,b
  7057  001D06  E301               	bnc	u7291
  7058  001D08  81B9               	bsf	(??___ftadd+1)& (0+255),0,b
  7059  001D0A                     u7291:
  7060  001D0A  0100               	movlb	0	; () banked
  7061  001D0C  51B8               	movf	??___ftadd& (0+255),w,b
  7062  001D0E  0100               	movlb	0	; () banked
  7063  001D10  6FBD               	movwf	___ftadd@exp1& (0+255),b
  7064  001D12  C0B7  F0B8         	movff	___ftadd@f2+2,??___ftadd
  7065  001D16  0100               	movlb	0	; () banked
  7066  001D18  6BB9               	clrf	(??___ftadd+1)& (0+255),b
  7067  001D1A  6BBA               	clrf	(??___ftadd+2)& (0+255),b
  7068  001D1C  0100               	movlb	0	; () banked
  7069  001D1E  35B6               	rlcf	(___ftadd@f2+1)& (0+255),w,b
  7070  001D20  0100               	movlb	0	; () banked
  7071  001D22  37B8               	rlcf	??___ftadd& (0+255),f,b
  7072  001D24  E301               	bnc	u7301
  7073  001D26  81B9               	bsf	(??___ftadd+1)& (0+255),0,b
  7074  001D28                     u7301:
  7075  001D28  0100               	movlb	0	; () banked
  7076  001D2A  51B8               	movf	??___ftadd& (0+255),w,b
  7077  001D2C  0100               	movlb	0	; () banked
  7078  001D2E  6FBC               	movwf	___ftadd@exp2& (0+255),b
  7079                           
  7080                           ; BSR set to: 0
  7081  001D30  0100               	movlb	0	; () banked
  7082  001D32  51BD               	movf	___ftadd@exp1& (0+255),w,b
  7083  001D34  0100               	movlb	0	; () banked
  7084  001D36  B4D8               	btfsc	status,2,c
  7085  001D38  D011               	goto	l1367
  7086                           
  7087                           ; BSR set to: 0
  7088  001D3A  0100               	movlb	0	; () banked
  7089  001D3C  51BC               	movf	___ftadd@exp2& (0+255),w,b
  7090  001D3E  0100               	movlb	0	; () banked
  7091  001D40  5DBD               	subwf	___ftadd@exp1& (0+255),w,b
  7092  001D42  B0D8               	btfsc	status,0,c
  7093  001D44  D012               	goto	l8140
  7094                           
  7095                           ; BSR set to: 0
  7096  001D46  0100               	movlb	0	; () banked
  7097  001D48  51BD               	movf	___ftadd@exp1& (0+255),w,b
  7098  001D4A  0800               	sublw	0
  7099  001D4C  0100               	movlb	0	; () banked
  7100  001D4E  25BC               	addwf	___ftadd@exp2& (0+255),w,b
  7101  001D50  0100               	movlb	0	; () banked
  7102  001D52  6FB8               	movwf	??___ftadd& (0+255),b
  7103  001D54  0E18               	movlw	24
  7104  001D56  0100               	movlb	0	; () banked
  7105  001D58  65B8               	cpfsgt	??___ftadd& (0+255),b
  7106  001D5A  D007               	goto	l8140
  7107  001D5C                     l1367:
  7108                           
  7109                           ; BSR set to: 0
  7110  001D5C  C0B5  F0B2         	movff	___ftadd@f2,?___ftadd
  7111  001D60  C0B6  F0B3         	movff	___ftadd@f2+1,?___ftadd+1
  7112  001D64  C0B7  F0B4         	movff	___ftadd@f2+2,?___ftadd+2
  7113  001D68  D103               	goto	l1368
  7114  001D6A                     l8140:
  7115                           
  7116                           ; BSR set to: 0
  7117  001D6A  0100               	movlb	0	; () banked
  7118  001D6C  51BC               	movf	___ftadd@exp2& (0+255),w,b
  7119  001D6E  0100               	movlb	0	; () banked
  7120  001D70  B4D8               	btfsc	status,2,c
  7121  001D72  D011               	goto	l1371
  7122                           
  7123                           ; BSR set to: 0
  7124  001D74  0100               	movlb	0	; () banked
  7125  001D76  51BD               	movf	___ftadd@exp1& (0+255),w,b
  7126  001D78  0100               	movlb	0	; () banked
  7127  001D7A  5DBC               	subwf	___ftadd@exp2& (0+255),w,b
  7128  001D7C  B0D8               	btfsc	status,0,c
  7129  001D7E  D012               	goto	l8146
  7130                           
  7131                           ; BSR set to: 0
  7132  001D80  0100               	movlb	0	; () banked
  7133  001D82  51BC               	movf	___ftadd@exp2& (0+255),w,b
  7134  001D84  0800               	sublw	0
  7135  001D86  0100               	movlb	0	; () banked
  7136  001D88  25BD               	addwf	___ftadd@exp1& (0+255),w,b
  7137  001D8A  0100               	movlb	0	; () banked
  7138  001D8C  6FB8               	movwf	??___ftadd& (0+255),b
  7139  001D8E  0E18               	movlw	24
  7140  001D90  0100               	movlb	0	; () banked
  7141  001D92  65B8               	cpfsgt	??___ftadd& (0+255),b
  7142  001D94  D007               	goto	l8146
  7143  001D96                     l1371:
  7144                           
  7145                           ; BSR set to: 0
  7146  001D96  C0B2  F0B2         	movff	___ftadd@f1,?___ftadd
  7147  001D9A  C0B3  F0B3         	movff	___ftadd@f1+1,?___ftadd+1
  7148  001D9E  C0B4  F0B4         	movff	___ftadd@f1+2,?___ftadd+2
  7149  001DA2  D0E6               	goto	l1368
  7150  001DA4                     l8146:
  7151                           
  7152                           ; BSR set to: 0
  7153  001DA4  0E06               	movlw	6
  7154  001DA6  0100               	movlb	0	; () banked
  7155  001DA8  6FBB               	movwf	___ftadd@sign& (0+255),b
  7156                           
  7157                           ; BSR set to: 0
  7158  001DAA  0100               	movlb	0	; () banked
  7159  001DAC  AFB4               	btfss	(___ftadd@f1+2)& (0+255),7,b
  7160  001DAE  D003               	goto	l8152
  7161                           
  7162                           ; BSR set to: 0
  7163  001DB0  0100               	movlb	0	; () banked
  7164  001DB2  8FBB               	bsf	___ftadd@sign& (0+255),7,b
  7165  001DB4  D000               	goto	l8152
  7166  001DB6                     l8152:
  7167                           
  7168                           ; BSR set to: 0
  7169  001DB6  0100               	movlb	0	; () banked
  7170  001DB8  AFB7               	btfss	(___ftadd@f2+2)& (0+255),7,b
  7171  001DBA  D002               	goto	l1373
  7172                           
  7173                           ; BSR set to: 0
  7174  001DBC  0100               	movlb	0	; () banked
  7175  001DBE  8DBB               	bsf	___ftadd@sign& (0+255),6,b
  7176  001DC0                     l1373:
  7177                           
  7178                           ; BSR set to: 0
  7179  001DC0  0100               	movlb	0	; () banked
  7180  001DC2  8FB3               	bsf	(___ftadd@f1+1)& (0+255),7,b
  7181                           
  7182                           ; BSR set to: 0
  7183  001DC4  0EFF               	movlw	255
  7184  001DC6  0100               	movlb	0	; () banked
  7185  001DC8  17B2               	andwf	___ftadd@f1& (0+255),f,b
  7186  001DCA  0EFF               	movlw	255
  7187  001DCC  0100               	movlb	0	; () banked
  7188  001DCE  17B3               	andwf	(___ftadd@f1+1)& (0+255),f,b
  7189  001DD0  0E00               	movlw	0
  7190  001DD2  0100               	movlb	0	; () banked
  7191  001DD4  17B4               	andwf	(___ftadd@f1+2)& (0+255),f,b
  7192  001DD6  0100               	movlb	0	; () banked
  7193  001DD8  8FB6               	bsf	(___ftadd@f2+1)& (0+255),7,b
  7194                           
  7195                           ; BSR set to: 0
  7196  001DDA  0EFF               	movlw	255
  7197  001DDC  0100               	movlb	0	; () banked
  7198  001DDE  17B5               	andwf	___ftadd@f2& (0+255),f,b
  7199  001DE0  0EFF               	movlw	255
  7200  001DE2  0100               	movlb	0	; () banked
  7201  001DE4  17B6               	andwf	(___ftadd@f2+1)& (0+255),f,b
  7202  001DE6  0E00               	movlw	0
  7203  001DE8  0100               	movlb	0	; () banked
  7204  001DEA  17B7               	andwf	(___ftadd@f2+2)& (0+255),f,b
  7205                           
  7206                           ; BSR set to: 0
  7207  001DEC  0100               	movlb	0	; () banked
  7208  001DEE  51BC               	movf	___ftadd@exp2& (0+255),w,b
  7209  001DF0  0100               	movlb	0	; () banked
  7210  001DF2  5DBD               	subwf	___ftadd@exp1& (0+255),w,b
  7211  001DF4  B0D8               	btfsc	status,0,c
  7212  001DF6  D028               	goto	l8172
  7213  001DF8                     l8162:
  7214                           
  7215                           ; BSR set to: 0
  7216  001DF8  0100               	movlb	0	; () banked
  7217  001DFA  90D8               	bcf	status,0,c
  7218  001DFC  37B5               	rlcf	___ftadd@f2& (0+255),f,b
  7219  001DFE  37B6               	rlcf	(___ftadd@f2+1)& (0+255),f,b
  7220  001E00  37B7               	rlcf	(___ftadd@f2+2)& (0+255),f,b
  7221  001E02  0100               	movlb	0	; () banked
  7222  001E04  07BC               	decf	___ftadd@exp2& (0+255),f,b
  7223                           
  7224                           ; BSR set to: 0
  7225  001E06  0100               	movlb	0	; () banked
  7226  001E08  51BD               	movf	___ftadd@exp1& (0+255),w,b
  7227  001E0A  0100               	movlb	0	; () banked
  7228  001E0C  19BC               	xorwf	___ftadd@exp2& (0+255),w,b
  7229  001E0E  B4D8               	btfsc	status,2,c
  7230  001E10  D013               	goto	l8170
  7231                           
  7232                           ; BSR set to: 0
  7233  001E12  0100               	movlb	0	; () banked
  7234  001E14  07BB               	decf	___ftadd@sign& (0+255),f,b
  7235  001E16  C0BB  F0B8         	movff	___ftadd@sign,??___ftadd
  7236  001E1A  0E07               	movlw	7
  7237  001E1C  0100               	movlb	0	; () banked
  7238  001E1E  17B8               	andwf	??___ftadd& (0+255),f,b
  7239  001E20  B4D8               	btfsc	status,2,c
  7240  001E22  D00A               	goto	l8170
  7241  001E24  D7E9               	goto	l8162
  7242                           
  7243                           ; BSR set to: 0
  7244                           
  7245                           ; BSR set to: 0
  7246  001E26  D008               	goto	l8170
  7247  001E28                     l8168:
  7248                           
  7249                           ; BSR set to: 0
  7250  001E28  0100               	movlb	0	; () banked
  7251  001E2A  90D8               	bcf	status,0,c
  7252  001E2C  33B4               	rrcf	(___ftadd@f1+2)& (0+255),f,b
  7253  001E2E  33B3               	rrcf	(___ftadd@f1+1)& (0+255),f,b
  7254  001E30  33B2               	rrcf	___ftadd@f1& (0+255),f,b
  7255  001E32  0100               	movlb	0	; () banked
  7256  001E34  2BBD               	incf	___ftadd@exp1& (0+255),f,b
  7257  001E36  D000               	goto	l8170
  7258  001E38                     l8170:
  7259                           
  7260                           ; BSR set to: 0
  7261  001E38  0100               	movlb	0	; () banked
  7262  001E3A  51BC               	movf	___ftadd@exp2& (0+255),w,b
  7263  001E3C  0100               	movlb	0	; () banked
  7264  001E3E  19BD               	xorwf	___ftadd@exp1& (0+255),w,b
  7265  001E40  B4D8               	btfsc	status,2,c
  7266  001E42  D030               	goto	l1382
  7267  001E44  D7F1               	goto	l8168
  7268                           
  7269                           ; BSR set to: 0
  7270  001E46  D02E               	goto	l1382
  7271  001E48                     l8172:
  7272                           
  7273                           ; BSR set to: 0
  7274  001E48  0100               	movlb	0	; () banked
  7275  001E4A  51BD               	movf	___ftadd@exp1& (0+255),w,b
  7276  001E4C  0100               	movlb	0	; () banked
  7277  001E4E  5DBC               	subwf	___ftadd@exp2& (0+255),w,b
  7278  001E50  B0D8               	btfsc	status,0,c
  7279  001E52  D028               	goto	l1382
  7280  001E54                     l8174:
  7281                           
  7282                           ; BSR set to: 0
  7283  001E54  0100               	movlb	0	; () banked
  7284  001E56  90D8               	bcf	status,0,c
  7285  001E58  37B2               	rlcf	___ftadd@f1& (0+255),f,b
  7286  001E5A  37B3               	rlcf	(___ftadd@f1+1)& (0+255),f,b
  7287  001E5C  37B4               	rlcf	(___ftadd@f1+2)& (0+255),f,b
  7288  001E5E  0100               	movlb	0	; () banked
  7289  001E60  07BD               	decf	___ftadd@exp1& (0+255),f,b
  7290                           
  7291                           ; BSR set to: 0
  7292  001E62  0100               	movlb	0	; () banked
  7293  001E64  51BD               	movf	___ftadd@exp1& (0+255),w,b
  7294  001E66  0100               	movlb	0	; () banked
  7295  001E68  19BC               	xorwf	___ftadd@exp2& (0+255),w,b
  7296  001E6A  B4D8               	btfsc	status,2,c
  7297  001E6C  D013               	goto	l8182
  7298                           
  7299                           ; BSR set to: 0
  7300  001E6E  0100               	movlb	0	; () banked
  7301  001E70  07BB               	decf	___ftadd@sign& (0+255),f,b
  7302  001E72  C0BB  F0B8         	movff	___ftadd@sign,??___ftadd
  7303  001E76  0E07               	movlw	7
  7304  001E78  0100               	movlb	0	; () banked
  7305  001E7A  17B8               	andwf	??___ftadd& (0+255),f,b
  7306  001E7C  B4D8               	btfsc	status,2,c
  7307  001E7E  D00A               	goto	l8182
  7308  001E80  D7E9               	goto	l8174
  7309                           
  7310                           ; BSR set to: 0
  7311                           
  7312                           ; BSR set to: 0
  7313  001E82  D008               	goto	l8182
  7314  001E84                     l8180:
  7315                           
  7316                           ; BSR set to: 0
  7317  001E84  0100               	movlb	0	; () banked
  7318  001E86  90D8               	bcf	status,0,c
  7319  001E88  33B7               	rrcf	(___ftadd@f2+2)& (0+255),f,b
  7320  001E8A  33B6               	rrcf	(___ftadd@f2+1)& (0+255),f,b
  7321  001E8C  33B5               	rrcf	___ftadd@f2& (0+255),f,b
  7322  001E8E  0100               	movlb	0	; () banked
  7323  001E90  2BBC               	incf	___ftadd@exp2& (0+255),f,b
  7324  001E92  D000               	goto	l8182
  7325  001E94                     l8182:
  7326                           
  7327                           ; BSR set to: 0
  7328  001E94  0100               	movlb	0	; () banked
  7329  001E96  51BC               	movf	___ftadd@exp2& (0+255),w,b
  7330  001E98  0100               	movlb	0	; () banked
  7331  001E9A  19BD               	xorwf	___ftadd@exp1& (0+255),w,b
  7332  001E9C  B4D8               	btfsc	status,2,c
  7333  001E9E  D002               	goto	l1382
  7334  001EA0  D7F1               	goto	l8180
  7335                           
  7336                           ; BSR set to: 0
  7337  001EA2  D000               	goto	l1382
  7338  001EA4                     l1382:
  7339                           
  7340                           ; BSR set to: 0
  7341  001EA4  0100               	movlb	0	; () banked
  7342  001EA6  AFBB               	btfss	___ftadd@sign& (0+255),7,b
  7343  001EA8  D012               	goto	l1391
  7344                           
  7345                           ; BSR set to: 0
  7346  001EAA  0EFF               	movlw	255
  7347  001EAC  0100               	movlb	0	; () banked
  7348  001EAE  1BB2               	xorwf	___ftadd@f1& (0+255),f,b
  7349  001EB0  0EFF               	movlw	255
  7350  001EB2  0100               	movlb	0	; () banked
  7351  001EB4  1BB3               	xorwf	(___ftadd@f1+1)& (0+255),f,b
  7352  001EB6  0EFF               	movlw	255
  7353  001EB8  0100               	movlb	0	; () banked
  7354  001EBA  1BB4               	xorwf	(___ftadd@f1+2)& (0+255),f,b
  7355  001EBC  0E01               	movlw	1
  7356  001EBE  0100               	movlb	0	; () banked
  7357  001EC0  27B2               	addwf	___ftadd@f1& (0+255),f,b
  7358  001EC2  0E00               	movlw	0
  7359  001EC4  0100               	movlb	0	; () banked
  7360  001EC6  23B3               	addwfc	(___ftadd@f1+1)& (0+255),f,b
  7361  001EC8  0E00               	movlw	0
  7362  001ECA  0100               	movlb	0	; () banked
  7363  001ECC  23B4               	addwfc	(___ftadd@f1+2)& (0+255),f,b
  7364  001ECE                     l1391:
  7365                           
  7366                           ; BSR set to: 0
  7367  001ECE  0100               	movlb	0	; () banked
  7368  001ED0  ADBB               	btfss	___ftadd@sign& (0+255),6,b
  7369  001ED2  D013               	goto	l8188
  7370                           
  7371                           ; BSR set to: 0
  7372  001ED4  0EFF               	movlw	255
  7373  001ED6  0100               	movlb	0	; () banked
  7374  001ED8  1BB5               	xorwf	___ftadd@f2& (0+255),f,b
  7375  001EDA  0EFF               	movlw	255
  7376  001EDC  0100               	movlb	0	; () banked
  7377  001EDE  1BB6               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  7378  001EE0  0EFF               	movlw	255
  7379  001EE2  0100               	movlb	0	; () banked
  7380  001EE4  1BB7               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  7381  001EE6  0E01               	movlw	1
  7382  001EE8  0100               	movlb	0	; () banked
  7383  001EEA  27B5               	addwf	___ftadd@f2& (0+255),f,b
  7384  001EEC  0E00               	movlw	0
  7385  001EEE  0100               	movlb	0	; () banked
  7386  001EF0  23B6               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  7387  001EF2  0E00               	movlw	0
  7388  001EF4  0100               	movlb	0	; () banked
  7389  001EF6  23B7               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  7390  001EF8  D000               	goto	l8188
  7391  001EFA                     l8188:
  7392                           
  7393                           ; BSR set to: 0
  7394  001EFA  0E00               	movlw	0
  7395  001EFC  0100               	movlb	0	; () banked
  7396  001EFE  6FBB               	movwf	___ftadd@sign& (0+255),b
  7397                           
  7398                           ; BSR set to: 0
  7399  001F00  0100               	movlb	0	; () banked
  7400  001F02  51B2               	movf	___ftadd@f1& (0+255),w,b
  7401  001F04  0100               	movlb	0	; () banked
  7402  001F06  27B5               	addwf	___ftadd@f2& (0+255),f,b
  7403  001F08  0100               	movlb	0	; () banked
  7404  001F0A  51B3               	movf	(___ftadd@f1+1)& (0+255),w,b
  7405  001F0C  0100               	movlb	0	; () banked
  7406  001F0E  23B6               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  7407  001F10  0100               	movlb	0	; () banked
  7408  001F12  51B4               	movf	(___ftadd@f1+2)& (0+255),w,b
  7409  001F14  0100               	movlb	0	; () banked
  7410  001F16  23B7               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  7411                           
  7412                           ; BSR set to: 0
  7413  001F18  0100               	movlb	0	; () banked
  7414  001F1A  AFB7               	btfss	(___ftadd@f2+2)& (0+255),7,b
  7415  001F1C  D016               	goto	l8198
  7416                           
  7417                           ; BSR set to: 0
  7418  001F1E  0EFF               	movlw	255
  7419  001F20  0100               	movlb	0	; () banked
  7420  001F22  1BB5               	xorwf	___ftadd@f2& (0+255),f,b
  7421  001F24  0EFF               	movlw	255
  7422  001F26  0100               	movlb	0	; () banked
  7423  001F28  1BB6               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  7424  001F2A  0EFF               	movlw	255
  7425  001F2C  0100               	movlb	0	; () banked
  7426  001F2E  1BB7               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  7427  001F30  0E01               	movlw	1
  7428  001F32  0100               	movlb	0	; () banked
  7429  001F34  27B5               	addwf	___ftadd@f2& (0+255),f,b
  7430  001F36  0E00               	movlw	0
  7431  001F38  0100               	movlb	0	; () banked
  7432  001F3A  23B6               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  7433  001F3C  0E00               	movlw	0
  7434  001F3E  0100               	movlb	0	; () banked
  7435  001F40  23B7               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  7436                           
  7437                           ; BSR set to: 0
  7438  001F42  0E01               	movlw	1
  7439  001F44  0100               	movlb	0	; () banked
  7440  001F46  6FBB               	movwf	___ftadd@sign& (0+255),b
  7441  001F48  D000               	goto	l8198
  7442  001F4A                     l8198:
  7443                           
  7444                           ; BSR set to: 0
  7445  001F4A  C0B5  F01C         	movff	___ftadd@f2,___ftpack@arg
  7446  001F4E  C0B6  F01D         	movff	___ftadd@f2+1,___ftpack@arg+1
  7447  001F52  C0B7  F01E         	movff	___ftadd@f2+2,___ftpack@arg+2
  7448  001F56  C0BD  F01F         	movff	___ftadd@exp1,___ftpack@exp
  7449  001F5A  C0BB  F020         	movff	___ftadd@sign,___ftpack@sign
  7450  001F5E  EC2F  F01D         	call	___ftpack	;wreg free
  7451  001F62  C01C  F0B2         	movff	?___ftpack,?___ftadd
  7452  001F66  C01D  F0B3         	movff	?___ftpack+1,?___ftadd+1
  7453  001F6A  C01E  F0B4         	movff	?___ftpack+2,?___ftadd+2
  7454  001F6E  D000               	goto	l1368
  7455  001F70                     l1368:
  7456  001F70  0012               	return		;funcret
  7457  001F72                     __end_of___ftadd:
  7458                           	opt stack 0
  7459                           tblptru	equ	0xFF8
  7460                           tblptrh	equ	0xFF7
  7461                           tblptrl	equ	0xFF6
  7462                           tablat	equ	0xFF5
  7463                           prodh	equ	0xFF4
  7464                           prodl	equ	0xFF3
  7465                           intcon	equ	0xFF2
  7466                           intcon2	equ	0xFF1
  7467                           intcon3	equ	0xFF0
  7468                           postinc0	equ	0xFEE
  7469                           wreg	equ	0xFE8
  7470                           postdec1	equ	0xFE5
  7471                           fsr1l	equ	0xFE1
  7472                           postinc2	equ	0xFDE
  7473                           postdec2	equ	0xFDD
  7474                           fsr2h	equ	0xFDA
  7475                           fsr2l	equ	0xFD9
  7476                           status	equ	0xFD8
  7477                           
  7478 ;; *************** function ___ftneg *****************
  7479 ;; Defined at:
  7480 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftneg.c"
  7481 ;; Parameters:    Size  Location     Type
  7482 ;;  f1              3   27[COMRAM] float 
  7483 ;; Auto vars:     Size  Location     Type
  7484 ;;		None
  7485 ;; Return value:  Size  Location     Type
  7486 ;;                  3   27[COMRAM] float 
  7487 ;; Registers used:
  7488 ;;		wreg, status,2, status,0
  7489 ;; Tracked objects:
  7490 ;;		On entry : 0/0
  7491 ;;		On exit  : 0/0
  7492 ;;		Unchanged: 0/0
  7493 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7494 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7495 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7496 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7497 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7498 ;;Total ram usage:        3 bytes
  7499 ;; Hardware stack levels used:    1
  7500 ;; Hardware stack levels required when called:    5
  7501 ;; This function calls:
  7502 ;;		Nothing
  7503 ;; This function is called by:
  7504 ;;		_printf
  7505 ;; This function uses a non-reentrant model
  7506 ;;
  7507                           
  7508                           	psect	text14
  7509  004A6E                     __ptext14:
  7510                           	opt stack 0
  7511  004A6E                     ___ftneg:
  7512                           	opt stack 24
  7513                           
  7514                           ;incstack = 0
  7515  004A6E  501C               	movf	___ftneg@f1,w,c
  7516  004A70  101D               	iorwf	___ftneg@f1+1,w,c
  7517  004A72  101E               	iorwf	___ftneg@f1+2,w,c
  7518  004A74  B4D8               	btfsc	status,2,c
  7519  004A76  D006               	goto	l1441
  7520  004A78  0E00               	movlw	0
  7521  004A7A  1A1C               	xorwf	___ftneg@f1,f,c
  7522  004A7C  0E00               	movlw	0
  7523  004A7E  1A1D               	xorwf	___ftneg@f1+1,f,c
  7524  004A80  0E80               	movlw	128
  7525  004A82  1A1E               	xorwf	___ftneg@f1+2,f,c
  7526  004A84                     l1441:
  7527  004A84  C01C  F01C         	movff	___ftneg@f1,?___ftneg
  7528  004A88  C01D  F01D         	movff	___ftneg@f1+1,?___ftneg+1
  7529  004A8C  C01E  F01E         	movff	___ftneg@f1+2,?___ftneg+2
  7530  004A90  0012               	return		;funcret
  7531  004A92                     __end_of___ftneg:
  7532                           	opt stack 0
  7533                           tblptru	equ	0xFF8
  7534                           tblptrh	equ	0xFF7
  7535                           tblptrl	equ	0xFF6
  7536                           tablat	equ	0xFF5
  7537                           prodh	equ	0xFF4
  7538                           prodl	equ	0xFF3
  7539                           intcon	equ	0xFF2
  7540                           intcon2	equ	0xFF1
  7541                           intcon3	equ	0xFF0
  7542                           postinc0	equ	0xFEE
  7543                           wreg	equ	0xFE8
  7544                           postdec1	equ	0xFE5
  7545                           fsr1l	equ	0xFE1
  7546                           postinc2	equ	0xFDE
  7547                           postdec2	equ	0xFDD
  7548                           fsr2h	equ	0xFDA
  7549                           fsr2l	equ	0xFD9
  7550                           status	equ	0xFD8
  7551                           
  7552 ;; *************** function _init_UART *****************
  7553 ;; Defined at:
  7554 ;;		line 1620 in file "lab_final_alt.c"
  7555 ;; Parameters:    Size  Location     Type
  7556 ;;		None
  7557 ;; Auto vars:     Size  Location     Type
  7558 ;;		None
  7559 ;; Return value:  Size  Location     Type
  7560 ;;		None               void
  7561 ;; Registers used:
  7562 ;;		wreg, status,2, cstack
  7563 ;; Tracked objects:
  7564 ;;		On entry : 0/0
  7565 ;;		On exit  : 0/0
  7566 ;;		Unchanged: 0/0
  7567 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7568 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7569 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7570 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7571 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7572 ;;Total ram usage:        0 bytes
  7573 ;; Hardware stack levels used:    1
  7574 ;; Hardware stack levels required when called:    6
  7575 ;; This function calls:
  7576 ;;		_OpenUSART
  7577 ;; This function is called by:
  7578 ;;		_main
  7579 ;; This function uses a non-reentrant model
  7580 ;;
  7581                           
  7582                           	psect	text15
  7583  004B5C                     __ptext15:
  7584                           	opt stack 0
  7585  004B5C                     _init_UART:
  7586                           	opt stack 24
  7587                           
  7588                           ;lab_final_alt.c: 1622: OpenUSART (0b01111111 & 0b10111111 & 0b11111110 & 0b11111101 & 0
      +                          b11111111 & 0b11111111, 25);
  7589                           
  7590                           ;incstack = 0
  7591  004B5C  0E00               	movlw	0
  7592  004B5E  6E1D               	movwf	OpenUSART@spbrg+1,c
  7593  004B60  0E19               	movlw	25
  7594  004B62  6E1C               	movwf	OpenUSART@spbrg,c
  7595  004B64  0E3C               	movlw	60
  7596  004B66  ECB6  F020         	call	_OpenUSART
  7597                           
  7598                           ;lab_final_alt.c: 1623: OSCCON = 0x70;
  7599  004B6A  0E70               	movlw	112
  7600  004B6C  6ED3               	movwf	4051,c	;volatile
  7601  004B6E  0012               	return		;funcret
  7602  004B70                     __end_of_init_UART:
  7603                           	opt stack 0
  7604                           tblptru	equ	0xFF8
  7605                           tblptrh	equ	0xFF7
  7606                           tblptrl	equ	0xFF6
  7607                           tablat	equ	0xFF5
  7608                           prodh	equ	0xFF4
  7609                           prodl	equ	0xFF3
  7610                           intcon	equ	0xFF2
  7611                           intcon2	equ	0xFF1
  7612                           intcon3	equ	0xFF0
  7613                           postinc0	equ	0xFEE
  7614                           wreg	equ	0xFE8
  7615                           postdec1	equ	0xFE5
  7616                           fsr1l	equ	0xFE1
  7617                           postinc2	equ	0xFDE
  7618                           postdec2	equ	0xFDD
  7619                           fsr2h	equ	0xFDA
  7620                           fsr2l	equ	0xFD9
  7621                           status	equ	0xFD8
  7622                           
  7623 ;; *************** function _OpenUSART *****************
  7624 ;; Defined at:
  7625 ;;		line 73 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\USART\uopen.c"
  7626 ;; Parameters:    Size  Location     Type
  7627 ;;  config          1    wreg     unsigned char 
  7628 ;;  spbrg           2   27[COMRAM] unsigned int 
  7629 ;; Auto vars:     Size  Location     Type
  7630 ;;  config          1   29[COMRAM] unsigned char 
  7631 ;; Return value:  Size  Location     Type
  7632 ;;		None               void
  7633 ;; Registers used:
  7634 ;;		wreg, status,2
  7635 ;; Tracked objects:
  7636 ;;		On entry : 0/0
  7637 ;;		On exit  : 0/0
  7638 ;;		Unchanged: 0/0
  7639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7640 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7641 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7642 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7643 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7644 ;;Total ram usage:        3 bytes
  7645 ;; Hardware stack levels used:    1
  7646 ;; Hardware stack levels required when called:    5
  7647 ;; This function calls:
  7648 ;;		Nothing
  7649 ;; This function is called by:
  7650 ;;		_init_UART
  7651 ;; This function uses a non-reentrant model
  7652 ;;
  7653                           
  7654                           	psect	text16
  7655  00416C                     __ptext16:
  7656                           	opt stack 0
  7657  00416C                     _OpenUSART:
  7658                           	opt stack 24
  7659                           
  7660                           ;incstack = 0
  7661                           ;OpenUSART@config stored from wreg
  7662  00416C  6E1E               	movwf	OpenUSART@config,c
  7663  00416E  0E00               	movlw	0
  7664  004170  6EAC               	movwf	4012,c	;volatile
  7665  004172  0E00               	movlw	0
  7666  004174  6EAB               	movwf	4011,c	;volatile
  7667  004176  A01E               	btfss	OpenUSART@config,0,c
  7668  004178  D002               	goto	l5508
  7669  00417A  88AC               	bsf	4012,4,c	;volatile
  7670  00417C  D000               	goto	l5508
  7671  00417E                     l5508:
  7672  00417E  A21E               	btfss	OpenUSART@config,1,c
  7673  004180  D003               	goto	l5512
  7674  004182  8CAC               	bsf	4012,6,c	;volatile
  7675  004184  8CAB               	bsf	4011,6,c	;volatile
  7676  004186  D000               	goto	l5512
  7677  004188                     l5512:
  7678  004188  A41E               	btfss	OpenUSART@config,2,c
  7679  00418A  D002               	goto	l5516
  7680  00418C  8EAC               	bsf	4012,7,c	;volatile
  7681  00418E  D000               	goto	l5516
  7682  004190                     l5516:
  7683  004190  A61E               	btfss	OpenUSART@config,3,c
  7684  004192  D002               	goto	l990
  7685  004194  88AB               	bsf	4011,4,c	;volatile
  7686  004196  D002               	goto	l5520
  7687  004198                     l990:
  7688  004198  8AAB               	bsf	4011,5,c	;volatile
  7689  00419A  D000               	goto	l5520
  7690  00419C                     l5520:
  7691  00419C  B81E               	btfsc	OpenUSART@config,4,c
  7692  00419E  84AC               	bsf	4012,2,c	;volatile
  7693  0041A0  989E               	bcf	3998,4,c	;volatile
  7694  0041A2  AA1E               	btfss	OpenUSART@config,5,c
  7695  0041A4  D002               	goto	l5528
  7696  0041A6  86AB               	bsf	4011,3,c	;volatile
  7697  0041A8  D000               	goto	l5528
  7698  0041AA                     l5528:
  7699  0041AA  AC1E               	btfss	OpenUSART@config,6,c
  7700  0041AC  D002               	goto	l994
  7701  0041AE  8A9D               	bsf	3997,5,c	;volatile
  7702  0041B0  D001               	goto	l995
  7703  0041B2                     l994:
  7704  0041B2  9A9D               	bcf	3997,5,c	;volatile
  7705  0041B4                     l995:
  7706  0041B4  9A9E               	bcf	3998,5,c	;volatile
  7707  0041B6  AE1E               	btfss	OpenUSART@config,7,c
  7708  0041B8  D002               	goto	l996
  7709  0041BA  889D               	bsf	3997,4,c	;volatile
  7710  0041BC  D001               	goto	l997
  7711  0041BE                     l996:
  7712  0041BE  989D               	bcf	3997,4,c	;volatile
  7713  0041C0                     l997:
  7714  0041C0  C01C  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
  7715  0041C4  501D               	movf	OpenUSART@spbrg+1,w,c
  7716  0041C6  6EB0               	movwf	4016,c	;volatile
  7717  0041C8  8AAC               	bsf	4012,5,c	;volatile
  7718  0041CA  8EAB               	bsf	4011,7,c	;volatile
  7719  0041CC  9C94               	bcf	3988,6,c	;volatile
  7720  0041CE  8E94               	bsf	3988,7,c	;volatile
  7721  0041D0  B8AC               	btfsc	4012,4,c	;volatile
  7722  0041D2  BEAC               	btfsc	4012,7,c	;volatile
  7723  0041D4  D002               	goto	l999
  7724  0041D6  8C94               	bsf	3988,6,c	;volatile
  7725  0041D8  D000               	goto	l999
  7726  0041DA                     l999:
  7727  0041DA  0012               	return		;funcret
  7728  0041DC                     __end_of_OpenUSART:
  7729                           	opt stack 0
  7730                           tblptru	equ	0xFF8
  7731                           tblptrh	equ	0xFF7
  7732                           tblptrl	equ	0xFF6
  7733                           tablat	equ	0xFF5
  7734                           prodh	equ	0xFF4
  7735                           prodl	equ	0xFF3
  7736                           intcon	equ	0xFF2
  7737                           intcon2	equ	0xFF1
  7738                           intcon3	equ	0xFF0
  7739                           postinc0	equ	0xFEE
  7740                           wreg	equ	0xFE8
  7741                           postdec1	equ	0xFE5
  7742                           fsr1l	equ	0xFE1
  7743                           postinc2	equ	0xFDE
  7744                           postdec2	equ	0xFDD
  7745                           fsr2h	equ	0xFDA
  7746                           fsr2l	equ	0xFD9
  7747                           status	equ	0xFD8
  7748                           
  7749 ;; *************** function _gen_2khz_sound *****************
  7750 ;; Defined at:
  7751 ;;		line 2386 in file "lab_final_alt.c"
  7752 ;; Parameters:    Size  Location     Type
  7753 ;;		None
  7754 ;; Auto vars:     Size  Location     Type
  7755 ;;		None
  7756 ;; Return value:  Size  Location     Type
  7757 ;;		None               void
  7758 ;; Registers used:
  7759 ;;		wreg, status,2
  7760 ;; Tracked objects:
  7761 ;;		On entry : 0/0
  7762 ;;		On exit  : 0/0
  7763 ;;		Unchanged: 0/0
  7764 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7765 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7766 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7767 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7768 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7769 ;;Total ram usage:        0 bytes
  7770 ;; Hardware stack levels used:    1
  7771 ;; Hardware stack levels required when called:    5
  7772 ;; This function calls:
  7773 ;;		Nothing
  7774 ;; This function is called by:
  7775 ;;		_main
  7776 ;; This function uses a non-reentrant model
  7777 ;;
  7778                           
  7779                           	psect	text17
  7780  004B84                     __ptext17:
  7781                           	opt stack 0
  7782  004B84                     _gen_2khz_sound:
  7783                           	opt stack 25
  7784                           
  7785                           ;lab_final_alt.c: 2388: PR2 = 0b01111100 ;
  7786                           
  7787                           ;incstack = 0
  7788  004B84  0E7C               	movlw	124
  7789  004B86  6ECB               	movwf	4043,c	;volatile
  7790                           
  7791                           ;lab_final_alt.c: 2389: T2CON = 0b00000101 ;
  7792  004B88  0E05               	movlw	5
  7793  004B8A  6ECA               	movwf	4042,c	;volatile
  7794                           
  7795                           ;lab_final_alt.c: 2390: CCPR2L = 0b00111110 ;
  7796  004B8C  0E3E               	movlw	62
  7797  004B8E  6EBB               	movwf	4027,c	;volatile
  7798                           
  7799                           ;lab_final_alt.c: 2391: CCP2CON = 0b00011100 ;
  7800  004B90  0E1C               	movlw	28
  7801  004B92  6EBA               	movwf	4026,c	;volatile
  7802  004B94  0012               	return		;funcret
  7803  004B96                     __end_of_gen_2khz_sound:
  7804                           	opt stack 0
  7805                           tblptru	equ	0xFF8
  7806                           tblptrh	equ	0xFF7
  7807                           tblptrl	equ	0xFF6
  7808                           tablat	equ	0xFF5
  7809                           prodh	equ	0xFF4
  7810                           prodl	equ	0xFF3
  7811                           intcon	equ	0xFF2
  7812                           intcon2	equ	0xFF1
  7813                           intcon3	equ	0xFF0
  7814                           postinc0	equ	0xFEE
  7815                           wreg	equ	0xFE8
  7816                           postdec1	equ	0xFE5
  7817                           fsr1l	equ	0xFE1
  7818                           postinc2	equ	0xFDE
  7819                           postdec2	equ	0xFDD
  7820                           fsr2h	equ	0xFDA
  7821                           fsr2l	equ	0xFD9
  7822                           status	equ	0xFD8
  7823                           
  7824 ;; *************** function _TFT_GreenTab_Initialize *****************
  7825 ;; Defined at:
  7826 ;;		line 656 in file "ST7735_TFT.inc"
  7827 ;; Parameters:    Size  Location     Type
  7828 ;;		None
  7829 ;; Auto vars:     Size  Location     Type
  7830 ;;		None
  7831 ;; Return value:  Size  Location     Type
  7832 ;;		None               void
  7833 ;; Registers used:
  7834 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7835 ;; Tracked objects:
  7836 ;;		On entry : 0/0
  7837 ;;		On exit  : 0/0
  7838 ;;		Unchanged: 0/0
  7839 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7840 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7841 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7842 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7843 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7844 ;;Total ram usage:        0 bytes
  7845 ;; Hardware stack levels used:    1
  7846 ;; Hardware stack levels required when called:    8
  7847 ;; This function calls:
  7848 ;;		_Rcmd1
  7849 ;;		_Rcmd2red
  7850 ;;		_Rcmd3
  7851 ;;		_write_command
  7852 ;;		_write_data
  7853 ;; This function is called by:
  7854 ;;		_main
  7855 ;; This function uses a non-reentrant model
  7856 ;;
  7857                           
  7858                           	psect	text18
  7859  00495C                     __ptext18:
  7860                           	opt stack 0
  7861  00495C                     _TFT_GreenTab_Initialize:
  7862                           	opt stack 22
  7863                           
  7864                           ;ST7735_TFT.inc: 658: PORTEbits.RE1 = 1;
  7865                           
  7866                           ;incstack = 0
  7867  00495C  8284               	bsf	3972,1,c	;volatile
  7868                           
  7869                           ;ST7735_TFT.inc: 659: PORTEbits.RE0 = 0;
  7870  00495E  9084               	bcf	3972,0,c	;volatile
  7871                           
  7872                           ;ST7735_TFT.inc: 661: SSPSTAT=0x80;
  7873  004960  0E80               	movlw	128
  7874  004962  6EC7               	movwf	4039,c	;volatile
  7875                           
  7876                           ;ST7735_TFT.inc: 662: SSPCON1=0x30;
  7877  004964  0E30               	movlw	48
  7878  004966  6EC6               	movwf	4038,c	;volatile
  7879                           
  7880                           ;ST7735_TFT.inc: 665: Rcmd1();
  7881  004968  ECDC  F018         	call	_Rcmd1	;wreg free
  7882                           
  7883                           ;ST7735_TFT.inc: 666: Rcmd2red();
  7884  00496C  EC14  F023         	call	_Rcmd2red	;wreg free
  7885                           
  7886                           ;ST7735_TFT.inc: 667: Rcmd3();
  7887  004970  EC6C  F01B         	call	_Rcmd3	;wreg free
  7888                           
  7889                           ;ST7735_TFT.inc: 668: write_command(0x36);
  7890  004974  0E36               	movlw	54
  7891  004976  EC09  F026         	call	_write_command
  7892                           
  7893                           ;ST7735_TFT.inc: 669: write_data(0xC0);
  7894  00497A  0EC0               	movlw	192
  7895  00497C  EC01  F026         	call	_write_data
  7896                           
  7897                           ;ST7735_TFT.inc: 670: _tft_type = 1;
  7898  004980  0E01               	movlw	1
  7899  004982  6E51               	movwf	__tft_type,c
  7900  004984  0012               	return		;funcret
  7901  004986                     __end_of_TFT_GreenTab_Initialize:
  7902                           	opt stack 0
  7903                           tblptru	equ	0xFF8
  7904                           tblptrh	equ	0xFF7
  7905                           tblptrl	equ	0xFF6
  7906                           tablat	equ	0xFF5
  7907                           prodh	equ	0xFF4
  7908                           prodl	equ	0xFF3
  7909                           intcon	equ	0xFF2
  7910                           intcon2	equ	0xFF1
  7911                           intcon3	equ	0xFF0
  7912                           postinc0	equ	0xFEE
  7913                           wreg	equ	0xFE8
  7914                           postdec1	equ	0xFE5
  7915                           fsr1l	equ	0xFE1
  7916                           postinc2	equ	0xFDE
  7917                           postdec2	equ	0xFDD
  7918                           fsr2h	equ	0xFDA
  7919                           fsr2l	equ	0xFD9
  7920                           status	equ	0xFD8
  7921                           
  7922 ;; *************** function _Rcmd3 *****************
  7923 ;; Defined at:
  7924 ;;		line 350 in file "ST7735_TFT.inc"
  7925 ;; Parameters:    Size  Location     Type
  7926 ;;		None
  7927 ;; Auto vars:     Size  Location     Type
  7928 ;;		None
  7929 ;; Return value:  Size  Location     Type
  7930 ;;		None               void
  7931 ;; Registers used:
  7932 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7933 ;; Tracked objects:
  7934 ;;		On entry : 0/0
  7935 ;;		On exit  : 0/0
  7936 ;;		Unchanged: 0/0
  7937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7938 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7939 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7940 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7941 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7942 ;;Total ram usage:        0 bytes
  7943 ;; Hardware stack levels used:    1
  7944 ;; Hardware stack levels required when called:    7
  7945 ;; This function calls:
  7946 ;;		_delay_ms
  7947 ;;		_write_command
  7948 ;;		_write_data
  7949 ;; This function is called by:
  7950 ;;		_TFT_GreenTab_Initialize
  7951 ;;		_TFT_BlackTab_Initialize
  7952 ;; This function uses a non-reentrant model
  7953 ;;
  7954                           
  7955                           	psect	text19
  7956  0036D8                     __ptext19:
  7957                           	opt stack 0
  7958  0036D8                     _Rcmd3:
  7959                           	opt stack 22
  7960                           
  7961                           ;ST7735_TFT.inc: 352: write_command(0xE0);
  7962                           
  7963                           ;incstack = 0
  7964  0036D8  0EE0               	movlw	224
  7965  0036DA  EC09  F026         	call	_write_command
  7966                           
  7967                           ;ST7735_TFT.inc: 353: write_data(0x02); write_data(0x1C); write_data(0x07); write_data(0
      +                          x12);
  7968  0036DE  0E02               	movlw	2
  7969  0036E0  EC01  F026         	call	_write_data
  7970  0036E4  0E1C               	movlw	28
  7971  0036E6  EC01  F026         	call	_write_data
  7972  0036EA  0E07               	movlw	7
  7973  0036EC  EC01  F026         	call	_write_data
  7974  0036F0  0E12               	movlw	18
  7975  0036F2  EC01  F026         	call	_write_data
  7976                           
  7977                           ;ST7735_TFT.inc: 354: write_data(0x37); write_data(0x32); write_data(0x29); write_data(0
      +                          x2D);
  7978  0036F6  0E37               	movlw	55
  7979  0036F8  EC01  F026         	call	_write_data
  7980  0036FC  0E32               	movlw	50
  7981  0036FE  EC01  F026         	call	_write_data
  7982  003702  0E29               	movlw	41
  7983  003704  EC01  F026         	call	_write_data
  7984  003708  0E2D               	movlw	45
  7985  00370A  EC01  F026         	call	_write_data
  7986                           
  7987                           ;ST7735_TFT.inc: 355: write_data(0x29); write_data(0x25); write_data(0x2B); write_data(0
      +                          x39);
  7988  00370E  0E29               	movlw	41
  7989  003710  EC01  F026         	call	_write_data
  7990  003714  0E25               	movlw	37
  7991  003716  EC01  F026         	call	_write_data
  7992  00371A  0E2B               	movlw	43
  7993  00371C  EC01  F026         	call	_write_data
  7994  003720  0E39               	movlw	57
  7995  003722  EC01  F026         	call	_write_data
  7996                           
  7997                           ;ST7735_TFT.inc: 356: write_data(0x00); write_data(0x01); write_data(0x03); write_data(0
      +                          x10);
  7998  003726  0E00               	movlw	0
  7999  003728  EC01  F026         	call	_write_data
  8000  00372C  0E01               	movlw	1
  8001  00372E  EC01  F026         	call	_write_data
  8002  003732  0E03               	movlw	3
  8003  003734  EC01  F026         	call	_write_data
  8004  003738  0E10               	movlw	16
  8005  00373A  EC01  F026         	call	_write_data
  8006                           
  8007                           ;ST7735_TFT.inc: 357: write_command(0xE1);
  8008  00373E  0EE1               	movlw	225
  8009  003740  EC09  F026         	call	_write_command
  8010                           
  8011                           ;ST7735_TFT.inc: 358: write_data(0x03); write_data(0x1D); write_data(0x07); write_data(0
      +                          x06);
  8012  003744  0E03               	movlw	3
  8013  003746  EC01  F026         	call	_write_data
  8014  00374A  0E1D               	movlw	29
  8015  00374C  EC01  F026         	call	_write_data
  8016  003750  0E07               	movlw	7
  8017  003752  EC01  F026         	call	_write_data
  8018  003756  0E06               	movlw	6
  8019  003758  EC01  F026         	call	_write_data
  8020                           
  8021                           ;ST7735_TFT.inc: 359: write_data(0x2E); write_data(0x2C); write_data(0x29); write_data(0
      +                          x2D);
  8022  00375C  0E2E               	movlw	46
  8023  00375E  EC01  F026         	call	_write_data
  8024  003762  0E2C               	movlw	44
  8025  003764  EC01  F026         	call	_write_data
  8026  003768  0E29               	movlw	41
  8027  00376A  EC01  F026         	call	_write_data
  8028  00376E  0E2D               	movlw	45
  8029  003770  EC01  F026         	call	_write_data
  8030                           
  8031                           ;ST7735_TFT.inc: 360: write_data(0x2E); write_data(0x2E); write_data(0x37); write_data(0
      +                          x3F);
  8032  003774  0E2E               	movlw	46
  8033  003776  EC01  F026         	call	_write_data
  8034  00377A  0E2E               	movlw	46
  8035  00377C  EC01  F026         	call	_write_data
  8036  003780  0E37               	movlw	55
  8037  003782  EC01  F026         	call	_write_data
  8038  003786  0E3F               	movlw	63
  8039  003788  EC01  F026         	call	_write_data
  8040                           
  8041                           ;ST7735_TFT.inc: 361: write_data(0x00); write_data(0x00); write_data(0x02); write_data(0
      +                          x10);
  8042  00378C  0E00               	movlw	0
  8043  00378E  EC01  F026         	call	_write_data
  8044  003792  0E00               	movlw	0
  8045  003794  EC01  F026         	call	_write_data
  8046  003798  0E02               	movlw	2
  8047  00379A  EC01  F026         	call	_write_data
  8048  00379E  0E10               	movlw	16
  8049  0037A0  EC01  F026         	call	_write_data
  8050                           
  8051                           ;ST7735_TFT.inc: 362: write_command(0x13);
  8052  0037A4  0E13               	movlw	19
  8053  0037A6  EC09  F026         	call	_write_command
  8054                           
  8055                           ;ST7735_TFT.inc: 363: delay_ms(10);
  8056  0037AA  0E00               	movlw	0
  8057  0037AC  6E31               	movwf	delay_ms@ms+1,c
  8058  0037AE  0E0A               	movlw	10
  8059  0037B0  6E30               	movwf	delay_ms@ms,c
  8060  0037B2  ECDF  F021         	call	_delay_ms	;wreg free
  8061                           
  8062                           ;ST7735_TFT.inc: 364: write_command(0x29);
  8063  0037B6  0E29               	movlw	41
  8064  0037B8  EC09  F026         	call	_write_command
  8065                           
  8066                           ;ST7735_TFT.inc: 365: delay_ms(100);
  8067  0037BC  0E00               	movlw	0
  8068  0037BE  6E31               	movwf	delay_ms@ms+1,c
  8069  0037C0  0E64               	movlw	100
  8070  0037C2  6E30               	movwf	delay_ms@ms,c
  8071  0037C4  ECDF  F021         	call	_delay_ms	;wreg free
  8072  0037C8  0012               	return		;funcret
  8073  0037CA                     __end_of_Rcmd3:
  8074                           	opt stack 0
  8075                           tblptru	equ	0xFF8
  8076                           tblptrh	equ	0xFF7
  8077                           tblptrl	equ	0xFF6
  8078                           tablat	equ	0xFF5
  8079                           prodh	equ	0xFF4
  8080                           prodl	equ	0xFF3
  8081                           intcon	equ	0xFF2
  8082                           intcon2	equ	0xFF1
  8083                           intcon3	equ	0xFF0
  8084                           postinc0	equ	0xFEE
  8085                           wreg	equ	0xFE8
  8086                           postdec1	equ	0xFE5
  8087                           fsr1l	equ	0xFE1
  8088                           postinc2	equ	0xFDE
  8089                           postdec2	equ	0xFDD
  8090                           fsr2h	equ	0xFDA
  8091                           fsr2l	equ	0xFD9
  8092                           status	equ	0xFD8
  8093                           
  8094 ;; *************** function _Rcmd2red *****************
  8095 ;; Defined at:
  8096 ;;		line 340 in file "ST7735_TFT.inc"
  8097 ;; Parameters:    Size  Location     Type
  8098 ;;		None
  8099 ;; Auto vars:     Size  Location     Type
  8100 ;;		None
  8101 ;; Return value:  Size  Location     Type
  8102 ;;		None               void
  8103 ;; Registers used:
  8104 ;;		wreg, status,2, cstack
  8105 ;; Tracked objects:
  8106 ;;		On entry : 0/0
  8107 ;;		On exit  : 0/0
  8108 ;;		Unchanged: 0/0
  8109 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8110 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8111 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8112 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8113 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8114 ;;Total ram usage:        0 bytes
  8115 ;; Hardware stack levels used:    1
  8116 ;; Hardware stack levels required when called:    7
  8117 ;; This function calls:
  8118 ;;		_write_command
  8119 ;;		_write_data
  8120 ;; This function is called by:
  8121 ;;		_TFT_GreenTab_Initialize
  8122 ;; This function uses a non-reentrant model
  8123 ;;
  8124                           
  8125                           	psect	text20
  8126  004628                     __ptext20:
  8127                           	opt stack 0
  8128  004628                     _Rcmd2red:
  8129                           	opt stack 22
  8130                           
  8131                           ;ST7735_TFT.inc: 342: write_command(0x2A);
  8132                           
  8133                           ;incstack = 0
  8134  004628  0E2A               	movlw	42
  8135  00462A  EC09  F026         	call	_write_command
  8136                           
  8137                           ;ST7735_TFT.inc: 343: write_data(0x00); write_data(0x00);
  8138  00462E  0E00               	movlw	0
  8139  004630  EC01  F026         	call	_write_data
  8140  004634  0E00               	movlw	0
  8141  004636  EC01  F026         	call	_write_data
  8142                           
  8143                           ;ST7735_TFT.inc: 344: write_data(0x00); write_data(0x7F);
  8144  00463A  0E00               	movlw	0
  8145  00463C  EC01  F026         	call	_write_data
  8146  004640  0E7F               	movlw	127
  8147  004642  EC01  F026         	call	_write_data
  8148                           
  8149                           ;ST7735_TFT.inc: 345: write_command(0x2B);
  8150  004646  0E2B               	movlw	43
  8151  004648  EC09  F026         	call	_write_command
  8152                           
  8153                           ;ST7735_TFT.inc: 346: write_data(0x00); write_data(0x00);
  8154  00464C  0E00               	movlw	0
  8155  00464E  EC01  F026         	call	_write_data
  8156  004652  0E00               	movlw	0
  8157  004654  EC01  F026         	call	_write_data
  8158                           
  8159                           ;ST7735_TFT.inc: 347: write_data(0x00); write_data(0x9F);
  8160  004658  0E00               	movlw	0
  8161  00465A  EC01  F026         	call	_write_data
  8162  00465E  0E9F               	movlw	159
  8163  004660  EC01  F026         	call	_write_data
  8164  004664  0012               	return		;funcret
  8165  004666                     __end_of_Rcmd2red:
  8166                           	opt stack 0
  8167                           tblptru	equ	0xFF8
  8168                           tblptrh	equ	0xFF7
  8169                           tblptrl	equ	0xFF6
  8170                           tablat	equ	0xFF5
  8171                           prodh	equ	0xFF4
  8172                           prodl	equ	0xFF3
  8173                           intcon	equ	0xFF2
  8174                           intcon2	equ	0xFF1
  8175                           intcon3	equ	0xFF0
  8176                           postinc0	equ	0xFEE
  8177                           wreg	equ	0xFE8
  8178                           postdec1	equ	0xFE5
  8179                           fsr1l	equ	0xFE1
  8180                           postinc2	equ	0xFDE
  8181                           postdec2	equ	0xFDD
  8182                           fsr2h	equ	0xFDA
  8183                           fsr2l	equ	0xFD9
  8184                           status	equ	0xFD8
  8185                           
  8186 ;; *************** function _Rcmd1 *****************
  8187 ;; Defined at:
  8188 ;;		line 293 in file "ST7735_TFT.inc"
  8189 ;; Parameters:    Size  Location     Type
  8190 ;;		None
  8191 ;; Auto vars:     Size  Location     Type
  8192 ;;		None
  8193 ;; Return value:  Size  Location     Type
  8194 ;;		None               void
  8195 ;; Registers used:
  8196 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  8197 ;; Tracked objects:
  8198 ;;		On entry : 0/0
  8199 ;;		On exit  : 0/0
  8200 ;;		Unchanged: 0/0
  8201 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8202 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8203 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8204 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8205 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8206 ;;Total ram usage:        0 bytes
  8207 ;; Hardware stack levels used:    1
  8208 ;; Hardware stack levels required when called:    7
  8209 ;; This function calls:
  8210 ;;		_delay_ms
  8211 ;;		_write_command
  8212 ;;		_write_data
  8213 ;; This function is called by:
  8214 ;;		_TFT_GreenTab_Initialize
  8215 ;;		_TFT_BlackTab_Initialize
  8216 ;; This function uses a non-reentrant model
  8217 ;;
  8218                           
  8219                           	psect	text21
  8220  0031B8                     __ptext21:
  8221                           	opt stack 0
  8222  0031B8                     _Rcmd1:
  8223                           	opt stack 22
  8224                           
  8225                           ;ST7735_TFT.inc: 295: write_command(0x01);
  8226                           
  8227                           ;incstack = 0
  8228  0031B8  0E01               	movlw	1
  8229  0031BA  EC09  F026         	call	_write_command
  8230                           
  8231                           ;ST7735_TFT.inc: 296: delay_ms(150);
  8232  0031BE  0E00               	movlw	0
  8233  0031C0  6E31               	movwf	delay_ms@ms+1,c
  8234  0031C2  0E96               	movlw	150
  8235  0031C4  6E30               	movwf	delay_ms@ms,c
  8236  0031C6  ECDF  F021         	call	_delay_ms	;wreg free
  8237                           
  8238                           ;ST7735_TFT.inc: 297: write_command(0x11);
  8239  0031CA  0E11               	movlw	17
  8240  0031CC  EC09  F026         	call	_write_command
  8241                           
  8242                           ;ST7735_TFT.inc: 298: delay_ms(500);
  8243  0031D0  0E01               	movlw	1
  8244  0031D2  6E31               	movwf	delay_ms@ms+1,c
  8245  0031D4  0EF4               	movlw	244
  8246  0031D6  6E30               	movwf	delay_ms@ms,c
  8247  0031D8  ECDF  F021         	call	_delay_ms	;wreg free
  8248                           
  8249                           ;ST7735_TFT.inc: 299: write_command(0xB1);
  8250  0031DC  0EB1               	movlw	177
  8251  0031DE  EC09  F026         	call	_write_command
  8252                           
  8253                           ;ST7735_TFT.inc: 300: write_data(0x01);
  8254  0031E2  0E01               	movlw	1
  8255  0031E4  EC01  F026         	call	_write_data
  8256                           
  8257                           ;ST7735_TFT.inc: 301: write_data(0x2C);
  8258  0031E8  0E2C               	movlw	44
  8259  0031EA  EC01  F026         	call	_write_data
  8260                           
  8261                           ;ST7735_TFT.inc: 302: write_data(0x2D);
  8262  0031EE  0E2D               	movlw	45
  8263  0031F0  EC01  F026         	call	_write_data
  8264                           
  8265                           ;ST7735_TFT.inc: 303: write_command(0xB2);
  8266  0031F4  0EB2               	movlw	178
  8267  0031F6  EC09  F026         	call	_write_command
  8268                           
  8269                           ;ST7735_TFT.inc: 304: write_data(0x01);
  8270  0031FA  0E01               	movlw	1
  8271  0031FC  EC01  F026         	call	_write_data
  8272                           
  8273                           ;ST7735_TFT.inc: 305: write_data(0x2C);
  8274  003200  0E2C               	movlw	44
  8275  003202  EC01  F026         	call	_write_data
  8276                           
  8277                           ;ST7735_TFT.inc: 306: write_data(0x2D);
  8278  003206  0E2D               	movlw	45
  8279  003208  EC01  F026         	call	_write_data
  8280                           
  8281                           ;ST7735_TFT.inc: 307: write_command(0xB3);
  8282  00320C  0EB3               	movlw	179
  8283  00320E  EC09  F026         	call	_write_command
  8284                           
  8285                           ;ST7735_TFT.inc: 308: write_data(0x01);
  8286  003212  0E01               	movlw	1
  8287  003214  EC01  F026         	call	_write_data
  8288                           
  8289                           ;ST7735_TFT.inc: 309: write_data(0x2C);
  8290  003218  0E2C               	movlw	44
  8291  00321A  EC01  F026         	call	_write_data
  8292                           
  8293                           ;ST7735_TFT.inc: 310: write_data(0x2D);
  8294  00321E  0E2D               	movlw	45
  8295  003220  EC01  F026         	call	_write_data
  8296                           
  8297                           ;ST7735_TFT.inc: 311: write_data(0x01);
  8298  003224  0E01               	movlw	1
  8299  003226  EC01  F026         	call	_write_data
  8300                           
  8301                           ;ST7735_TFT.inc: 312: write_data(0x2C);
  8302  00322A  0E2C               	movlw	44
  8303  00322C  EC01  F026         	call	_write_data
  8304                           
  8305                           ;ST7735_TFT.inc: 313: write_data(0x2D);
  8306  003230  0E2D               	movlw	45
  8307  003232  EC01  F026         	call	_write_data
  8308                           
  8309                           ;ST7735_TFT.inc: 314: write_command(0xB4);
  8310  003236  0EB4               	movlw	180
  8311  003238  EC09  F026         	call	_write_command
  8312                           
  8313                           ;ST7735_TFT.inc: 315: write_data(0x07);
  8314  00323C  0E07               	movlw	7
  8315  00323E  EC01  F026         	call	_write_data
  8316                           
  8317                           ;ST7735_TFT.inc: 316: write_command(0xC0);
  8318  003242  0EC0               	movlw	192
  8319  003244  EC09  F026         	call	_write_command
  8320                           
  8321                           ;ST7735_TFT.inc: 317: write_data(0xA2);
  8322  003248  0EA2               	movlw	162
  8323  00324A  EC01  F026         	call	_write_data
  8324                           
  8325                           ;ST7735_TFT.inc: 318: write_data(0x02);
  8326  00324E  0E02               	movlw	2
  8327  003250  EC01  F026         	call	_write_data
  8328                           
  8329                           ;ST7735_TFT.inc: 319: write_data(0x84);
  8330  003254  0E84               	movlw	132
  8331  003256  EC01  F026         	call	_write_data
  8332                           
  8333                           ;ST7735_TFT.inc: 320: write_command(0xC1);
  8334  00325A  0EC1               	movlw	193
  8335  00325C  EC09  F026         	call	_write_command
  8336                           
  8337                           ;ST7735_TFT.inc: 321: write_data(0xC5);
  8338  003260  0EC5               	movlw	197
  8339  003262  EC01  F026         	call	_write_data
  8340                           
  8341                           ;ST7735_TFT.inc: 322: write_command(0xC2);
  8342  003266  0EC2               	movlw	194
  8343  003268  EC09  F026         	call	_write_command
  8344                           
  8345                           ;ST7735_TFT.inc: 323: write_data(0x0A);
  8346  00326C  0E0A               	movlw	10
  8347  00326E  EC01  F026         	call	_write_data
  8348                           
  8349                           ;ST7735_TFT.inc: 324: write_data(0x00);
  8350  003272  0E00               	movlw	0
  8351  003274  EC01  F026         	call	_write_data
  8352                           
  8353                           ;ST7735_TFT.inc: 325: write_command(0xC3);
  8354  003278  0EC3               	movlw	195
  8355  00327A  EC09  F026         	call	_write_command
  8356                           
  8357                           ;ST7735_TFT.inc: 326: write_data(0x8A);
  8358  00327E  0E8A               	movlw	138
  8359  003280  EC01  F026         	call	_write_data
  8360                           
  8361                           ;ST7735_TFT.inc: 327: write_data(0x2A);
  8362  003284  0E2A               	movlw	42
  8363  003286  EC01  F026         	call	_write_data
  8364                           
  8365                           ;ST7735_TFT.inc: 328: write_command(0xC4);
  8366  00328A  0EC4               	movlw	196
  8367  00328C  EC09  F026         	call	_write_command
  8368                           
  8369                           ;ST7735_TFT.inc: 329: write_data(0x8A);
  8370  003290  0E8A               	movlw	138
  8371  003292  EC01  F026         	call	_write_data
  8372                           
  8373                           ;ST7735_TFT.inc: 330: write_data(0xEE);
  8374  003296  0EEE               	movlw	238
  8375  003298  EC01  F026         	call	_write_data
  8376                           
  8377                           ;ST7735_TFT.inc: 331: write_command(0xC5);
  8378  00329C  0EC5               	movlw	197
  8379  00329E  EC09  F026         	call	_write_command
  8380                           
  8381                           ;ST7735_TFT.inc: 332: write_data(0x0E);
  8382  0032A2  0E0E               	movlw	14
  8383  0032A4  EC01  F026         	call	_write_data
  8384                           
  8385                           ;ST7735_TFT.inc: 333: write_command(0x20);
  8386  0032A8  0E20               	movlw	32
  8387  0032AA  EC09  F026         	call	_write_command
  8388                           
  8389                           ;ST7735_TFT.inc: 334: write_command(0x36);
  8390  0032AE  0E36               	movlw	54
  8391  0032B0  EC09  F026         	call	_write_command
  8392                           
  8393                           ;ST7735_TFT.inc: 335: write_data(0xC8);
  8394  0032B4  0EC8               	movlw	200
  8395  0032B6  EC01  F026         	call	_write_data
  8396                           
  8397                           ;ST7735_TFT.inc: 336: write_command(0x3A);
  8398  0032BA  0E3A               	movlw	58
  8399  0032BC  EC09  F026         	call	_write_command
  8400                           
  8401                           ;ST7735_TFT.inc: 337: write_data(0x05);
  8402  0032C0  0E05               	movlw	5
  8403  0032C2  EC01  F026         	call	_write_data
  8404  0032C6  0012               	return		;funcret
  8405  0032C8                     __end_of_Rcmd1:
  8406                           	opt stack 0
  8407                           tblptru	equ	0xFF8
  8408                           tblptrh	equ	0xFF7
  8409                           tblptrl	equ	0xFF6
  8410                           tablat	equ	0xFF5
  8411                           prodh	equ	0xFF4
  8412                           prodl	equ	0xFF3
  8413                           intcon	equ	0xFF2
  8414                           intcon2	equ	0xFF1
  8415                           intcon3	equ	0xFF0
  8416                           postinc0	equ	0xFEE
  8417                           wreg	equ	0xFE8
  8418                           postdec1	equ	0xFE5
  8419                           fsr1l	equ	0xFE1
  8420                           postinc2	equ	0xFDE
  8421                           postdec2	equ	0xFDD
  8422                           fsr2h	equ	0xFDA
  8423                           fsr2l	equ	0xFD9
  8424                           status	equ	0xFD8
  8425                           
  8426 ;; *************** function _Read_Volt_In *****************
  8427 ;; Defined at:
  8428 ;;		line 2456 in file "lab_final_alt.c"
  8429 ;; Parameters:    Size  Location     Type
  8430 ;;		None
  8431 ;; Auto vars:     Size  Location     Type
  8432 ;;  STEP            3    6[BANK0 ] float 
  8433 ;; Return value:  Size  Location     Type
  8434 ;;                  3  114[None  ] float 
  8435 ;; Registers used:
  8436 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  8437 ;; Tracked objects:
  8438 ;;		On entry : 0/0
  8439 ;;		On exit  : 0/0
  8440 ;;		Unchanged: 0/0
  8441 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8442 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8443 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8444 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8445 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8446 ;;Total ram usage:        3 bytes
  8447 ;; Hardware stack levels used:    1
  8448 ;; Hardware stack levels required when called:    7
  8449 ;; This function calls:
  8450 ;;		_Get_Full_ADC
  8451 ;;		_Select_ADC
  8452 ;;		___ftdiv
  8453 ;;		___ftmul
  8454 ;;		___lwtoft
  8455 ;; This function is called by:
  8456 ;;		_main
  8457 ;; This function uses a non-reentrant model
  8458 ;;
  8459                           
  8460                           	psect	text22
  8461  0041DC                     __ptext22:
  8462                           	opt stack 0
  8463  0041DC                     _Read_Volt_In:
  8464                           	opt stack 23
  8465                           
  8466                           ;lab_final_alt.c: 2458: float STEP;
  8467                           ;lab_final_alt.c: 2459: Select_ADC(0);
  8468                           
  8469                           ;incstack = 0
  8470  0041DC  0E00               	movlw	0
  8471  0041DE  EC18  F026         	call	_Select_ADC
  8472                           
  8473                           ;lab_final_alt.c: 2460: STEP = Get_Full_ADC();
  8474  0041E2  ECFE  F024         	call	_Get_Full_ADC	;wreg free
  8475  0041E6  C01C  F024         	movff	?_Get_Full_ADC,___lwtoft@c
  8476  0041EA  C01D  F025         	movff	?_Get_Full_ADC+1,___lwtoft@c+1
  8477  0041EE  ECEB  F024         	call	___lwtoft	;wreg free
  8478  0041F2  C024  F0B8         	movff	?___lwtoft,Read_Volt_In@STEP
  8479  0041F6  C025  F0B9         	movff	?___lwtoft+1,Read_Volt_In@STEP+1
  8480  0041FA  C026  F0BA         	movff	?___lwtoft+2,Read_Volt_In@STEP+2
  8481                           
  8482                           ;lab_final_alt.c: 2461: Volt = (STEP * 4.0/20000);
  8483  0041FE  0E00               	movlw	0
  8484  004200  6E33               	movwf	___ftmul@f2,c
  8485  004202  0E80               	movlw	128
  8486  004204  6E34               	movwf	___ftmul@f2+1,c
  8487  004206  0E40               	movlw	64
  8488  004208  6E35               	movwf	___ftmul@f2+2,c
  8489  00420A  C0B8  F030         	movff	Read_Volt_In@STEP,___ftmul@f1
  8490  00420E  C0B9  F031         	movff	Read_Volt_In@STEP+1,___ftmul@f1+1
  8491  004212  C0BA  F032         	movff	Read_Volt_In@STEP+2,___ftmul@f1+2
  8492  004216  ECF0  F01A         	call	___ftmul	;wreg free
  8493  00421A  C030  F03F         	movff	?___ftmul,___ftdiv@f1
  8494  00421E  C031  F040         	movff	?___ftmul+1,___ftdiv@f1+1
  8495  004222  C032  F041         	movff	?___ftmul+2,___ftdiv@f1+2
  8496  004226  0E40               	movlw	64
  8497  004228  6E42               	movwf	___ftdiv@f2,c
  8498  00422A  0E9C               	movlw	156
  8499  00422C  6E43               	movwf	___ftdiv@f2+1,c
  8500  00422E  0E46               	movlw	70
  8501  004230  6E44               	movwf	___ftdiv@f2+2,c
  8502  004232  EC70  F01A         	call	___ftdiv	;wreg free
  8503  004236  C03F  F0DB         	movff	?___ftdiv,_Volt
  8504  00423A  C040  F0DC         	movff	?___ftdiv+1,_Volt+1
  8505  00423E  C041  F0DD         	movff	?___ftdiv+2,_Volt+2
  8506  004242  D000               	goto	l814
  8507  004244                     l814:
  8508  004244  0012               	return		;funcret
  8509  004246                     __end_of_Read_Volt_In:
  8510                           	opt stack 0
  8511                           tblptru	equ	0xFF8
  8512                           tblptrh	equ	0xFF7
  8513                           tblptrl	equ	0xFF6
  8514                           tablat	equ	0xFF5
  8515                           prodh	equ	0xFF4
  8516                           prodl	equ	0xFF3
  8517                           intcon	equ	0xFF2
  8518                           intcon2	equ	0xFF1
  8519                           intcon3	equ	0xFF0
  8520                           postinc0	equ	0xFEE
  8521                           wreg	equ	0xFE8
  8522                           postdec1	equ	0xFE5
  8523                           fsr1l	equ	0xFE1
  8524                           postinc2	equ	0xFDE
  8525                           postdec2	equ	0xFDD
  8526                           fsr2h	equ	0xFDA
  8527                           fsr2l	equ	0xFD9
  8528                           status	equ	0xFD8
  8529                           
  8530 ;; *************** function ___lwtoft *****************
  8531 ;; Defined at:
  8532 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwtoft.c"
  8533 ;; Parameters:    Size  Location     Type
  8534 ;;  c               2   35[COMRAM] unsigned int 
  8535 ;; Auto vars:     Size  Location     Type
  8536 ;;		None
  8537 ;; Return value:  Size  Location     Type
  8538 ;;                  3   35[COMRAM] float 
  8539 ;; Registers used:
  8540 ;;		wreg, status,2, status,0, cstack
  8541 ;; Tracked objects:
  8542 ;;		On entry : 0/0
  8543 ;;		On exit  : 0/0
  8544 ;;		Unchanged: 0/0
  8545 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8546 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8547 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8548 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8549 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8550 ;;Total ram usage:        3 bytes
  8551 ;; Hardware stack levels used:    1
  8552 ;; Hardware stack levels required when called:    6
  8553 ;; This function calls:
  8554 ;;		___ftpack
  8555 ;; This function is called by:
  8556 ;;		_Read_Volt_In
  8557 ;; This function uses a non-reentrant model
  8558 ;;
  8559                           
  8560                           	psect	text23
  8561  0049D6                     __ptext23:
  8562                           	opt stack 0
  8563  0049D6                     ___lwtoft:
  8564                           	opt stack 23
  8565                           
  8566                           ;incstack = 0
  8567  0049D6  C024  F01C         	movff	___lwtoft@c,___ftpack@arg
  8568  0049DA  C025  F01D         	movff	___lwtoft@c+1,___ftpack@arg+1
  8569  0049DE  6A1E               	clrf	___ftpack@arg+2,c
  8570  0049E0  0E8E               	movlw	142
  8571  0049E2  6E1F               	movwf	___ftpack@exp,c
  8572  0049E4  0E00               	movlw	0
  8573  0049E6  6E20               	movwf	___ftpack@sign,c
  8574  0049E8  EC2F  F01D         	call	___ftpack	;wreg free
  8575  0049EC  C01C  F024         	movff	?___ftpack,?___lwtoft
  8576  0049F0  C01D  F025         	movff	?___ftpack+1,?___lwtoft+1
  8577  0049F4  C01E  F026         	movff	?___ftpack+2,?___lwtoft+2
  8578  0049F8  D000               	goto	l1586
  8579  0049FA                     l1586:
  8580  0049FA  0012               	return		;funcret
  8581  0049FC                     __end_of___lwtoft:
  8582                           	opt stack 0
  8583                           tblptru	equ	0xFF8
  8584                           tblptrh	equ	0xFF7
  8585                           tblptrl	equ	0xFF6
  8586                           tablat	equ	0xFF5
  8587                           prodh	equ	0xFF4
  8588                           prodl	equ	0xFF3
  8589                           intcon	equ	0xFF2
  8590                           intcon2	equ	0xFF1
  8591                           intcon3	equ	0xFF0
  8592                           postinc0	equ	0xFEE
  8593                           wreg	equ	0xFE8
  8594                           postdec1	equ	0xFE5
  8595                           fsr1l	equ	0xFE1
  8596                           postinc2	equ	0xFDE
  8597                           postdec2	equ	0xFDD
  8598                           fsr2h	equ	0xFDA
  8599                           fsr2l	equ	0xFD9
  8600                           status	equ	0xFD8
  8601                           
  8602 ;; *************** function ___ftmul *****************
  8603 ;; Defined at:
  8604 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftmul.c"
  8605 ;; Parameters:    Size  Location     Type
  8606 ;;  f1              3   47[COMRAM] float 
  8607 ;;  f2              3   50[COMRAM] float 
  8608 ;; Auto vars:     Size  Location     Type
  8609 ;;  f3_as_produc    3   57[COMRAM] unsigned um
  8610 ;;  sign            1   61[COMRAM] unsigned char 
  8611 ;;  cntr            1   60[COMRAM] unsigned char 
  8612 ;;  exp             1   56[COMRAM] unsigned char 
  8613 ;; Return value:  Size  Location     Type
  8614 ;;                  3   47[COMRAM] float 
  8615 ;; Registers used:
  8616 ;;		wreg, status,2, status,0, cstack
  8617 ;; Tracked objects:
  8618 ;;		On entry : 0/0
  8619 ;;		On exit  : 0/0
  8620 ;;		Unchanged: 0/0
  8621 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8622 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8623 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8624 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8625 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8626 ;;Total ram usage:       15 bytes
  8627 ;; Hardware stack levels used:    1
  8628 ;; Hardware stack levels required when called:    6
  8629 ;; This function calls:
  8630 ;;		___ftpack
  8631 ;; This function is called by:
  8632 ;;		_Read_Volt_In
  8633 ;;		_fround
  8634 ;;		_scale
  8635 ;;		_printf
  8636 ;; This function uses a non-reentrant model
  8637 ;;
  8638                           
  8639                           	psect	text24
  8640  0035E0                     __ptext24:
  8641                           	opt stack 0
  8642  0035E0                     ___ftmul:
  8643                           	opt stack 22
  8644                           
  8645                           ;incstack = 0
  8646  0035E0  C032  F036         	movff	___ftmul@f1+2,??___ftmul
  8647  0035E4  6A37               	clrf	(??___ftmul+1)& (0+255),c
  8648  0035E6  6A38               	clrf	(??___ftmul+2)& (0+255),c
  8649  0035E8  3431               	rlcf	___ftmul@f1+1,w,c
  8650  0035EA  3636               	rlcf	??___ftmul& (0+255),f,c
  8651  0035EC  E301               	bnc	u7501
  8652  0035EE  8037               	bsf	(??___ftmul+1)& (0+255),0,c
  8653  0035F0                     u7501:
  8654  0035F0  5036               	movf	??___ftmul,w,c
  8655  0035F2  6E39               	movwf	___ftmul@exp,c
  8656  0035F4  5039               	movf	___ftmul@exp,w,c
  8657  0035F6  A4D8               	btfss	status,2,c
  8658  0035F8  D002               	goto	l8208
  8659  0035FA  D00E               	goto	l8210
  8660  0035FC  D06C               	goto	l1431
  8661  0035FE                     l8208:
  8662  0035FE  C035  F036         	movff	___ftmul@f2+2,??___ftmul
  8663  003602  6A37               	clrf	(??___ftmul+1)& (0+255),c
  8664  003604  6A38               	clrf	(??___ftmul+2)& (0+255),c
  8665  003606  3434               	rlcf	___ftmul@f2+1,w,c
  8666  003608  3636               	rlcf	??___ftmul& (0+255),f,c
  8667  00360A  E301               	bnc	u7521
  8668  00360C  8037               	bsf	(??___ftmul+1)& (0+255),0,c
  8669  00360E                     u7521:
  8670  00360E  5036               	movf	??___ftmul,w,c
  8671  003610  6E3E               	movwf	___ftmul@sign,c
  8672  003612  503E               	movf	___ftmul@sign,w,c
  8673  003614  A4D8               	btfss	status,2,c
  8674  003616  D007               	goto	l8214
  8675  003618                     l8210:
  8676  003618  0E00               	movlw	0
  8677  00361A  6E30               	movwf	?___ftmul,c
  8678  00361C  0E00               	movlw	0
  8679  00361E  6E31               	movwf	?___ftmul+1,c
  8680  003620  0E00               	movlw	0
  8681  003622  6E32               	movwf	?___ftmul+2,c
  8682  003624  D058               	goto	l1431
  8683  003626                     l8214:
  8684  003626  503E               	movf	___ftmul@sign,w,c
  8685  003628  0F7B               	addlw	123
  8686  00362A  2639               	addwf	___ftmul@exp,f,c
  8687  00362C  C032  F03E         	movff	___ftmul@f1+2,___ftmul@sign
  8688  003630  5035               	movf	___ftmul@f2+2,w,c
  8689  003632  1A3E               	xorwf	___ftmul@sign,f,c
  8690  003634  0E80               	movlw	128
  8691  003636  163E               	andwf	___ftmul@sign,f,c
  8692  003638  8E31               	bsf	___ftmul@f1+1,7,c
  8693  00363A  8E34               	bsf	___ftmul@f2+1,7,c
  8694  00363C  0EFF               	movlw	255
  8695  00363E  1633               	andwf	___ftmul@f2,f,c
  8696  003640  0EFF               	movlw	255
  8697  003642  1634               	andwf	___ftmul@f2+1,f,c
  8698  003644  0E00               	movlw	0
  8699  003646  1635               	andwf	___ftmul@f2+2,f,c
  8700  003648  0E00               	movlw	0
  8701  00364A  6E3A               	movwf	___ftmul@f3_as_product,c
  8702  00364C  0E00               	movlw	0
  8703  00364E  6E3B               	movwf	___ftmul@f3_as_product+1,c
  8704  003650  0E00               	movlw	0
  8705  003652  6E3C               	movwf	___ftmul@f3_as_product+2,c
  8706  003654  0E07               	movlw	7
  8707  003656  6E3D               	movwf	___ftmul@cntr,c
  8708  003658  D000               	goto	l8228
  8709  00365A                     l8228:
  8710  00365A  A030               	btfss	___ftmul@f1,0,c
  8711  00365C  D007               	goto	l8232
  8712  00365E  5033               	movf	___ftmul@f2,w,c
  8713  003660  263A               	addwf	___ftmul@f3_as_product,f,c
  8714  003662  5034               	movf	___ftmul@f2+1,w,c
  8715  003664  223B               	addwfc	___ftmul@f3_as_product+1,f,c
  8716  003666  5035               	movf	___ftmul@f2+2,w,c
  8717  003668  223C               	addwfc	___ftmul@f3_as_product+2,f,c
  8718  00366A  D000               	goto	l8232
  8719  00366C                     l8232:
  8720  00366C  90D8               	bcf	status,0,c
  8721  00366E  3232               	rrcf	___ftmul@f1+2,f,c
  8722  003670  3231               	rrcf	___ftmul@f1+1,f,c
  8723  003672  3230               	rrcf	___ftmul@f1,f,c
  8724  003674  90D8               	bcf	status,0,c
  8725  003676  3633               	rlcf	___ftmul@f2,f,c
  8726  003678  3634               	rlcf	___ftmul@f2+1,f,c
  8727  00367A  3635               	rlcf	___ftmul@f2+2,f,c
  8728  00367C  2E3D               	decfsz	___ftmul@cntr,f,c
  8729  00367E  D7ED               	goto	l8228
  8730  003680  D000               	goto	l8236
  8731  003682                     l8236:
  8732  003682  0E09               	movlw	9
  8733  003684  6E3D               	movwf	___ftmul@cntr,c
  8734  003686  D000               	goto	l8238
  8735  003688                     l8238:
  8736  003688  A030               	btfss	___ftmul@f1,0,c
  8737  00368A  D007               	goto	l8242
  8738  00368C  5033               	movf	___ftmul@f2,w,c
  8739  00368E  263A               	addwf	___ftmul@f3_as_product,f,c
  8740  003690  5034               	movf	___ftmul@f2+1,w,c
  8741  003692  223B               	addwfc	___ftmul@f3_as_product+1,f,c
  8742  003694  5035               	movf	___ftmul@f2+2,w,c
  8743  003696  223C               	addwfc	___ftmul@f3_as_product+2,f,c
  8744  003698  D000               	goto	l8242
  8745  00369A                     l8242:
  8746  00369A  90D8               	bcf	status,0,c
  8747  00369C  3232               	rrcf	___ftmul@f1+2,f,c
  8748  00369E  3231               	rrcf	___ftmul@f1+1,f,c
  8749  0036A0  3230               	rrcf	___ftmul@f1,f,c
  8750  0036A2  90D8               	bcf	status,0,c
  8751  0036A4  323C               	rrcf	___ftmul@f3_as_product+2,f,c
  8752  0036A6  323B               	rrcf	___ftmul@f3_as_product+1,f,c
  8753  0036A8  323A               	rrcf	___ftmul@f3_as_product,f,c
  8754  0036AA  2E3D               	decfsz	___ftmul@cntr,f,c
  8755  0036AC  D7ED               	goto	l8238
  8756  0036AE  D000               	goto	l8246
  8757  0036B0                     l8246:
  8758  0036B0  C03A  F01C         	movff	___ftmul@f3_as_product,___ftpack@arg
  8759  0036B4  C03B  F01D         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  8760  0036B8  C03C  F01E         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  8761  0036BC  C039  F01F         	movff	___ftmul@exp,___ftpack@exp
  8762  0036C0  C03E  F020         	movff	___ftmul@sign,___ftpack@sign
  8763  0036C4  EC2F  F01D         	call	___ftpack	;wreg free
  8764  0036C8  C01C  F030         	movff	?___ftpack,?___ftmul
  8765  0036CC  C01D  F031         	movff	?___ftpack+1,?___ftmul+1
  8766  0036D0  C01E  F032         	movff	?___ftpack+2,?___ftmul+2
  8767  0036D4  D000               	goto	l1431
  8768  0036D6                     l1431:
  8769  0036D6  0012               	return		;funcret
  8770  0036D8                     __end_of___ftmul:
  8771                           	opt stack 0
  8772                           tblptru	equ	0xFF8
  8773                           tblptrh	equ	0xFF7
  8774                           tblptrl	equ	0xFF6
  8775                           tablat	equ	0xFF5
  8776                           prodh	equ	0xFF4
  8777                           prodl	equ	0xFF3
  8778                           intcon	equ	0xFF2
  8779                           intcon2	equ	0xFF1
  8780                           intcon3	equ	0xFF0
  8781                           postinc0	equ	0xFEE
  8782                           wreg	equ	0xFE8
  8783                           postdec1	equ	0xFE5
  8784                           fsr1l	equ	0xFE1
  8785                           postinc2	equ	0xFDE
  8786                           postdec2	equ	0xFDD
  8787                           fsr2h	equ	0xFDA
  8788                           fsr2l	equ	0xFD9
  8789                           status	equ	0xFD8
  8790                           
  8791 ;; *************** function ___ftdiv *****************
  8792 ;; Defined at:
  8793 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftdiv.c"
  8794 ;; Parameters:    Size  Location     Type
  8795 ;;  f1              3   62[COMRAM] float 
  8796 ;;  f2              3   65[COMRAM] float 
  8797 ;; Auto vars:     Size  Location     Type
  8798 ;;  f3              3    1[BANK0 ] float 
  8799 ;;  sign            1    5[BANK0 ] unsigned char 
  8800 ;;  exp             1    4[BANK0 ] unsigned char 
  8801 ;;  cntr            1    0[BANK0 ] unsigned char 
  8802 ;; Return value:  Size  Location     Type
  8803 ;;                  3   62[COMRAM] float 
  8804 ;; Registers used:
  8805 ;;		wreg, status,2, status,0, cstack
  8806 ;; Tracked objects:
  8807 ;;		On entry : 0/0
  8808 ;;		On exit  : 0/0
  8809 ;;		Unchanged: 0/0
  8810 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8811 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8812 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8813 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8814 ;;      Totals:         9       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8815 ;;Total ram usage:       15 bytes
  8816 ;; Hardware stack levels used:    1
  8817 ;; Hardware stack levels required when called:    6
  8818 ;; This function calls:
  8819 ;;		___ftpack
  8820 ;; This function is called by:
  8821 ;;		_Read_Volt_In
  8822 ;; This function uses a non-reentrant model
  8823 ;;
  8824                           
  8825                           	psect	text25
  8826  0034E0                     __ptext25:
  8827                           	opt stack 0
  8828  0034E0                     ___ftdiv:
  8829                           	opt stack 23
  8830                           
  8831                           ;incstack = 0
  8832  0034E0  C041  F045         	movff	___ftdiv@f1+2,??___ftdiv
  8833  0034E4  6A46               	clrf	(??___ftdiv+1)& (0+255),c
  8834  0034E6  6A47               	clrf	(??___ftdiv+2)& (0+255),c
  8835  0034E8  3440               	rlcf	___ftdiv@f1+1,w,c
  8836  0034EA  3645               	rlcf	??___ftdiv& (0+255),f,c
  8837  0034EC  E301               	bnc	u7961
  8838  0034EE  8046               	bsf	(??___ftdiv+1)& (0+255),0,c
  8839  0034F0                     u7961:
  8840  0034F0  5045               	movf	??___ftdiv,w,c
  8841  0034F2  0100               	movlb	0	; () banked
  8842  0034F4  6FB6               	movwf	___ftdiv@exp& (0+255),b
  8843  0034F6  0100               	movlb	0	; () banked
  8844  0034F8  51B6               	movf	___ftdiv@exp& (0+255),w,b
  8845  0034FA  A4D8               	btfss	status,2,c
  8846  0034FC  D002               	goto	l8906
  8847  0034FE  D010               	goto	l8908
  8848                           
  8849                           ; BSR set to: 0
  8850                           
  8851                           ; BSR set to: 0
  8852  003500  D06E               	goto	l1399
  8853  003502                     l8906:
  8854                           
  8855                           ; BSR set to: 0
  8856  003502  C044  F045         	movff	___ftdiv@f2+2,??___ftdiv
  8857  003506  6A46               	clrf	(??___ftdiv+1)& (0+255),c
  8858  003508  6A47               	clrf	(??___ftdiv+2)& (0+255),c
  8859  00350A  3443               	rlcf	___ftdiv@f2+1,w,c
  8860  00350C  3645               	rlcf	??___ftdiv& (0+255),f,c
  8861  00350E  E301               	bnc	u7981
  8862  003510  8046               	bsf	(??___ftdiv+1)& (0+255),0,c
  8863  003512                     u7981:
  8864  003512  5045               	movf	??___ftdiv,w,c
  8865  003514  0100               	movlb	0	; () banked
  8866  003516  6FB7               	movwf	___ftdiv@sign& (0+255),b
  8867  003518  0100               	movlb	0	; () banked
  8868  00351A  51B7               	movf	___ftdiv@sign& (0+255),w,b
  8869  00351C  A4D8               	btfss	status,2,c
  8870  00351E  D007               	goto	l8912
  8871  003520                     l8908:
  8872                           
  8873                           ; BSR set to: 0
  8874  003520  0E00               	movlw	0
  8875  003522  6E3F               	movwf	?___ftdiv,c
  8876  003524  0E00               	movlw	0
  8877  003526  6E40               	movwf	?___ftdiv+1,c
  8878  003528  0E00               	movlw	0
  8879  00352A  6E41               	movwf	?___ftdiv+2,c
  8880                           
  8881                           ; BSR set to: 0
  8882  00352C  D058               	goto	l1399
  8883  00352E                     l8912:
  8884                           
  8885                           ; BSR set to: 0
  8886  00352E  0E00               	movlw	0
  8887  003530  0100               	movlb	0	; () banked
  8888  003532  6FB3               	movwf	___ftdiv@f3& (0+255),b
  8889  003534  0E00               	movlw	0
  8890  003536  0100               	movlb	0	; () banked
  8891  003538  6FB4               	movwf	(___ftdiv@f3+1)& (0+255),b
  8892  00353A  0E00               	movlw	0
  8893  00353C  0100               	movlb	0	; () banked
  8894  00353E  6FB5               	movwf	(___ftdiv@f3+2)& (0+255),b
  8895                           
  8896                           ; BSR set to: 0
  8897  003540  0100               	movlb	0	; () banked
  8898  003542  51B7               	movf	___ftdiv@sign& (0+255),w,b
  8899  003544  0F89               	addlw	137
  8900  003546  0100               	movlb	0	; () banked
  8901  003548  5FB6               	subwf	___ftdiv@exp& (0+255),f,b
  8902                           
  8903                           ; BSR set to: 0
  8904  00354A  C041  F0B7         	movff	___ftdiv@f1+2,___ftdiv@sign
  8905                           
  8906                           ; BSR set to: 0
  8907  00354E  5044               	movf	___ftdiv@f2+2,w,c
  8908  003550  0100               	movlb	0	; () banked
  8909  003552  1BB7               	xorwf	___ftdiv@sign& (0+255),f,b
  8910                           
  8911                           ; BSR set to: 0
  8912  003554  0E80               	movlw	128
  8913  003556  0100               	movlb	0	; () banked
  8914  003558  17B7               	andwf	___ftdiv@sign& (0+255),f,b
  8915                           
  8916                           ; BSR set to: 0
  8917  00355A  8E40               	bsf	___ftdiv@f1+1,7,c
  8918                           
  8919                           ; BSR set to: 0
  8920  00355C  0EFF               	movlw	255
  8921  00355E  163F               	andwf	___ftdiv@f1,f,c
  8922  003560  0EFF               	movlw	255
  8923  003562  1640               	andwf	___ftdiv@f1+1,f,c
  8924  003564  0E00               	movlw	0
  8925  003566  1641               	andwf	___ftdiv@f1+2,f,c
  8926                           
  8927                           ; BSR set to: 0
  8928  003568  8E43               	bsf	___ftdiv@f2+1,7,c
  8929                           
  8930                           ; BSR set to: 0
  8931  00356A  0EFF               	movlw	255
  8932  00356C  1642               	andwf	___ftdiv@f2,f,c
  8933  00356E  0EFF               	movlw	255
  8934  003570  1643               	andwf	___ftdiv@f2+1,f,c
  8935  003572  0E00               	movlw	0
  8936  003574  1644               	andwf	___ftdiv@f2+2,f,c
  8937                           
  8938                           ; BSR set to: 0
  8939  003576  0E18               	movlw	24
  8940  003578  0100               	movlb	0	; () banked
  8941  00357A  6FB2               	movwf	___ftdiv@cntr& (0+255),b
  8942  00357C  D000               	goto	l8932
  8943  00357E                     l8932:
  8944                           
  8945                           ; BSR set to: 0
  8946  00357E  0100               	movlb	0	; () banked
  8947  003580  90D8               	bcf	status,0,c
  8948  003582  37B3               	rlcf	___ftdiv@f3& (0+255),f,b
  8949  003584  37B4               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
  8950  003586  37B5               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
  8951                           
  8952                           ; BSR set to: 0
  8953  003588  5042               	movf	___ftdiv@f2,w,c
  8954  00358A  5C3F               	subwf	___ftdiv@f1,w,c
  8955  00358C  5043               	movf	___ftdiv@f2+1,w,c
  8956  00358E  5840               	subwfb	___ftdiv@f1+1,w,c
  8957  003590  5044               	movf	___ftdiv@f2+2,w,c
  8958  003592  5841               	subwfb	___ftdiv@f1+2,w,c
  8959  003594  A0D8               	btfss	status,0,c
  8960  003596  D008               	goto	l1402
  8961                           
  8962                           ; BSR set to: 0
  8963  003598  5042               	movf	___ftdiv@f2,w,c
  8964  00359A  5E3F               	subwf	___ftdiv@f1,f,c
  8965  00359C  5043               	movf	___ftdiv@f2+1,w,c
  8966  00359E  5A40               	subwfb	___ftdiv@f1+1,f,c
  8967  0035A0  5044               	movf	___ftdiv@f2+2,w,c
  8968  0035A2  5A41               	subwfb	___ftdiv@f1+2,f,c
  8969                           
  8970                           ; BSR set to: 0
  8971  0035A4  0100               	movlb	0	; () banked
  8972  0035A6  81B3               	bsf	___ftdiv@f3& (0+255),0,b
  8973  0035A8                     l1402:
  8974                           
  8975                           ; BSR set to: 0
  8976  0035A8  90D8               	bcf	status,0,c
  8977  0035AA  363F               	rlcf	___ftdiv@f1,f,c
  8978  0035AC  3640               	rlcf	___ftdiv@f1+1,f,c
  8979  0035AE  3641               	rlcf	___ftdiv@f1+2,f,c
  8980                           
  8981                           ; BSR set to: 0
  8982  0035B0  0100               	movlb	0	; () banked
  8983  0035B2  2FB2               	decfsz	___ftdiv@cntr& (0+255),f,b
  8984  0035B4  D7E4               	goto	l8932
  8985  0035B6  D000               	goto	l8942
  8986  0035B8                     l8942:
  8987                           
  8988                           ; BSR set to: 0
  8989  0035B8  C0B3  F01C         	movff	___ftdiv@f3,___ftpack@arg
  8990  0035BC  C0B4  F01D         	movff	___ftdiv@f3+1,___ftpack@arg+1
  8991  0035C0  C0B5  F01E         	movff	___ftdiv@f3+2,___ftpack@arg+2
  8992  0035C4  C0B6  F01F         	movff	___ftdiv@exp,___ftpack@exp
  8993  0035C8  C0B7  F020         	movff	___ftdiv@sign,___ftpack@sign
  8994  0035CC  EC2F  F01D         	call	___ftpack	;wreg free
  8995  0035D0  C01C  F03F         	movff	?___ftpack,?___ftdiv
  8996  0035D4  C01D  F040         	movff	?___ftpack+1,?___ftdiv+1
  8997  0035D8  C01E  F041         	movff	?___ftpack+2,?___ftdiv+2
  8998  0035DC  D000               	goto	l1399
  8999  0035DE                     l1399:
  9000  0035DE  0012               	return		;funcret
  9001  0035E0                     __end_of___ftdiv:
  9002                           	opt stack 0
  9003                           tblptru	equ	0xFF8
  9004                           tblptrh	equ	0xFF7
  9005                           tblptrl	equ	0xFF6
  9006                           tablat	equ	0xFF5
  9007                           prodh	equ	0xFF4
  9008                           prodl	equ	0xFF3
  9009                           intcon	equ	0xFF2
  9010                           intcon2	equ	0xFF1
  9011                           intcon3	equ	0xFF0
  9012                           postinc0	equ	0xFEE
  9013                           wreg	equ	0xFE8
  9014                           postdec1	equ	0xFE5
  9015                           fsr1l	equ	0xFE1
  9016                           postinc2	equ	0xFDE
  9017                           postdec2	equ	0xFDD
  9018                           fsr2h	equ	0xFDA
  9019                           fsr2l	equ	0xFD9
  9020                           status	equ	0xFD8
  9021                           
  9022 ;; *************** function _Select_ADC *****************
  9023 ;; Defined at:
  9024 ;;		line 2406 in file "lab_final_alt.c"
  9025 ;; Parameters:    Size  Location     Type
  9026 ;;  ADC_Channel     1    wreg     unsigned char 
  9027 ;; Auto vars:     Size  Location     Type
  9028 ;;  ADC_Channel     1   27[COMRAM] unsigned char 
  9029 ;; Return value:  Size  Location     Type
  9030 ;;		None               void
  9031 ;; Registers used:
  9032 ;;		wreg, status,2, status,0, prodl, prodh
  9033 ;; Tracked objects:
  9034 ;;		On entry : 0/0
  9035 ;;		On exit  : 0/0
  9036 ;;		Unchanged: 0/0
  9037 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9038 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9039 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9040 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9041 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9042 ;;Total ram usage:        1 bytes
  9043 ;; Hardware stack levels used:    1
  9044 ;; Hardware stack levels required when called:    5
  9045 ;; This function calls:
  9046 ;;		Nothing
  9047 ;; This function is called by:
  9048 ;;		_Read_Volt_In
  9049 ;; This function uses a non-reentrant model
  9050 ;;
  9051                           
  9052                           	psect	text26
  9053  004C30                     __ptext26:
  9054                           	opt stack 0
  9055  004C30                     _Select_ADC:
  9056                           	opt stack 24
  9057                           
  9058                           ;incstack = 0
  9059                           ;Select_ADC@ADC_Channel stored from wreg
  9060  004C30  6E1C               	movwf	Select_ADC@ADC_Channel,c
  9061                           
  9062                           ;lab_final_alt.c: 2408: ADCON0 = 0x01 + ADC_Channel * 4;
  9063  004C32  501C               	movf	Select_ADC@ADC_Channel,w,c
  9064  004C34  0D04               	mullw	4
  9065  004C36  28F3               	incf	prodl,w,c
  9066  004C38  6EC2               	movwf	4034,c	;volatile
  9067  004C3A  0012               	return		;funcret
  9068  004C3C                     __end_of_Select_ADC:
  9069                           	opt stack 0
  9070                           tblptru	equ	0xFF8
  9071                           tblptrh	equ	0xFF7
  9072                           tblptrl	equ	0xFF6
  9073                           tablat	equ	0xFF5
  9074                           prodh	equ	0xFF4
  9075                           prodl	equ	0xFF3
  9076                           intcon	equ	0xFF2
  9077                           intcon2	equ	0xFF1
  9078                           intcon3	equ	0xFF0
  9079                           postinc0	equ	0xFEE
  9080                           wreg	equ	0xFE8
  9081                           postdec1	equ	0xFE5
  9082                           fsr1l	equ	0xFE1
  9083                           postinc2	equ	0xFDE
  9084                           postdec2	equ	0xFDD
  9085                           fsr2h	equ	0xFDA
  9086                           fsr2l	equ	0xFD9
  9087                           status	equ	0xFD8
  9088                           
  9089 ;; *************** function _Get_Full_ADC *****************
  9090 ;; Defined at:
  9091 ;;		line 2398 in file "lab_final_alt.c"
  9092 ;; Parameters:    Size  Location     Type
  9093 ;;		None
  9094 ;; Auto vars:     Size  Location     Type
  9095 ;;  result          2   31[COMRAM] int 
  9096 ;; Return value:  Size  Location     Type
  9097 ;;                  2   27[COMRAM] unsigned int 
  9098 ;; Registers used:
  9099 ;;		wreg, status,2, status,0
  9100 ;; Tracked objects:
  9101 ;;		On entry : 0/0
  9102 ;;		On exit  : 0/0
  9103 ;;		Unchanged: 0/0
  9104 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9105 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9106 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9107 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9108 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9109 ;;Total ram usage:        6 bytes
  9110 ;; Hardware stack levels used:    1
  9111 ;; Hardware stack levels required when called:    5
  9112 ;; This function calls:
  9113 ;;		Nothing
  9114 ;; This function is called by:
  9115 ;;		_Read_Volt_In
  9116 ;; This function uses a non-reentrant model
  9117 ;;
  9118                           
  9119                           	psect	text27
  9120  0049FC                     __ptext27:
  9121                           	opt stack 0
  9122  0049FC                     _Get_Full_ADC:
  9123                           	opt stack 24
  9124                           
  9125                           ;lab_final_alt.c: 2400: int result;
  9126                           ;lab_final_alt.c: 2401: ADCON0bits.GO=1;
  9127                           
  9128                           ;incstack = 0
  9129  0049FC  82C2               	bsf	4034,1,c	;volatile
  9130                           
  9131                           ;lab_final_alt.c: 2402: while(ADCON0bits.DONE==1);
  9132  0049FE  D000               	goto	l777
  9133  004A00                     l777:
  9134  004A00  B2C2               	btfsc	4034,1,c	;volatile
  9135  004A02  D7FE               	goto	l777
  9136                           
  9137                           ;lab_final_alt.c: 2403: result = (ADRESH * 0x100) + ADRESL;
  9138  004A04  50C4               	movf	4036,w,c	;volatile
  9139  004A06  6E1F               	movwf	(??_Get_Full_ADC+1)& (0+255),c
  9140  004A08  6A1E               	clrf	??_Get_Full_ADC& (0+255),c
  9141  004A0A  50C3               	movf	4035,w,c	;volatile
  9142  004A0C  241E               	addwf	??_Get_Full_ADC,w,c
  9143  004A0E  6E20               	movwf	Get_Full_ADC@result,c
  9144  004A10  0E00               	movlw	0
  9145  004A12  201F               	addwfc	??_Get_Full_ADC+1,w,c
  9146  004A14  6E21               	movwf	Get_Full_ADC@result+1,c
  9147                           
  9148                           ;lab_final_alt.c: 2404: return result;
  9149  004A16  C020  F01C         	movff	Get_Full_ADC@result,?_Get_Full_ADC
  9150  004A1A  C021  F01D         	movff	Get_Full_ADC@result+1,?_Get_Full_ADC+1
  9151  004A1E  D000               	goto	l780
  9152  004A20                     l780:
  9153  004A20  0012               	return		;funcret
  9154  004A22                     __end_of_Get_Full_ADC:
  9155                           	opt stack 0
  9156                           tblptru	equ	0xFF8
  9157                           tblptrh	equ	0xFF7
  9158                           tblptrl	equ	0xFF6
  9159                           tablat	equ	0xFF5
  9160                           prodh	equ	0xFF4
  9161                           prodl	equ	0xFF3
  9162                           intcon	equ	0xFF2
  9163                           intcon2	equ	0xFF1
  9164                           intcon3	equ	0xFF0
  9165                           postinc0	equ	0xFEE
  9166                           wreg	equ	0xFE8
  9167                           postdec1	equ	0xFE5
  9168                           fsr1l	equ	0xFE1
  9169                           postinc2	equ	0xFDE
  9170                           postdec2	equ	0xFDD
  9171                           fsr2h	equ	0xFDA
  9172                           fsr2l	equ	0xFD9
  9173                           status	equ	0xFD8
  9174                           
  9175 ;; *************** function _LED_Alarm *****************
  9176 ;; Defined at:
  9177 ;;		line 2464 in file "lab_final_alt.c"
  9178 ;; Parameters:    Size  Location     Type
  9179 ;;		None
  9180 ;; Auto vars:     Size  Location     Type
  9181 ;;		None
  9182 ;; Return value:  Size  Location     Type
  9183 ;;		None               void
  9184 ;; Registers used:
  9185 ;;		wreg, status,2, status,0
  9186 ;; Tracked objects:
  9187 ;;		On entry : 0/0
  9188 ;;		On exit  : 0/0
  9189 ;;		Unchanged: 0/0
  9190 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9191 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9192 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9193 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9194 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9195 ;;Total ram usage:        0 bytes
  9196 ;; Hardware stack levels used:    1
  9197 ;; Hardware stack levels required when called:    5
  9198 ;; This function calls:
  9199 ;;		Nothing
  9200 ;; This function is called by:
  9201 ;;		_main
  9202 ;; This function uses a non-reentrant model
  9203 ;;
  9204                           
  9205                           	psect	text28
  9206  003D6C                     __ptext28:
  9207                           	opt stack 0
  9208  003D6C                     _LED_Alarm:
  9209                           	opt stack 25
  9210                           
  9211                           ;lab_final_alt.c: 2466: count++;
  9212                           
  9213                           ;incstack = 0
  9214  003D6C  4A4D               	infsnz	_count,f,c
  9215  003D6E  2A4E               	incf	_count+1,f,c
  9216                           
  9217                           ;lab_final_alt.c: 2467: if(count == 1)
  9218  003D70  044D               	decf	_count,w,c
  9219  003D72  104E               	iorwf	_count+1,w,c
  9220  003D74  A4D8               	btfss	status,2,c
  9221  003D76  D004               	goto	l6820
  9222                           
  9223                           ;lab_final_alt.c: 2468: {
  9224                           ;lab_final_alt.c: 2469: PORTDbits.RD0 = 1;
  9225  003D78  8083               	bsf	3971,0,c	;volatile
  9226                           
  9227                           ;lab_final_alt.c: 2470: PORTDbits.RD1 = 0;
  9228  003D7A  9283               	bcf	3971,1,c	;volatile
  9229                           
  9230                           ;lab_final_alt.c: 2471: PORTDbits.RD2 = 0;
  9231  003D7C  9483               	bcf	3971,2,c	;volatile
  9232  003D7E  D000               	goto	l6820
  9233  003D80                     l6820:
  9234                           
  9235                           ;lab_final_alt.c: 2472: }
  9236                           ;lab_final_alt.c: 2474: if(count == 2)
  9237  003D80  0E02               	movlw	2
  9238  003D82  184D               	xorwf	_count,w,c
  9239  003D84  104E               	iorwf	_count+1,w,c
  9240  003D86  A4D8               	btfss	status,2,c
  9241  003D88  D004               	goto	l6824
  9242                           
  9243                           ;lab_final_alt.c: 2475: {
  9244                           ;lab_final_alt.c: 2476: PORTDbits.RD0 = 0;
  9245  003D8A  9083               	bcf	3971,0,c	;volatile
  9246                           
  9247                           ;lab_final_alt.c: 2477: PORTDbits.RD1 = 1;
  9248  003D8C  8283               	bsf	3971,1,c	;volatile
  9249                           
  9250                           ;lab_final_alt.c: 2478: PORTDbits.RD2 = 0;
  9251  003D8E  9483               	bcf	3971,2,c	;volatile
  9252  003D90  D000               	goto	l6824
  9253  003D92                     l6824:
  9254                           
  9255                           ;lab_final_alt.c: 2479: }
  9256                           ;lab_final_alt.c: 2480: if(count == 3)
  9257  003D92  0E03               	movlw	3
  9258  003D94  184D               	xorwf	_count,w,c
  9259  003D96  104E               	iorwf	_count+1,w,c
  9260  003D98  A4D8               	btfss	status,2,c
  9261  003D9A  D004               	goto	l6828
  9262                           
  9263                           ;lab_final_alt.c: 2481: {
  9264                           ;lab_final_alt.c: 2482: PORTDbits.RD0 = 1;
  9265  003D9C  8083               	bsf	3971,0,c	;volatile
  9266                           
  9267                           ;lab_final_alt.c: 2483: PORTDbits.RD1 = 1;
  9268  003D9E  8283               	bsf	3971,1,c	;volatile
  9269                           
  9270                           ;lab_final_alt.c: 2484: PORTDbits.RD2 = 0;
  9271  003DA0  9483               	bcf	3971,2,c	;volatile
  9272  003DA2  D000               	goto	l6828
  9273  003DA4                     l6828:
  9274                           
  9275                           ;lab_final_alt.c: 2485: }
  9276                           ;lab_final_alt.c: 2487: if(count == 4)
  9277  003DA4  0E04               	movlw	4
  9278  003DA6  184D               	xorwf	_count,w,c
  9279  003DA8  104E               	iorwf	_count+1,w,c
  9280  003DAA  A4D8               	btfss	status,2,c
  9281  003DAC  D004               	goto	l6832
  9282                           
  9283                           ;lab_final_alt.c: 2488: {
  9284                           ;lab_final_alt.c: 2489: PORTDbits.RD0 = 0;
  9285  003DAE  9083               	bcf	3971,0,c	;volatile
  9286                           
  9287                           ;lab_final_alt.c: 2490: PORTDbits.RD1 = 0;
  9288  003DB0  9283               	bcf	3971,1,c	;volatile
  9289                           
  9290                           ;lab_final_alt.c: 2491: PORTDbits.RD2 = 1;
  9291  003DB2  8483               	bsf	3971,2,c	;volatile
  9292  003DB4  D000               	goto	l6832
  9293  003DB6                     l6832:
  9294                           
  9295                           ;lab_final_alt.c: 2492: }
  9296                           ;lab_final_alt.c: 2494: if (count == 5)
  9297  003DB6  0E05               	movlw	5
  9298  003DB8  184D               	xorwf	_count,w,c
  9299  003DBA  104E               	iorwf	_count+1,w,c
  9300  003DBC  A4D8               	btfss	status,2,c
  9301  003DBE  D004               	goto	l6836
  9302                           
  9303                           ;lab_final_alt.c: 2495: {
  9304                           ;lab_final_alt.c: 2496: PORTDbits.RD0 = 1;
  9305  003DC0  8083               	bsf	3971,0,c	;volatile
  9306                           
  9307                           ;lab_final_alt.c: 2497: PORTDbits.RD1 = 0;
  9308  003DC2  9283               	bcf	3971,1,c	;volatile
  9309                           
  9310                           ;lab_final_alt.c: 2498: PORTDbits.RD2 = 1;
  9311  003DC4  8483               	bsf	3971,2,c	;volatile
  9312  003DC6  D000               	goto	l6836
  9313  003DC8                     l6836:
  9314                           
  9315                           ;lab_final_alt.c: 2499: }
  9316                           ;lab_final_alt.c: 2501: if (count == 6)
  9317  003DC8  0E06               	movlw	6
  9318  003DCA  184D               	xorwf	_count,w,c
  9319  003DCC  104E               	iorwf	_count+1,w,c
  9320  003DCE  A4D8               	btfss	status,2,c
  9321  003DD0  D004               	goto	l6840
  9322                           
  9323                           ;lab_final_alt.c: 2502: {
  9324                           ;lab_final_alt.c: 2503: PORTDbits.RD0 = 0;
  9325  003DD2  9083               	bcf	3971,0,c	;volatile
  9326                           
  9327                           ;lab_final_alt.c: 2504: PORTDbits.RD1 = 1;
  9328  003DD4  8283               	bsf	3971,1,c	;volatile
  9329                           
  9330                           ;lab_final_alt.c: 2505: PORTDbits.RD2 = 1;
  9331  003DD6  8483               	bsf	3971,2,c	;volatile
  9332  003DD8  D000               	goto	l6840
  9333  003DDA                     l6840:
  9334                           
  9335                           ;lab_final_alt.c: 2506: }
  9336                           ;lab_final_alt.c: 2508: if(count == 7)
  9337  003DDA  0E07               	movlw	7
  9338  003DDC  184D               	xorwf	_count,w,c
  9339  003DDE  104E               	iorwf	_count+1,w,c
  9340  003DE0  A4D8               	btfss	status,2,c
  9341  003DE2  D008               	goto	l824
  9342                           
  9343                           ;lab_final_alt.c: 2509: {
  9344                           ;lab_final_alt.c: 2510: PORTDbits.RD0 = 1;
  9345  003DE4  8083               	bsf	3971,0,c	;volatile
  9346                           
  9347                           ;lab_final_alt.c: 2511: PORTDbits.RD1 = 1;
  9348  003DE6  8283               	bsf	3971,1,c	;volatile
  9349                           
  9350                           ;lab_final_alt.c: 2512: PORTDbits.RD2 = 1;
  9351  003DE8  8483               	bsf	3971,2,c	;volatile
  9352                           
  9353                           ;lab_final_alt.c: 2513: count = 0;
  9354  003DEA  0E00               	movlw	0
  9355  003DEC  6E4E               	movwf	_count+1,c
  9356  003DEE  0E00               	movlw	0
  9357  003DF0  6E4D               	movwf	_count,c
  9358  003DF2  D000               	goto	l824
  9359  003DF4                     l824:
  9360  003DF4  0012               	return		;funcret
  9361  003DF6                     __end_of_LED_Alarm:
  9362                           	opt stack 0
  9363                           tblptru	equ	0xFF8
  9364                           tblptrh	equ	0xFF7
  9365                           tblptrl	equ	0xFF6
  9366                           tablat	equ	0xFF5
  9367                           prodh	equ	0xFF4
  9368                           prodl	equ	0xFF3
  9369                           intcon	equ	0xFF2
  9370                           intcon2	equ	0xFF1
  9371                           intcon3	equ	0xFF0
  9372                           postinc0	equ	0xFEE
  9373                           wreg	equ	0xFE8
  9374                           postdec1	equ	0xFE5
  9375                           fsr1l	equ	0xFE1
  9376                           postinc2	equ	0xFDE
  9377                           postdec2	equ	0xFDD
  9378                           fsr2h	equ	0xFDA
  9379                           fsr2l	equ	0xFD9
  9380                           status	equ	0xFD8
  9381                           
  9382 ;; *************** function _LCD_Reset *****************
  9383 ;; Defined at:
  9384 ;;		line 230 in file "ST7735_TFT.inc"
  9385 ;; Parameters:    Size  Location     Type
  9386 ;;		None
  9387 ;; Auto vars:     Size  Location     Type
  9388 ;;		None
  9389 ;; Return value:  Size  Location     Type
  9390 ;;		None               void
  9391 ;; Registers used:
  9392 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  9393 ;; Tracked objects:
  9394 ;;		On entry : 0/0
  9395 ;;		On exit  : 0/0
  9396 ;;		Unchanged: 0/0
  9397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9398 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9399 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9400 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9401 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9402 ;;Total ram usage:        0 bytes
  9403 ;; Hardware stack levels used:    1
  9404 ;; Hardware stack levels required when called:    7
  9405 ;; This function calls:
  9406 ;;		_delay_ms
  9407 ;; This function is called by:
  9408 ;;		_main
  9409 ;; This function uses a non-reentrant model
  9410 ;;
  9411                           
  9412                           	psect	text29
  9413  004B96                     __ptext29:
  9414                           	opt stack 0
  9415  004B96                     _LCD_Reset:
  9416                           	opt stack 23
  9417                           
  9418                           ;ST7735_TFT.inc: 232: PORTEbits.RE2 = 0;
  9419                           
  9420                           ;incstack = 0
  9421  004B96  9484               	bcf	3972,2,c	;volatile
  9422                           
  9423                           ;ST7735_TFT.inc: 233: delay_ms(100);
  9424  004B98  0E00               	movlw	0
  9425  004B9A  6E31               	movwf	delay_ms@ms+1,c
  9426  004B9C  0E64               	movlw	100
  9427  004B9E  6E30               	movwf	delay_ms@ms,c
  9428  004BA0  ECDF  F021         	call	_delay_ms	;wreg free
  9429                           
  9430                           ;ST7735_TFT.inc: 234: PORTEbits.RE2 = 1;
  9431  004BA4  8484               	bsf	3972,2,c	;volatile
  9432  004BA6  0012               	return		;funcret
  9433  004BA8                     __end_of_LCD_Reset:
  9434                           	opt stack 0
  9435                           tblptru	equ	0xFF8
  9436                           tblptrh	equ	0xFF7
  9437                           tblptrl	equ	0xFF6
  9438                           tablat	equ	0xFF5
  9439                           prodh	equ	0xFF4
  9440                           prodl	equ	0xFF3
  9441                           intcon	equ	0xFF2
  9442                           intcon2	equ	0xFF1
  9443                           intcon3	equ	0xFF0
  9444                           postinc0	equ	0xFEE
  9445                           wreg	equ	0xFE8
  9446                           postdec1	equ	0xFE5
  9447                           fsr1l	equ	0xFE1
  9448                           postinc2	equ	0xFDE
  9449                           postdec2	equ	0xFDD
  9450                           fsr2h	equ	0xFDA
  9451                           fsr2l	equ	0xFD9
  9452                           status	equ	0xFD8
  9453                           
  9454 ;; *************** function _I2C_Init *****************
  9455 ;; Defined at:
  9456 ;;		line 19 in file "softi2c.inc"
  9457 ;; Parameters:    Size  Location     Type
  9458 ;;  c               4   27[COMRAM] const unsigned long 
  9459 ;; Auto vars:     Size  Location     Type
  9460 ;;		None
  9461 ;; Return value:  Size  Location     Type
  9462 ;;		None               void
  9463 ;; Registers used:
  9464 ;;		wreg, cstack
  9465 ;; Tracked objects:
  9466 ;;		On entry : 0/0
  9467 ;;		On exit  : 0/0
  9468 ;;		Unchanged: 0/0
  9469 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9470 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9471 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9472 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9473 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9474 ;;Total ram usage:        4 bytes
  9475 ;; Hardware stack levels used:    1
  9476 ;; Hardware stack levels required when called:    6
  9477 ;; This function calls:
  9478 ;;		_i2cHighScl
  9479 ;;		_i2cHighSda
  9480 ;; This function is called by:
  9481 ;;		_main
  9482 ;; This function uses a non-reentrant model
  9483 ;;
  9484                           
  9485                           	psect	text30
  9486  004C60                     __ptext30:
  9487                           	opt stack 0
  9488  004C60                     _I2C_Init:
  9489                           	opt stack 24
  9490                           
  9491                           ;softi2c.inc: 21: i2cHighScl();
  9492                           
  9493                           ;incstack = 0
  9494  004C60  EC1E  F026         	call	_i2cHighScl	;wreg free
  9495                           
  9496                           ;softi2c.inc: 22: i2cHighSda();
  9497  004C64  EC48  F026         	call	_i2cHighSda	;wreg free
  9498  004C68  0012               	return		;funcret
  9499  004C6A                     __end_of_I2C_Init:
  9500                           	opt stack 0
  9501                           tblptru	equ	0xFF8
  9502                           tblptrh	equ	0xFF7
  9503                           tblptrl	equ	0xFF6
  9504                           tablat	equ	0xFF5
  9505                           prodh	equ	0xFF4
  9506                           prodl	equ	0xFF3
  9507                           intcon	equ	0xFF2
  9508                           intcon2	equ	0xFF1
  9509                           intcon3	equ	0xFF0
  9510                           postinc0	equ	0xFEE
  9511                           wreg	equ	0xFE8
  9512                           postdec1	equ	0xFE5
  9513                           fsr1l	equ	0xFE1
  9514                           postinc2	equ	0xFDE
  9515                           postdec2	equ	0xFDD
  9516                           fsr2h	equ	0xFDA
  9517                           fsr2l	equ	0xFD9
  9518                           status	equ	0xFD8
  9519                           
  9520 ;; *************** function _Do_Update_Main_Screen *****************
  9521 ;; Defined at:
  9522 ;;		line 1766 in file "lab_final_alt.c"
  9523 ;; Parameters:    Size  Location     Type
  9524 ;;		None
  9525 ;; Auto vars:     Size  Location     Type
  9526 ;;		None
  9527 ;; Return value:  Size  Location     Type
  9528 ;;		None               void
  9529 ;; Registers used:
  9530 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9531 ;; Tracked objects:
  9532 ;;		On entry : 0/0
  9533 ;;		On exit  : 0/0
  9534 ;;		Unchanged: 0/0
  9535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9536 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9537 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9538 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9539 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9540 ;;Total ram usage:        0 bytes
  9541 ;; Hardware stack levels used:    1
  9542 ;; Hardware stack levels required when called:   12
  9543 ;; This function calls:
  9544 ;;		_DS3231_Read_Temp
  9545 ;;		___awdiv
  9546 ;;		___awmod
  9547 ;;		___wmul
  9548 ;;		_drawtext
  9549 ;;		_strcpy
  9550 ;; This function is called by:
  9551 ;;		_main
  9552 ;; This function uses a non-reentrant model
  9553 ;;
  9554                           
  9555                           	psect	text31
  9556  001048                     __ptext31:
  9557                           	opt stack 0
  9558  001048                     _Do_Update_Main_Screen:
  9559                           	opt stack 18
  9560                           
  9561                           ;lab_final_alt.c: 1768: DS3231_tempC = DS3231_Read_Temp(0x68);
  9562                           
  9563                           ;incstack = 0
  9564  001048  0E68               	movlw	104
  9565  00104A  ECFB  F01E         	call	_DS3231_Read_Temp
  9566  00104E  C036  F0DE         	movff	?_DS3231_Read_Temp,_DS3231_tempC
  9567  001052  C037  F0DF         	movff	?_DS3231_Read_Temp+1,_DS3231_tempC+1
  9568                           
  9569                           ;lab_final_alt.c: 1769: DS3231_tempF = DS3231_tempC*9/5 + 32;
  9570  001056  C0DE  F02A         	movff	_DS3231_tempC,___wmul@multiplier
  9571  00105A  C0DF  F02B         	movff	_DS3231_tempC+1,___wmul@multiplier+1
  9572  00105E  0E00               	movlw	0
  9573  001060  6E2D               	movwf	___wmul@multiplicand+1,c
  9574  001062  0E09               	movlw	9
  9575  001064  6E2C               	movwf	___wmul@multiplicand,c
  9576  001066  ECC3  F024         	call	___wmul	;wreg free
  9577  00106A  C02A  F022         	movff	?___wmul,___awdiv@dividend
  9578  00106E  C02B  F023         	movff	?___wmul+1,___awdiv@dividend+1
  9579  001072  0E00               	movlw	0
  9580  001074  6E25               	movwf	___awdiv@divisor+1,c
  9581  001076  0E05               	movlw	5
  9582  001078  6E24               	movwf	___awdiv@divisor,c
  9583  00107A  EC92  F01D         	call	___awdiv	;wreg free
  9584  00107E  0E20               	movlw	32
  9585  001080  2422               	addwf	?___awdiv,w,c
  9586  001082  0100               	movlb	0	; () banked
  9587  001084  6FE0               	movwf	_DS3231_tempF& (0+255),b
  9588  001086  0E00               	movlw	0
  9589  001088  2023               	addwfc	?___awdiv+1,w,c
  9590  00108A  0100               	movlb	0	; () banked
  9591  00108C  6FE1               	movwf	(_DS3231_tempF+1)& (0+255),b
  9592                           
  9593                           ; BSR set to: 0
  9594                           ;lab_final_alt.c: 1770: tempC[0] = DS3231_tempC/10 + '0';
  9595  00108E  C0DE  F022         	movff	_DS3231_tempC,___awdiv@dividend
  9596  001092  C0DF  F023         	movff	_DS3231_tempC+1,___awdiv@dividend+1
  9597  001096  0E00               	movlw	0
  9598  001098  6E25               	movwf	___awdiv@divisor+1,c
  9599  00109A  0E0A               	movlw	10
  9600  00109C  6E24               	movwf	___awdiv@divisor,c
  9601  00109E  EC92  F01D         	call	___awdiv	;wreg free
  9602  0010A2  5022               	movf	?___awdiv,w,c
  9603  0010A4  0F30               	addlw	48
  9604  0010A6  0100               	movlb	0	; () banked
  9605  0010A8  6FAC               	movwf	_tempC& (0+255),b
  9606                           
  9607                           ; BSR set to: 0
  9608                           ;lab_final_alt.c: 1771: tempC[1] = DS3231_tempC%10 + '0';
  9609  0010AA  C0DE  F01C         	movff	_DS3231_tempC,___awmod@dividend
  9610  0010AE  C0DF  F01D         	movff	_DS3231_tempC+1,___awmod@dividend+1
  9611  0010B2  0E00               	movlw	0
  9612  0010B4  6E1F               	movwf	___awmod@divisor+1,c
  9613  0010B6  0E0A               	movlw	10
  9614  0010B8  6E1E               	movwf	___awmod@divisor,c
  9615  0010BA  ECC8  F01F         	call	___awmod	;wreg free
  9616  0010BE  501C               	movf	?___awmod,w,c
  9617  0010C0  0F30               	addlw	48
  9618  0010C2  0100               	movlb	0	; () banked
  9619  0010C4  6FAD               	movwf	(_tempC+1)& (0+255),b
  9620                           
  9621                           ; BSR set to: 0
  9622                           ;lab_final_alt.c: 1772: tempF[0] = DS3231_tempF/10 + '0';
  9623  0010C6  C0E0  F022         	movff	_DS3231_tempF,___awdiv@dividend
  9624  0010CA  C0E1  F023         	movff	_DS3231_tempF+1,___awdiv@dividend+1
  9625  0010CE  0E00               	movlw	0
  9626  0010D0  6E25               	movwf	___awdiv@divisor+1,c
  9627  0010D2  0E0A               	movlw	10
  9628  0010D4  6E24               	movwf	___awdiv@divisor,c
  9629  0010D6  EC92  F01D         	call	___awdiv	;wreg free
  9630  0010DA  5022               	movf	?___awdiv,w,c
  9631  0010DC  0F30               	addlw	48
  9632  0010DE  0100               	movlb	0	; () banked
  9633  0010E0  6FAF               	movwf	_tempF& (0+255),b
  9634                           
  9635                           ; BSR set to: 0
  9636                           ;lab_final_alt.c: 1773: tempF[1] = DS3231_tempF%10 + '0';
  9637  0010E2  C0E0  F01C         	movff	_DS3231_tempF,___awmod@dividend
  9638  0010E6  C0E1  F01D         	movff	_DS3231_tempF+1,___awmod@dividend+1
  9639  0010EA  0E00               	movlw	0
  9640  0010EC  6E1F               	movwf	___awmod@divisor+1,c
  9641  0010EE  0E0A               	movlw	10
  9642  0010F0  6E1E               	movwf	___awmod@divisor,c
  9643  0010F2  ECC8  F01F         	call	___awmod	;wreg free
  9644  0010F6  501C               	movf	?___awmod,w,c
  9645  0010F8  0F30               	addlw	48
  9646  0010FA  0100               	movlb	0	; () banked
  9647  0010FC  6FB0               	movwf	(_tempF+1)& (0+255),b
  9648                           
  9649                           ; BSR set to: 0
  9650                           ;lab_final_alt.c: 1774: time[0] = (hour>>4) + '0';
  9651  0010FE  0100               	movlb	0	; () banked
  9652  001100  39F1               	swapf	_hour& (0+255),w,b
  9653  001102  0B0F               	andlw	15
  9654  001104  0F30               	addlw	48
  9655  001106  0100               	movlb	0	; () banked
  9656  001108  6F92               	movwf	_time& (0+255),b
  9657                           
  9658                           ; BSR set to: 0
  9659                           ;lab_final_alt.c: 1775: time[1] = (hour & 0x0f)+ '0';
  9660  00110A  0100               	movlb	0	; () banked
  9661  00110C  51F1               	movf	_hour& (0+255),w,b
  9662  00110E  0B0F               	andlw	15
  9663  001110  0F30               	addlw	48
  9664  001112  0100               	movlb	0	; () banked
  9665  001114  6F93               	movwf	(_time+1)& (0+255),b
  9666                           
  9667                           ; BSR set to: 0
  9668                           ;lab_final_alt.c: 1776: time[3] = (minute>>4) + '0';
  9669  001116  0100               	movlb	0	; () banked
  9670  001118  39F2               	swapf	_minute& (0+255),w,b
  9671  00111A  0B0F               	andlw	15
  9672  00111C  0F30               	addlw	48
  9673  00111E  0100               	movlb	0	; () banked
  9674  001120  6F95               	movwf	(_time+3)& (0+255),b
  9675                           
  9676                           ; BSR set to: 0
  9677                           ;lab_final_alt.c: 1777: time[4] = (minute & 0x0f)+ '0';
  9678  001122  0100               	movlb	0	; () banked
  9679  001124  51F2               	movf	_minute& (0+255),w,b
  9680  001126  0B0F               	andlw	15
  9681  001128  0F30               	addlw	48
  9682  00112A  0100               	movlb	0	; () banked
  9683  00112C  6F96               	movwf	(_time+4)& (0+255),b
  9684                           
  9685                           ; BSR set to: 0
  9686                           ;lab_final_alt.c: 1778: time[6] = (second>>4) + '0';
  9687  00112E  0100               	movlb	0	; () banked
  9688  001130  39F6               	swapf	_second& (0+255),w,b
  9689  001132  0B0F               	andlw	15
  9690  001134  0F30               	addlw	48
  9691  001136  0100               	movlb	0	; () banked
  9692  001138  6F98               	movwf	(_time+6)& (0+255),b
  9693                           
  9694                           ; BSR set to: 0
  9695                           ;lab_final_alt.c: 1779: time[7] = (second & 0x0f)+ '0';
  9696  00113A  0100               	movlb	0	; () banked
  9697  00113C  51F6               	movf	_second& (0+255),w,b
  9698  00113E  0B0F               	andlw	15
  9699  001140  0F30               	addlw	48
  9700  001142  0100               	movlb	0	; () banked
  9701  001144  6F99               	movwf	(_time+7)& (0+255),b
  9702                           
  9703                           ; BSR set to: 0
  9704                           ;lab_final_alt.c: 1780: date[0] = (month>>4) + '0';
  9705  001146  0100               	movlb	0	; () banked
  9706  001148  39F3               	swapf	_month& (0+255),w,b
  9707  00114A  0B0F               	andlw	15
  9708  00114C  0F30               	addlw	48
  9709  00114E  0100               	movlb	0	; () banked
  9710  001150  6F80               	movwf	_date& (0+255),b
  9711                           
  9712                           ; BSR set to: 0
  9713                           ;lab_final_alt.c: 1781: date[1] = (month & 0x0f)+ '0';
  9714  001152  0100               	movlb	0	; () banked
  9715  001154  51F3               	movf	_month& (0+255),w,b
  9716  001156  0B0F               	andlw	15
  9717  001158  0F30               	addlw	48
  9718  00115A  0100               	movlb	0	; () banked
  9719  00115C  6F81               	movwf	(_date+1)& (0+255),b
  9720                           
  9721                           ; BSR set to: 0
  9722                           ;lab_final_alt.c: 1782: date[3] = (day>>4) + '0';
  9723  00115E  0100               	movlb	0	; () banked
  9724  001160  39EF               	swapf	_day& (0+255),w,b
  9725  001162  0B0F               	andlw	15
  9726  001164  0F30               	addlw	48
  9727  001166  0100               	movlb	0	; () banked
  9728  001168  6F83               	movwf	(_date+3)& (0+255),b
  9729                           
  9730                           ; BSR set to: 0
  9731                           ;lab_final_alt.c: 1783: date[4] = (day & 0x0f)+ '0';
  9732  00116A  0100               	movlb	0	; () banked
  9733  00116C  51EF               	movf	_day& (0+255),w,b
  9734  00116E  0B0F               	andlw	15
  9735  001170  0F30               	addlw	48
  9736  001172  0100               	movlb	0	; () banked
  9737  001174  6F84               	movwf	(_date+4)& (0+255),b
  9738                           
  9739                           ; BSR set to: 0
  9740                           ;lab_final_alt.c: 1784: date[6] = (year>>4) + '0';
  9741  001176  0100               	movlb	0	; () banked
  9742  001178  39F8               	swapf	_year& (0+255),w,b
  9743  00117A  0B0F               	andlw	15
  9744  00117C  0F30               	addlw	48
  9745  00117E  0100               	movlb	0	; () banked
  9746  001180  6F86               	movwf	(_date+6)& (0+255),b
  9747                           
  9748                           ; BSR set to: 0
  9749                           ;lab_final_alt.c: 1785: date[7] = (year & 0x0f)+ '0';
  9750  001182  0100               	movlb	0	; () banked
  9751  001184  51F8               	movf	_year& (0+255),w,b
  9752  001186  0B0F               	andlw	15
  9753  001188  0F30               	addlw	48
  9754  00118A  0100               	movlb	0	; () banked
  9755  00118C  6F87               	movwf	(_date+7)& (0+255),b
  9756                           
  9757                           ; BSR set to: 0
  9758                           ;lab_final_alt.c: 1787: if (alarm_mode == 1)
  9759  00118E  0100               	movlb	0	; () banked
  9760  001190  05EB               	decf	_alarm_mode& (0+255),w,b
  9761  001192  A4D8               	btfss	status,2,c
  9762  001194  D00B               	goto	l9244
  9763                           
  9764                           ; BSR set to: 0
  9765                           ;lab_final_alt.c: 1788: {
  9766                           ;lab_final_alt.c: 1790: strcpy(alarm_text, "ON ");
  9767  001196  0E9B               	movlw	low _alarm_text
  9768  001198  6E1C               	movwf	strcpy@to,c
  9769  00119A  0E00               	movlw	high _alarm_text
  9770  00119C  6E1D               	movwf	strcpy@to+1,c
  9771  00119E  0EF0               	movlw	low STR_15
  9772  0011A0  6E1E               	movwf	strcpy@from,c
  9773  0011A2  0EFF               	movlw	high STR_15
  9774  0011A4  6E1F               	movwf	strcpy@from+1,c
  9775  0011A6  EC33  F024         	call	_strcpy	;wreg free
  9776                           
  9777                           ;lab_final_alt.c: 1792: }
  9778  0011AA  D00B               	goto	l9246
  9779  0011AC                     l9244:
  9780                           
  9781                           ;lab_final_alt.c: 1793: else
  9782                           ;lab_final_alt.c: 1794: {
  9783                           ;lab_final_alt.c: 1795: strcpy(alarm_text, "OFF");
  9784  0011AC  0E9B               	movlw	low _alarm_text
  9785  0011AE  6E1C               	movwf	strcpy@to,c
  9786  0011B0  0E00               	movlw	high _alarm_text
  9787  0011B2  6E1D               	movwf	strcpy@to+1,c
  9788  0011B4  0EF8               	movlw	low STR_16
  9789  0011B6  6E1E               	movwf	strcpy@from,c
  9790  0011B8  0EFF               	movlw	high STR_16
  9791  0011BA  6E1F               	movwf	strcpy@from+1,c
  9792  0011BC  EC33  F024         	call	_strcpy	;wreg free
  9793  0011C0  D000               	goto	l9246
  9794  0011C2                     l9246:
  9795                           
  9796                           ;lab_final_alt.c: 1796: }
  9797                           ;lab_final_alt.c: 1798: LED_Int_text[0] = LED_Intensity/10 + '0';
  9798  0011C2  C0E8  F022         	movff	_LED_Intensity,___awdiv@dividend
  9799  0011C6  6A23               	clrf	___awdiv@dividend+1,c
  9800  0011C8  0E00               	movlw	0
  9801  0011CA  6E25               	movwf	___awdiv@divisor+1,c
  9802  0011CC  0E0A               	movlw	10
  9803  0011CE  6E24               	movwf	___awdiv@divisor,c
  9804  0011D0  EC92  F01D         	call	___awdiv	;wreg free
  9805  0011D4  5022               	movf	?___awdiv,w,c
  9806  0011D6  0F30               	addlw	48
  9807  0011D8  0100               	movlb	0	; () banked
  9808  0011DA  6FA3               	movwf	_LED_Int_text& (0+255),b
  9809                           
  9810                           ; BSR set to: 0
  9811                           ;lab_final_alt.c: 1799: LED_Int_text[1] = LED_Intensity%10 + '0';
  9812  0011DC  C0E8  F01C         	movff	_LED_Intensity,___awmod@dividend
  9813  0011E0  6A1D               	clrf	___awmod@dividend+1,c
  9814  0011E2  0E00               	movlw	0
  9815  0011E4  6E1F               	movwf	___awmod@divisor+1,c
  9816  0011E6  0E0A               	movlw	10
  9817  0011E8  6E1E               	movwf	___awmod@divisor,c
  9818  0011EA  ECC8  F01F         	call	___awmod	;wreg free
  9819  0011EE  501C               	movf	?___awmod,w,c
  9820  0011F0  0F30               	addlw	48
  9821  0011F2  0100               	movlb	0	; () banked
  9822  0011F4  6FA4               	movwf	(_LED_Int_text+1)& (0+255),b
  9823                           
  9824                           ; BSR set to: 0
  9825                           ;lab_final_alt.c: 1801: if (heater_mode == 1)
  9826  0011F6  0100               	movlb	0	; () banked
  9827  0011F8  05F0               	decf	_heater_mode& (0+255),w,b
  9828  0011FA  A4D8               	btfss	status,2,c
  9829  0011FC  D023               	goto	l9258
  9830                           
  9831                           ; BSR set to: 0
  9832                           ;lab_final_alt.c: 1802: {
  9833                           ;lab_final_alt.c: 1803: strcpy(heater_text, "ON ");
  9834  0011FE  0E9F               	movlw	low _heater_text
  9835  001200  6E1C               	movwf	strcpy@to,c
  9836  001202  0E00               	movlw	high _heater_text
  9837  001204  6E1D               	movwf	strcpy@to+1,c
  9838  001206  0EF0               	movlw	low STR_15
  9839  001208  6E1E               	movwf	strcpy@from,c
  9840  00120A  0EFF               	movlw	high STR_15
  9841  00120C  6E1F               	movwf	strcpy@from+1,c
  9842  00120E  EC33  F024         	call	_strcpy	;wreg free
  9843                           
  9844                           ;lab_final_alt.c: 1804: heater_S_text[0] = set_heater_temp/10 + '0';
  9845  001212  C0F7  F022         	movff	_set_heater_temp,___awdiv@dividend
  9846  001216  6A23               	clrf	___awdiv@dividend+1,c
  9847  001218  0E00               	movlw	0
  9848  00121A  6E25               	movwf	___awdiv@divisor+1,c
  9849  00121C  0E0A               	movlw	10
  9850  00121E  6E24               	movwf	___awdiv@divisor,c
  9851  001220  EC92  F01D         	call	___awdiv	;wreg free
  9852  001224  5022               	movf	?___awdiv,w,c
  9853  001226  0F30               	addlw	48
  9854  001228  0100               	movlb	0	; () banked
  9855  00122A  6FA6               	movwf	_heater_S_text& (0+255),b
  9856                           
  9857                           ; BSR set to: 0
  9858                           ;lab_final_alt.c: 1805: heater_S_text[1] = set_heater_temp%10 + '0';
  9859  00122C  C0F7  F01C         	movff	_set_heater_temp,___awmod@dividend
  9860  001230  6A1D               	clrf	___awmod@dividend+1,c
  9861  001232  0E00               	movlw	0
  9862  001234  6E1F               	movwf	___awmod@divisor+1,c
  9863  001236  0E0A               	movlw	10
  9864  001238  6E1E               	movwf	___awmod@divisor,c
  9865  00123A  ECC8  F01F         	call	___awmod	;wreg free
  9866  00123E  501C               	movf	?___awmod,w,c
  9867  001240  0F30               	addlw	48
  9868  001242  D00E               	goto	L8
  9869  001244                     l9258:
  9870                           
  9871                           ; BSR set to: 0
  9872                           ;lab_final_alt.c: 1808: else
  9873                           ;lab_final_alt.c: 1809: {
  9874                           ;lab_final_alt.c: 1810: strcpy(heater_text, "OFF");
  9875  001244  0E9F               	movlw	low _heater_text
  9876  001246  6E1C               	movwf	strcpy@to,c
  9877  001248  0E00               	movlw	high _heater_text
  9878  00124A  6E1D               	movwf	strcpy@to+1,c
  9879  00124C  0EF8               	movlw	low STR_16
  9880  00124E  6E1E               	movwf	strcpy@from,c
  9881  001250  0EFF               	movlw	high STR_16
  9882  001252  6E1F               	movwf	strcpy@from+1,c
  9883  001254  EC33  F024         	call	_strcpy	;wreg free
  9884                           
  9885                           ;lab_final_alt.c: 1811: heater_S_text[0] = '-';
  9886  001258  0E2D               	movlw	45
  9887  00125A  0100               	movlb	0	; () banked
  9888  00125C  6FA6               	movwf	_heater_S_text& (0+255),b
  9889                           
  9890                           ; BSR set to: 0
  9891                           ;lab_final_alt.c: 1812: heater_S_text[1] = '-';
  9892  00125E  0E2D               	movlw	45
  9893  001260                     L8:
  9894  001260  0100               	movlb	0	; () banked
  9895  001262  6FA7               	movwf	(_heater_S_text+1)& (0+255),b
  9896  001264  D000               	goto	l9264
  9897  001266                     l9264:
  9898                           
  9899                           ; BSR set to: 0
  9900                           ;lab_final_alt.c: 1813: }
  9901                           ;lab_final_alt.c: 1815: drawtext(15, 26 , tempC , 0xFFE0 , 0x0000 , 2);
  9902  001266  0E1A               	movlw	26
  9903  001268  0100               	movlb	0	; () banked
  9904  00126A  6FB2               	movwf	drawtext@y& (0+255),b
  9905  00126C  0EAC               	movlw	low _tempC
  9906  00126E  0100               	movlb	0	; () banked
  9907  001270  6FB3               	movwf	drawtext@_text& (0+255),b
  9908  001272  0E00               	movlw	high _tempC
  9909  001274  0100               	movlb	0	; () banked
  9910  001276  6FB4               	movwf	(drawtext@_text+1)& (0+255),b
  9911  001278  0EFF               	movlw	255
  9912  00127A  0100               	movlb	0	; () banked
  9913  00127C  6FB6               	movwf	(drawtext@color+1)& (0+255),b
  9914  00127E  0EE0               	movlw	224
  9915  001280  6FB5               	movwf	drawtext@color& (0+255),b
  9916  001282  0E00               	movlw	0
  9917  001284  0100               	movlb	0	; () banked
  9918  001286  6FB8               	movwf	(drawtext@bg+1)& (0+255),b
  9919  001288  0E00               	movlw	0
  9920  00128A  6FB7               	movwf	drawtext@bg& (0+255),b
  9921  00128C  0E02               	movlw	2
  9922  00128E  0100               	movlb	0	; () banked
  9923  001290  6FB9               	movwf	drawtext@size& (0+255),b
  9924  001292  0E0F               	movlw	15
  9925  001294  ECC8  F017         	call	_drawtext
  9926                           
  9927                           ;lab_final_alt.c: 1816: drawtext(70, 26 , tempF , 0xFFE0 , 0x0000 , 2);
  9928  001298  0E1A               	movlw	26
  9929  00129A  0100               	movlb	0	; () banked
  9930  00129C  6FB2               	movwf	drawtext@y& (0+255),b
  9931  00129E  0EAF               	movlw	low _tempF
  9932  0012A0  0100               	movlb	0	; () banked
  9933  0012A2  6FB3               	movwf	drawtext@_text& (0+255),b
  9934  0012A4  0E00               	movlw	high _tempF
  9935  0012A6  0100               	movlb	0	; () banked
  9936  0012A8  6FB4               	movwf	(drawtext@_text+1)& (0+255),b
  9937  0012AA  0EFF               	movlw	255
  9938  0012AC  0100               	movlb	0	; () banked
  9939  0012AE  6FB6               	movwf	(drawtext@color+1)& (0+255),b
  9940  0012B0  0EE0               	movlw	224
  9941  0012B2  6FB5               	movwf	drawtext@color& (0+255),b
  9942  0012B4  0E00               	movlw	0
  9943  0012B6  0100               	movlb	0	; () banked
  9944  0012B8  6FB8               	movwf	(drawtext@bg+1)& (0+255),b
  9945  0012BA  0E00               	movlw	0
  9946  0012BC  6FB7               	movwf	drawtext@bg& (0+255),b
  9947  0012BE  0E02               	movlw	2
  9948  0012C0  0100               	movlb	0	; () banked
  9949  0012C2  6FB9               	movwf	drawtext@size& (0+255),b
  9950  0012C4  0E46               	movlw	70
  9951  0012C6  ECC8  F017         	call	_drawtext
  9952                           
  9953                           ;lab_final_alt.c: 1817: drawtext(15 , 56 , time , 0x07FF , 0x0000 , 2);
  9954  0012CA  0E38               	movlw	56
  9955  0012CC  0100               	movlb	0	; () banked
  9956  0012CE  6FB2               	movwf	drawtext@y& (0+255),b
  9957  0012D0  0E92               	movlw	low _time
  9958  0012D2  0100               	movlb	0	; () banked
  9959  0012D4  6FB3               	movwf	drawtext@_text& (0+255),b
  9960  0012D6  0E00               	movlw	high _time
  9961  0012D8  0100               	movlb	0	; () banked
  9962  0012DA  6FB4               	movwf	(drawtext@_text+1)& (0+255),b
  9963  0012DC  0E07               	movlw	7
  9964  0012DE  0100               	movlb	0	; () banked
  9965  0012E0  6FB6               	movwf	(drawtext@color+1)& (0+255),b
  9966  0012E2  69B5               	setf	drawtext@color& (0+255),b
  9967  0012E4  0E00               	movlw	0
  9968  0012E6  0100               	movlb	0	; () banked
  9969  0012E8  6FB8               	movwf	(drawtext@bg+1)& (0+255),b
  9970  0012EA  0E00               	movlw	0
  9971  0012EC  6FB7               	movwf	drawtext@bg& (0+255),b
  9972  0012EE  0E02               	movlw	2
  9973  0012F0  0100               	movlb	0	; () banked
  9974  0012F2  6FB9               	movwf	drawtext@size& (0+255),b
  9975  0012F4  0E0F               	movlw	15
  9976  0012F6  ECC8  F017         	call	_drawtext
  9977                           
  9978                           ;lab_final_alt.c: 1818: drawtext(15 , 86 , date , 0x07E0 , 0x0000 , 2);
  9979  0012FA  0E56               	movlw	86
  9980  0012FC  0100               	movlb	0	; () banked
  9981  0012FE  6FB2               	movwf	drawtext@y& (0+255),b
  9982  001300  0E80               	movlw	low _date
  9983  001302  0100               	movlb	0	; () banked
  9984  001304  6FB3               	movwf	drawtext@_text& (0+255),b
  9985  001306  0E00               	movlw	high _date
  9986  001308  0100               	movlb	0	; () banked
  9987  00130A  6FB4               	movwf	(drawtext@_text+1)& (0+255),b
  9988  00130C  0E07               	movlw	7
  9989  00130E  0100               	movlb	0	; () banked
  9990  001310  6FB6               	movwf	(drawtext@color+1)& (0+255),b
  9991  001312  0EE0               	movlw	224
  9992  001314  6FB5               	movwf	drawtext@color& (0+255),b
  9993  001316  0E00               	movlw	0
  9994  001318  0100               	movlb	0	; () banked
  9995  00131A  6FB8               	movwf	(drawtext@bg+1)& (0+255),b
  9996  00131C  0E00               	movlw	0
  9997  00131E  6FB7               	movwf	drawtext@bg& (0+255),b
  9998  001320  0E02               	movlw	2
  9999  001322  0100               	movlb	0	; () banked
 10000  001324  6FB9               	movwf	drawtext@size& (0+255),b
 10001  001326  0E0F               	movlw	15
 10002  001328  ECC8  F017         	call	_drawtext
 10003                           
 10004                           ;lab_final_alt.c: 1819: drawtext(14, 118 , alarm_text, 0xF81F, 0x0000, 1);
 10005  00132C  0E76               	movlw	118
 10006  00132E  0100               	movlb	0	; () banked
 10007  001330  6FB2               	movwf	drawtext@y& (0+255),b
 10008  001332  0E9B               	movlw	low _alarm_text
 10009  001334  0100               	movlb	0	; () banked
 10010  001336  6FB3               	movwf	drawtext@_text& (0+255),b
 10011  001338  0E00               	movlw	high _alarm_text
 10012  00133A  0100               	movlb	0	; () banked
 10013  00133C  6FB4               	movwf	(drawtext@_text+1)& (0+255),b
 10014  00133E  0EF8               	movlw	248
 10015  001340  0100               	movlb	0	; () banked
 10016  001342  6FB6               	movwf	(drawtext@color+1)& (0+255),b
 10017  001344  0E1F               	movlw	31
 10018  001346  6FB5               	movwf	drawtext@color& (0+255),b
 10019  001348  0E00               	movlw	0
 10020  00134A  0100               	movlb	0	; () banked
 10021  00134C  6FB8               	movwf	(drawtext@bg+1)& (0+255),b
 10022  00134E  0E00               	movlw	0
 10023  001350  6FB7               	movwf	drawtext@bg& (0+255),b
 10024  001352  0E01               	movlw	1
 10025  001354  0100               	movlb	0	; () banked
 10026  001356  6FB9               	movwf	drawtext@size& (0+255),b
 10027  001358  0E0E               	movlw	14
 10028  00135A  ECC8  F017         	call	_drawtext
 10029                           
 10030                           ;lab_final_alt.c: 1820: drawtext(50, 118 , LED_Int_text, 0xF81F, 0x0000, 1);
 10031  00135E  0E76               	movlw	118
 10032  001360  0100               	movlb	0	; () banked
 10033  001362  6FB2               	movwf	drawtext@y& (0+255),b
 10034  001364  0EA3               	movlw	low _LED_Int_text
 10035  001366  0100               	movlb	0	; () banked
 10036  001368  6FB3               	movwf	drawtext@_text& (0+255),b
 10037  00136A  0E00               	movlw	high _LED_Int_text
 10038  00136C  0100               	movlb	0	; () banked
 10039  00136E  6FB4               	movwf	(drawtext@_text+1)& (0+255),b
 10040  001370  0EF8               	movlw	248
 10041  001372  0100               	movlb	0	; () banked
 10042  001374  6FB6               	movwf	(drawtext@color+1)& (0+255),b
 10043  001376  0E1F               	movlw	31
 10044  001378  6FB5               	movwf	drawtext@color& (0+255),b
 10045  00137A  0E00               	movlw	0
 10046  00137C  0100               	movlb	0	; () banked
 10047  00137E  6FB8               	movwf	(drawtext@bg+1)& (0+255),b
 10048  001380  0E00               	movlw	0
 10049  001382  6FB7               	movwf	drawtext@bg& (0+255),b
 10050  001384  0E01               	movlw	1
 10051  001386  0100               	movlb	0	; () banked
 10052  001388  6FB9               	movwf	drawtext@size& (0+255),b
 10053  00138A  0E32               	movlw	50
 10054  00138C  ECC8  F017         	call	_drawtext
 10055                           
 10056                           ;lab_final_alt.c: 1821: drawtext(95 , 118 , heater_text, 0xF81F, 0x0000, 1);
 10057  001390  0E76               	movlw	118
 10058  001392  0100               	movlb	0	; () banked
 10059  001394  6FB2               	movwf	drawtext@y& (0+255),b
 10060  001396  0E9F               	movlw	low _heater_text
 10061  001398  0100               	movlb	0	; () banked
 10062  00139A  6FB3               	movwf	drawtext@_text& (0+255),b
 10063  00139C  0E00               	movlw	high _heater_text
 10064  00139E  0100               	movlb	0	; () banked
 10065  0013A0  6FB4               	movwf	(drawtext@_text+1)& (0+255),b
 10066  0013A2  0EF8               	movlw	248
 10067  0013A4  0100               	movlb	0	; () banked
 10068  0013A6  6FB6               	movwf	(drawtext@color+1)& (0+255),b
 10069  0013A8  0E1F               	movlw	31
 10070  0013AA  6FB5               	movwf	drawtext@color& (0+255),b
 10071  0013AC  0E00               	movlw	0
 10072  0013AE  0100               	movlb	0	; () banked
 10073  0013B0  6FB8               	movwf	(drawtext@bg+1)& (0+255),b
 10074  0013B2  0E00               	movlw	0
 10075  0013B4  6FB7               	movwf	drawtext@bg& (0+255),b
 10076  0013B6  0E01               	movlw	1
 10077  0013B8  0100               	movlb	0	; () banked
 10078  0013BA  6FB9               	movwf	drawtext@size& (0+255),b
 10079  0013BC  0E5F               	movlw	95
 10080  0013BE  ECC8  F017         	call	_drawtext
 10081                           
 10082                           ;lab_final_alt.c: 1822: drawtext(46, 144 , heater_S_text, 0x001F, 0x0000, 2);
 10083  0013C2  0E90               	movlw	144
 10084  0013C4  0100               	movlb	0	; () banked
 10085  0013C6  6FB2               	movwf	drawtext@y& (0+255),b
 10086  0013C8  0EA6               	movlw	low _heater_S_text
 10087  0013CA  0100               	movlb	0	; () banked
 10088  0013CC  6FB3               	movwf	drawtext@_text& (0+255),b
 10089  0013CE  0E00               	movlw	high _heater_S_text
 10090  0013D0  0100               	movlb	0	; () banked
 10091  0013D2  6FB4               	movwf	(drawtext@_text+1)& (0+255),b
 10092  0013D4  0E00               	movlw	0
 10093  0013D6  0100               	movlb	0	; () banked
 10094  0013D8  6FB6               	movwf	(drawtext@color+1)& (0+255),b
 10095  0013DA  0E1F               	movlw	31
 10096  0013DC  6FB5               	movwf	drawtext@color& (0+255),b
 10097  0013DE  0E00               	movlw	0
 10098  0013E0  0100               	movlb	0	; () banked
 10099  0013E2  6FB8               	movwf	(drawtext@bg+1)& (0+255),b
 10100  0013E4  0E00               	movlw	0
 10101  0013E6  6FB7               	movwf	drawtext@bg& (0+255),b
 10102  0013E8  0E02               	movlw	2
 10103  0013EA  0100               	movlb	0	; () banked
 10104  0013EC  6FB9               	movwf	drawtext@size& (0+255),b
 10105  0013EE  0E2E               	movlw	46
 10106  0013F0  ECC8  F017         	call	_drawtext
 10107  0013F4  0012               	return		;funcret
 10108  0013F6                     __end_of_Do_Update_Main_Screen:
 10109                           	opt stack 0
 10110                           tblptru	equ	0xFF8
 10111                           tblptrh	equ	0xFF7
 10112                           tblptrl	equ	0xFF6
 10113                           tablat	equ	0xFF5
 10114                           prodh	equ	0xFF4
 10115                           prodl	equ	0xFF3
 10116                           intcon	equ	0xFF2
 10117                           intcon2	equ	0xFF1
 10118                           intcon3	equ	0xFF0
 10119                           postinc0	equ	0xFEE
 10120                           wreg	equ	0xFE8
 10121                           postdec1	equ	0xFE5
 10122                           fsr1l	equ	0xFE1
 10123                           postinc2	equ	0xFDE
 10124                           postdec2	equ	0xFDD
 10125                           fsr2h	equ	0xFDA
 10126                           fsr2l	equ	0xFD9
 10127                           status	equ	0xFD8
 10128                           
 10129 ;; *************** function _DS3231_Read_Temp *****************
 10130 ;; Defined at:
 10131 ;;		line 2313 in file "lab_final_alt.c"
 10132 ;; Parameters:    Size  Location     Type
 10133 ;;  Device          1    wreg     unsigned char 
 10134 ;; Auto vars:     Size  Location     Type
 10135 ;;  Device          1   60[COMRAM] unsigned char 
 10136 ;;  temp            2   58[COMRAM] int 
 10137 ;;  T_hi            1   61[COMRAM] unsigned char 
 10138 ;;  T_lo            1   57[COMRAM] unsigned char 
 10139 ;; Return value:  Size  Location     Type
 10140 ;;                  2   53[COMRAM] int 
 10141 ;; Registers used:
 10142 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 10143 ;; Tracked objects:
 10144 ;;		On entry : 0/0
 10145 ;;		On exit  : 0/0
 10146 ;;		Unchanged: 0/0
 10147 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10148 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10149 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10150 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10151 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10152 ;;Total ram usage:        9 bytes
 10153 ;; Hardware stack levels used:    1
 10154 ;; Hardware stack levels required when called:    8
 10155 ;; This function calls:
 10156 ;;		_I2C_ReStart
 10157 ;;		_I2C_Read
 10158 ;;		_I2C_Start
 10159 ;;		_I2C_Stop
 10160 ;;		_I2C_Write
 10161 ;;		_delay_ms
 10162 ;; This function is called by:
 10163 ;;		_main
 10164 ;;		_Do_Update_Main_Screen
 10165 ;; This function uses a non-reentrant model
 10166 ;;
 10167                           
 10168                           	psect	text32
 10169  003DF6                     __ptext32:
 10170                           	opt stack 0
 10171  003DF6                     _DS3231_Read_Temp:
 10172                           	opt stack 21
 10173                           
 10174                           ;incstack = 0
 10175                           ;DS3231_Read_Temp@Device stored from wreg
 10176  003DF6  6E3D               	movwf	DS3231_Read_Temp@Device,c
 10177                           
 10178                           ;lab_final_alt.c: 2315: char T_lo, T_hi;
 10179                           ;lab_final_alt.c: 2316: int temp;
 10180                           ;lab_final_alt.c: 2317: I2C_Start();
 10181  003DF8  ECDD  F025         	call	_I2C_Start	;wreg free
 10182                           
 10183                           ;lab_final_alt.c: 2318: I2C_Write((Device << 1) | 0);
 10184  003DFC  503D               	movf	DS3231_Read_Temp@Device,w,c
 10185  003DFE  243D               	addwf	DS3231_Read_Temp@Device,w,c
 10186  003E00  EC52  F023         	call	_I2C_Write
 10187                           
 10188                           ;lab_final_alt.c: 2319: I2C_Write(0x11);
 10189  003E04  0E11               	movlw	17
 10190  003E06  EC52  F023         	call	_I2C_Write
 10191                           
 10192                           ;lab_final_alt.c: 2320: I2C_ReStart();
 10193  003E0A  ECA3  F025         	call	_I2C_ReStart	;wreg free
 10194                           
 10195                           ;lab_final_alt.c: 2321: I2C_Write((Device << 1) | 1);
 10196  003E0E  80D8               	bsf	status,0,c
 10197  003E10  343D               	rlcf	DS3231_Read_Temp@Device,w,c
 10198  003E12  EC52  F023         	call	_I2C_Write
 10199                           
 10200                           ;lab_final_alt.c: 2322: T_hi = I2C_Read(1);
 10201  003E16  0E01               	movlw	1
 10202  003E18  ECF0  F022         	call	_I2C_Read
 10203  003E1C  6E3E               	movwf	DS3231_Read_Temp@T_hi,c
 10204                           
 10205                           ;lab_final_alt.c: 2323: T_lo = I2C_Read(0);
 10206  003E1E  0E00               	movlw	0
 10207  003E20  ECF0  F022         	call	_I2C_Read
 10208  003E24  6E3A               	movwf	DS3231_Read_Temp@T_lo,c
 10209                           
 10210                           ;lab_final_alt.c: 2324: I2C_Stop();
 10211  003E26  ECD4  F025         	call	_I2C_Stop	;wreg free
 10212                           
 10213                           ;lab_final_alt.c: 2325: delay_ms(50);
 10214  003E2A  0E00               	movlw	0
 10215  003E2C  6E31               	movwf	delay_ms@ms+1,c
 10216  003E2E  0E32               	movlw	50
 10217  003E30  6E30               	movwf	delay_ms@ms,c
 10218  003E32  ECDF  F021         	call	_delay_ms	;wreg free
 10219                           
 10220                           ;lab_final_alt.c: 2326: if ((T_hi & 0x80) == 0x80) temp = -(0x80 - (T_hi & 0x7f));
 10221  003E36  AE3E               	btfss	DS3231_Read_Temp@T_hi,7,c
 10222  003E38  D015               	goto	l8534
 10223  003E3A  503E               	movf	DS3231_Read_Temp@T_hi,w,c
 10224  003E3C  0B7F               	andlw	127
 10225  003E3E  6E38               	movwf	??_DS3231_Read_Temp& (0+255),c
 10226  003E40  6A39               	clrf	(??_DS3231_Read_Temp+1)& (0+255),c
 10227  003E42  1E38               	comf	??_DS3231_Read_Temp,f,c
 10228  003E44  1E39               	comf	??_DS3231_Read_Temp+1,f,c
 10229  003E46  4A38               	infsnz	??_DS3231_Read_Temp,f,c
 10230  003E48  2A39               	incf	??_DS3231_Read_Temp+1,f,c
 10231  003E4A  0E80               	movlw	128
 10232  003E4C  2638               	addwf	??_DS3231_Read_Temp,f,c
 10233  003E4E  0E00               	movlw	0
 10234  003E50  2239               	addwfc	??_DS3231_Read_Temp+1,f,c
 10235  003E52  1E38               	comf	??_DS3231_Read_Temp,f,c
 10236  003E54  1E39               	comf	??_DS3231_Read_Temp+1,f,c
 10237  003E56  4A38               	infsnz	??_DS3231_Read_Temp,f,c
 10238  003E58  2A39               	incf	??_DS3231_Read_Temp+1,f,c
 10239  003E5A  C038  F03B         	movff	??_DS3231_Read_Temp,DS3231_Read_Temp@temp
 10240  003E5E  C039  F03C         	movff	??_DS3231_Read_Temp+1,DS3231_Read_Temp@temp+1
 10241  003E62  D008               	goto	l8536
 10242  003E64                     l8534:
 10243                           
 10244                           ;lab_final_alt.c: 2327: else temp = (T_hi & 0x7f);
 10245  003E64  C03E  F038         	movff	DS3231_Read_Temp@T_hi,??_DS3231_Read_Temp
 10246  003E68  0E7F               	movlw	127
 10247  003E6A  1638               	andwf	??_DS3231_Read_Temp,f,c
 10248  003E6C  5038               	movf	??_DS3231_Read_Temp,w,c
 10249  003E6E  6E3B               	movwf	DS3231_Read_Temp@temp,c
 10250  003E70  6A3C               	clrf	DS3231_Read_Temp@temp+1,c
 10251  003E72  D000               	goto	l8536
 10252  003E74                     l8536:
 10253                           
 10254                           ;lab_final_alt.c: 2328: return (temp);
 10255  003E74  C03B  F036         	movff	DS3231_Read_Temp@temp,?_DS3231_Read_Temp
 10256  003E78  C03C  F037         	movff	DS3231_Read_Temp@temp+1,?_DS3231_Read_Temp+1
 10257  003E7C  D000               	goto	l750
 10258  003E7E                     l750:
 10259  003E7E  0012               	return		;funcret
 10260  003E80                     __end_of_DS3231_Read_Temp:
 10261                           	opt stack 0
 10262                           tblptru	equ	0xFF8
 10263                           tblptrh	equ	0xFF7
 10264                           tblptrl	equ	0xFF6
 10265                           tablat	equ	0xFF5
 10266                           prodh	equ	0xFF4
 10267                           prodl	equ	0xFF3
 10268                           intcon	equ	0xFF2
 10269                           intcon2	equ	0xFF1
 10270                           intcon3	equ	0xFF0
 10271                           postinc0	equ	0xFEE
 10272                           wreg	equ	0xFE8
 10273                           postdec1	equ	0xFE5
 10274                           fsr1l	equ	0xFE1
 10275                           postinc2	equ	0xFDE
 10276                           postdec2	equ	0xFDD
 10277                           fsr2h	equ	0xFDA
 10278                           fsr2l	equ	0xFD9
 10279                           status	equ	0xFD8
 10280                           
 10281 ;; *************** function _Do_Setup_Time *****************
 10282 ;; Defined at:
 10283 ;;		line 1895 in file "lab_final_alt.c"
 10284 ;; Parameters:    Size  Location     Type
 10285 ;;		None
 10286 ;; Auto vars:     Size  Location     Type
 10287 ;;  Select_Field    1   21[BANK0 ] unsigned char 
 10288 ;;  Setup_Mode      1   20[BANK0 ] unsigned char 
 10289 ;;  Key_Next_Fla    1   19[BANK0 ] unsigned char 
 10290 ;;  Key_Done_Fla    1   18[BANK0 ] unsigned char 
 10291 ;;  Key_Abort_Fl    1   17[BANK0 ] unsigned char 
 10292 ;;  Key_Dn_Flag     1   16[BANK0 ] unsigned char 
 10293 ;;  Key_Up_Flag     1   15[BANK0 ] unsigned char 
 10294 ;; Return value:  Size  Location     Type
 10295 ;;		None               void
 10296 ;; Registers used:
 10297 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10298 ;; Tracked objects:
 10299 ;;		On entry : 0/0
 10300 ;;		On exit  : 0/0
 10301 ;;		Unchanged: 0/0
 10302 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10303 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10304 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10305 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10306 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10307 ;;Total ram usage:        7 bytes
 10308 ;; Hardware stack levels used:    1
 10309 ;; Hardware stack levels required when called:   13
 10310 ;; This function calls:
 10311 ;;		_DS3231_Read_Time
 10312 ;;		_DS3231_Write_Time
 10313 ;;		_Initialize_Main_Screen
 10314 ;;		_Initialize_Setup_Time_Screen
 10315 ;;		_Update_Setup_Screen_Cursor
 10316 ;;		_Update_Setup_Time_Screen
 10317 ;;		_bcd_2_dec
 10318 ;;		_dec_2_bcd
 10319 ;; This function is called by:
 10320 ;;		_main
 10321 ;; This function uses a non-reentrant model
 10322 ;;
 10323                           
 10324                           	psect	text33
 10325  00173E                     __ptext33:
 10326                           	opt stack 0
 10327  00173E                     _Do_Setup_Time:
 10328                           	opt stack 17
 10329                           
 10330                           ;lab_final_alt.c: 1897: char Key_Next_Flag, Key_Up_Flag, Key_Dn_Flag, Key_Abort_Flag, Ke
      +                          y_Done_Flag;
 10331                           ;lab_final_alt.c: 1898: char Select_Field, Setup_Mode;
 10332                           ;lab_final_alt.c: 1899: Setup_Mode = 1;
 10333                           
 10334                           ;incstack = 0
 10335  00173E  0E01               	movlw	1
 10336  001740  0100               	movlb	0	; () banked
 10337  001742  6FC6               	movwf	Do_Setup_Time@Setup_Mode& (0+255),b
 10338                           
 10339                           ;lab_final_alt.c: 1900: Select_Field = 0;
 10340  001744  0E00               	movlw	0
 10341  001746  0100               	movlb	0	; () banked
 10342  001748  6FC7               	movwf	Do_Setup_Time@Select_Field& (0+255),b
 10343                           
 10344                           ; BSR set to: 0
 10345                           ;lab_final_alt.c: 1901: DS3231_Read_Time(0x68);
 10346  00174A  0E68               	movlw	104
 10347  00174C  EC09  F020         	call	_DS3231_Read_Time
 10348                           
 10349                           ;lab_final_alt.c: 1902: setup_second = bcd_2_dec(second);
 10350  001750  0100               	movlb	0	; () banked
 10351  001752  51F6               	movf	_second& (0+255),w,b
 10352  001754  EC7E  F024         	call	_bcd_2_dec
 10353  001758  501C               	movf	?_bcd_2_dec,w,c
 10354  00175A  6E62               	movwf	_setup_second,c
 10355                           
 10356                           ;lab_final_alt.c: 1903: setup_minute = bcd_2_dec(minute);
 10357  00175C  0100               	movlb	0	; () banked
 10358  00175E  51F2               	movf	_minute& (0+255),w,b
 10359  001760  EC7E  F024         	call	_bcd_2_dec
 10360  001764  501C               	movf	?_bcd_2_dec,w,c
 10361  001766  6E60               	movwf	_setup_minute,c
 10362                           
 10363                           ;lab_final_alt.c: 1904: setup_hour = bcd_2_dec(hour);
 10364  001768  0100               	movlb	0	; () banked
 10365  00176A  51F1               	movf	_hour& (0+255),w,b
 10366  00176C  EC7E  F024         	call	_bcd_2_dec
 10367  001770  501C               	movf	?_bcd_2_dec,w,c
 10368  001772  6E5F               	movwf	_setup_hour,c
 10369                           
 10370                           ;lab_final_alt.c: 1905: setup_day = bcd_2_dec(day);
 10371  001774  0100               	movlb	0	; () banked
 10372  001776  51EF               	movf	_day& (0+255),w,b
 10373  001778  EC7E  F024         	call	_bcd_2_dec
 10374  00177C  501C               	movf	?_bcd_2_dec,w,c
 10375  00177E  6E5D               	movwf	_setup_day,c
 10376                           
 10377                           ;lab_final_alt.c: 1906: setup_month = bcd_2_dec(month);
 10378  001780  0100               	movlb	0	; () banked
 10379  001782  51F3               	movf	_month& (0+255),w,b
 10380  001784  EC7E  F024         	call	_bcd_2_dec
 10381  001788  501C               	movf	?_bcd_2_dec,w,c
 10382  00178A  6E61               	movwf	_setup_month,c
 10383                           
 10384                           ;lab_final_alt.c: 1907: setup_year = bcd_2_dec(year);
 10385  00178C  0100               	movlb	0	; () banked
 10386  00178E  51F8               	movf	_year& (0+255),w,b
 10387  001790  EC7E  F024         	call	_bcd_2_dec
 10388  001794  501C               	movf	?_bcd_2_dec,w,c
 10389  001796  6E63               	movwf	_setup_year,c
 10390                           
 10391                           ;lab_final_alt.c: 1908: Initialize_Setup_Time_Screen();
 10392  001798  EC32  F017         	call	_Initialize_Setup_Time_Screen	;wreg free
 10393                           
 10394                           ;lab_final_alt.c: 1909: Update_Setup_Time_Screen();
 10395  00179C  ECAC  F013         	call	_Update_Setup_Time_Screen	;wreg free
 10396                           
 10397                           ;lab_final_alt.c: 1910: while (Setup_Mode == 1)
 10398  0017A0  D154               	goto	l9768
 10399  0017A2                     l9602:
 10400                           
 10401                           ;lab_final_alt.c: 1911: {
 10402                           ;lab_final_alt.c: 1912: if (nec_ok == 1)
 10403  0017A2  0100               	movlb	0	; () banked
 10404  0017A4  05F4               	decf	_nec_ok& (0+255),w,b
 10405  0017A6  A4D8               	btfss	status,2,c
 10406  0017A8  D150               	goto	l9768
 10407                           
 10408                           ; BSR set to: 0
 10409                           ;lab_final_alt.c: 1913: {
 10410                           ;lab_final_alt.c: 1914: INTCON3bits.INT2IE = 1;
 10411  0017AA  88F0               	bsf	intcon3,4,c	;volatile
 10412                           
 10413                           ;lab_final_alt.c: 1915: INTCON2bits.INTEDG2 = 0;
 10414  0017AC  98F1               	bcf	intcon2,4,c	;volatile
 10415                           
 10416                           ; BSR set to: 0
 10417                           ;lab_final_alt.c: 1916: nec_ok = 0;
 10418  0017AE  0E00               	movlw	0
 10419  0017B0  0100               	movlb	0	; () banked
 10420  0017B2  6FF4               	movwf	_nec_ok& (0+255),b
 10421                           
 10422                           ; BSR set to: 0
 10423                           ;lab_final_alt.c: 1918: if (nec_code == 0x00ff02fd) Key_Next_Flag = 1;
 10424  0017B4  0EFD               	movlw	253
 10425  0017B6  1849               	xorwf	_nec_code,w,c
 10426  0017B8  E10B               	bnz	l9612
 10427  0017BA  0E02               	movlw	2
 10428  0017BC  184A               	xorwf	_nec_code+1,w,c
 10429  0017BE  E108               	bnz	l9612
 10430  0017C0  284B               	incf	_nec_code+2,w,c
 10431  0017C2  104C               	iorwf	_nec_code+3,w,c
 10432  0017C4  A4D8               	btfss	status,2,c
 10433  0017C6  D004               	goto	l9612
 10434                           
 10435                           ; BSR set to: 0
 10436  0017C8  0E01               	movlw	1
 10437  0017CA  0100               	movlb	0	; () banked
 10438  0017CC  6FC5               	movwf	Do_Setup_Time@Key_Next_Flag& (0+255),b
 10439  0017CE  D000               	goto	l9612
 10440  0017D0                     l9612:
 10441                           
 10442                           ; BSR set to: 0
 10443                           ;lab_final_alt.c: 1919: if (nec_code == 0x00ffe21d) Key_Up_Flag = 1;
 10444  0017D0  0E1D               	movlw	29
 10445  0017D2  1849               	xorwf	_nec_code,w,c
 10446  0017D4  E10B               	bnz	l9616
 10447  0017D6  0EE2               	movlw	226
 10448  0017D8  184A               	xorwf	_nec_code+1,w,c
 10449  0017DA  E108               	bnz	l9616
 10450  0017DC  284B               	incf	_nec_code+2,w,c
 10451  0017DE  104C               	iorwf	_nec_code+3,w,c
 10452  0017E0  A4D8               	btfss	status,2,c
 10453  0017E2  D004               	goto	l9616
 10454                           
 10455                           ; BSR set to: 0
 10456  0017E4  0E01               	movlw	1
 10457  0017E6  0100               	movlb	0	; () banked
 10458  0017E8  6FC1               	movwf	Do_Setup_Time@Key_Up_Flag& (0+255),b
 10459  0017EA  D000               	goto	l9616
 10460  0017EC                     l9616:
 10461                           
 10462                           ; BSR set to: 0
 10463                           ;lab_final_alt.c: 1920: if (nec_code == 0x00ffa25d) Key_Dn_Flag = 1;
 10464  0017EC  0E5D               	movlw	93
 10465  0017EE  1849               	xorwf	_nec_code,w,c
 10466  0017F0  E10B               	bnz	l9620
 10467  0017F2  0EA2               	movlw	162
 10468  0017F4  184A               	xorwf	_nec_code+1,w,c
 10469  0017F6  E108               	bnz	l9620
 10470  0017F8  284B               	incf	_nec_code+2,w,c
 10471  0017FA  104C               	iorwf	_nec_code+3,w,c
 10472  0017FC  A4D8               	btfss	status,2,c
 10473  0017FE  D004               	goto	l9620
 10474                           
 10475                           ; BSR set to: 0
 10476  001800  0E01               	movlw	1
 10477  001802  0100               	movlb	0	; () banked
 10478  001804  6FC2               	movwf	Do_Setup_Time@Key_Dn_Flag& (0+255),b
 10479  001806  D000               	goto	l9620
 10480  001808                     l9620:
 10481                           
 10482                           ; BSR set to: 0
 10483                           ;lab_final_alt.c: 1921: if (nec_code == 0x00ff22dd) Key_Abort_Flag = 1;
 10484  001808  0EDD               	movlw	221
 10485  00180A  1849               	xorwf	_nec_code,w,c
 10486  00180C  E10B               	bnz	l9624
 10487  00180E  0E22               	movlw	34
 10488  001810  184A               	xorwf	_nec_code+1,w,c
 10489  001812  E108               	bnz	l9624
 10490  001814  284B               	incf	_nec_code+2,w,c
 10491  001816  104C               	iorwf	_nec_code+3,w,c
 10492  001818  A4D8               	btfss	status,2,c
 10493  00181A  D004               	goto	l9624
 10494                           
 10495                           ; BSR set to: 0
 10496  00181C  0E01               	movlw	1
 10497  00181E  0100               	movlb	0	; () banked
 10498  001820  6FC3               	movwf	Do_Setup_Time@Key_Abort_Flag& (0+255),b
 10499  001822  D000               	goto	l9624
 10500  001824                     l9624:
 10501                           
 10502                           ; BSR set to: 0
 10503                           ;lab_final_alt.c: 1922: if (nec_code == 0x00ffc23d) Key_Done_Flag = 1;
 10504  001824  0E3D               	movlw	61
 10505  001826  1849               	xorwf	_nec_code,w,c
 10506  001828  E10B               	bnz	l9628
 10507  00182A  0EC2               	movlw	194
 10508  00182C  184A               	xorwf	_nec_code+1,w,c
 10509  00182E  E108               	bnz	l9628
 10510  001830  284B               	incf	_nec_code+2,w,c
 10511  001832  104C               	iorwf	_nec_code+3,w,c
 10512  001834  A4D8               	btfss	status,2,c
 10513  001836  D004               	goto	l9628
 10514                           
 10515                           ; BSR set to: 0
 10516  001838  0E01               	movlw	1
 10517  00183A  0100               	movlb	0	; () banked
 10518  00183C  6FC4               	movwf	Do_Setup_Time@Key_Done_Flag& (0+255),b
 10519  00183E  D000               	goto	l9628
 10520  001840                     l9628:
 10521                           
 10522                           ; BSR set to: 0
 10523                           ;lab_final_alt.c: 1924: if (Key_Next_Flag == 1 )
 10524  001840  0100               	movlb	0	; () banked
 10525  001842  05C5               	decf	Do_Setup_Time@Key_Next_Flag& (0+255),w,b
 10526  001844  A4D8               	btfss	status,2,c
 10527  001846  D016               	goto	l9642
 10528                           
 10529                           ; BSR set to: 0
 10530                           ;lab_final_alt.c: 1925: {
 10531                           ;lab_final_alt.c: 1926: Key_Next_Flag = 0;
 10532  001848  0E00               	movlw	0
 10533  00184A  0100               	movlb	0	; () banked
 10534  00184C  6FC5               	movwf	Do_Setup_Time@Key_Next_Flag& (0+255),b
 10535                           
 10536                           ; BSR set to: 0
 10537                           ;lab_final_alt.c: 1927: Select_Field++;
 10538  00184E  0100               	movlb	0	; () banked
 10539  001850  2BC7               	incf	Do_Setup_Time@Select_Field& (0+255),f,b
 10540                           
 10541                           ; BSR set to: 0
 10542                           ;lab_final_alt.c: 1928: if (Select_Field == 6) Select_Field = 0;
 10543  001852  0E06               	movlw	6
 10544  001854  0100               	movlb	0	; () banked
 10545  001856  19C7               	xorwf	Do_Setup_Time@Select_Field& (0+255),w,b
 10546  001858  A4D8               	btfss	status,2,c
 10547  00185A  D004               	goto	l9638
 10548                           
 10549                           ; BSR set to: 0
 10550  00185C  0E00               	movlw	0
 10551  00185E  0100               	movlb	0	; () banked
 10552  001860  6FC7               	movwf	Do_Setup_Time@Select_Field& (0+255),b
 10553  001862  D000               	goto	l9638
 10554  001864                     l9638:
 10555                           
 10556                           ; BSR set to: 0
 10557                           ;lab_final_alt.c: 1929: Update_Setup_Screen_Cursor(Select_Field);
 10558  001864  0100               	movlb	0	; () banked
 10559  001866  51C7               	movf	Do_Setup_Time@Select_Field& (0+255),w,b
 10560  001868  ECF8  F011         	call	_Update_Setup_Screen_Cursor
 10561                           
 10562                           ;lab_final_alt.c: 1930: Key_Next_Flag = 0;
 10563  00186C  0E00               	movlw	0
 10564  00186E  0100               	movlb	0	; () banked
 10565  001870  6FC5               	movwf	Do_Setup_Time@Key_Next_Flag& (0+255),b
 10566  001872  D000               	goto	l9642
 10567  001874                     l9642:
 10568                           
 10569                           ; BSR set to: 0
 10570                           ;lab_final_alt.c: 1931: }
 10571                           ;lab_final_alt.c: 1932: if (Key_Up_Flag == 1 )
 10572  001874  0100               	movlb	0	; () banked
 10573  001876  05C1               	decf	Do_Setup_Time@Key_Up_Flag& (0+255),w,b
 10574  001878  B4D8               	btfsc	status,2,c
 10575  00187A  D032               	goto	l9684
 10576  00187C  D04C               	goto	l9690
 10577                           
 10578                           ; BSR set to: 0
 10579                           ;lab_final_alt.c: 1933: {
 10580                           ;lab_final_alt.c: 1934: switch (Select_Field)
 10581  00187E  D030               	goto	l9684
 10582  001880                     l9646:
 10583                           
 10584                           ; BSR set to: 0
 10585                           ;lab_final_alt.c: 1937: setup_hour++;
 10586  001880  2A5F               	incf	_setup_hour,f,c
 10587                           
 10588                           ; BSR set to: 0
 10589                           ;lab_final_alt.c: 1938: if (setup_hour == 24) setup_hour = 0;
 10590  001882  0E18               	movlw	24
 10591  001884  185F               	xorwf	_setup_hour,w,c
 10592  001886  A4D8               	btfss	status,2,c
 10593  001888  D040               	goto	l9686
 10594                           
 10595                           ; BSR set to: 0
 10596  00188A  0E00               	movlw	0
 10597  00188C  6E5F               	movwf	_setup_hour,c
 10598                           
 10599                           ; BSR set to: 0
 10600                           ;lab_final_alt.c: 1939: break;
 10601  00188E  D03D               	goto	l9686
 10602  001890                     l9652:
 10603                           
 10604                           ; BSR set to: 0
 10605                           ;lab_final_alt.c: 1941: setup_minute++;
 10606  001890  2A60               	incf	_setup_minute,f,c
 10607                           
 10608                           ; BSR set to: 0
 10609                           ;lab_final_alt.c: 1942: if (setup_minute == 60) setup_minute = 0;
 10610  001892  0E3C               	movlw	60
 10611  001894  1860               	xorwf	_setup_minute,w,c
 10612  001896  A4D8               	btfss	status,2,c
 10613  001898  D038               	goto	l9686
 10614                           
 10615                           ; BSR set to: 0
 10616  00189A  0E00               	movlw	0
 10617  00189C  6E60               	movwf	_setup_minute,c
 10618                           
 10619                           ; BSR set to: 0
 10620                           ;lab_final_alt.c: 1943: break;
 10621  00189E  D035               	goto	l9686
 10622  0018A0                     l9658:
 10623                           
 10624                           ; BSR set to: 0
 10625                           ;lab_final_alt.c: 1945: setup_second++;
 10626  0018A0  2A62               	incf	_setup_second,f,c
 10627                           
 10628                           ; BSR set to: 0
 10629                           ;lab_final_alt.c: 1946: if (setup_second == 60) setup_second = 0;
 10630  0018A2  0E3C               	movlw	60
 10631  0018A4  1862               	xorwf	_setup_second,w,c
 10632  0018A6  A4D8               	btfss	status,2,c
 10633  0018A8  D030               	goto	l9686
 10634                           
 10635                           ; BSR set to: 0
 10636  0018AA  0E00               	movlw	0
 10637  0018AC  6E62               	movwf	_setup_second,c
 10638                           
 10639                           ; BSR set to: 0
 10640                           ;lab_final_alt.c: 1947: break;
 10641  0018AE  D02D               	goto	l9686
 10642  0018B0                     l9664:
 10643                           
 10644                           ; BSR set to: 0
 10645                           ;lab_final_alt.c: 1949: setup_month++;
 10646  0018B0  2A61               	incf	_setup_month,f,c
 10647                           
 10648                           ; BSR set to: 0
 10649                           ;lab_final_alt.c: 1950: if (setup_month == 13) setup_month = 1;
 10650  0018B2  0E0D               	movlw	13
 10651  0018B4  1861               	xorwf	_setup_month,w,c
 10652  0018B6  A4D8               	btfss	status,2,c
 10653  0018B8  D028               	goto	l9686
 10654                           
 10655                           ; BSR set to: 0
 10656  0018BA  0E01               	movlw	1
 10657  0018BC  6E61               	movwf	_setup_month,c
 10658                           
 10659                           ; BSR set to: 0
 10660                           ;lab_final_alt.c: 1951: break;
 10661  0018BE  D025               	goto	l9686
 10662  0018C0                     l9670:
 10663                           
 10664                           ; BSR set to: 0
 10665                           ;lab_final_alt.c: 1953: setup_day++;
 10666  0018C0  2A5D               	incf	_setup_day,f,c
 10667                           
 10668                           ; BSR set to: 0
 10669                           ;lab_final_alt.c: 1954: if (setup_day == 32) setup_day = 1;
 10670  0018C2  0E20               	movlw	32
 10671  0018C4  185D               	xorwf	_setup_day,w,c
 10672  0018C6  A4D8               	btfss	status,2,c
 10673  0018C8  D020               	goto	l9686
 10674                           
 10675                           ; BSR set to: 0
 10676  0018CA  0E01               	movlw	1
 10677  0018CC  6E5D               	movwf	_setup_day,c
 10678                           
 10679                           ; BSR set to: 0
 10680                           ;lab_final_alt.c: 1955: break;
 10681  0018CE  D01D               	goto	l9686
 10682  0018D0                     l9676:
 10683                           
 10684                           ; BSR set to: 0
 10685                           ;lab_final_alt.c: 1957: setup_year++;
 10686  0018D0  2A63               	incf	_setup_year,f,c
 10687                           
 10688                           ; BSR set to: 0
 10689                           ;lab_final_alt.c: 1958: if (setup_year == 100) setup_year = 0;
 10690  0018D2  0E64               	movlw	100
 10691  0018D4  1863               	xorwf	_setup_year,w,c
 10692  0018D6  A4D8               	btfss	status,2,c
 10693  0018D8  D018               	goto	l9686
 10694                           
 10695                           ; BSR set to: 0
 10696  0018DA  0E00               	movlw	0
 10697  0018DC  6E63               	movwf	_setup_year,c
 10698                           
 10699                           ; BSR set to: 0
 10700                           ;lab_final_alt.c: 1962: }
 10701                           
 10702                           ; BSR set to: 0
 10703                           ;lab_final_alt.c: 1961: break;
 10704                           
 10705                           ;lab_final_alt.c: 1960: default:
 10706                           
 10707                           ; BSR set to: 0
 10708                           ;lab_final_alt.c: 1959: break;
 10709  0018DE  D015               	goto	l9686
 10710  0018E0                     l9684:
 10711                           
 10712                           ; BSR set to: 0
 10713  0018E0  0100               	movlb	0	; () banked
 10714  0018E2  51C7               	movf	Do_Setup_Time@Select_Field& (0+255),w,b
 10715                           
 10716                           ; Switch size 1, requested type "space"
 10717                           ; Number of cases is 6, Range of values is 0 to 5
 10718                           ; switch strategies available:
 10719                           ; Name         Instructions Cycles
 10720                           ; simple_byte           19    10 (average)
 10721                           ;	Chosen strategy is simple_byte
 10722  0018E4  0A00               	xorlw	0	; case 0
 10723  0018E6  B4D8               	btfsc	status,2,c
 10724  0018E8  D7CB               	goto	l9646
 10725  0018EA  0A01               	xorlw	1	; case 1
 10726  0018EC  B4D8               	btfsc	status,2,c
 10727  0018EE  D7D0               	goto	l9652
 10728  0018F0  0A03               	xorlw	3	; case 2
 10729  0018F2  B4D8               	btfsc	status,2,c
 10730  0018F4  D7D5               	goto	l9658
 10731  0018F6  0A01               	xorlw	1	; case 3
 10732  0018F8  B4D8               	btfsc	status,2,c
 10733  0018FA  D7DA               	goto	l9664
 10734  0018FC  0A07               	xorlw	7	; case 4
 10735  0018FE  B4D8               	btfsc	status,2,c
 10736  001900  D7DF               	goto	l9670
 10737  001902  0A01               	xorlw	1	; case 5
 10738  001904  B4D8               	btfsc	status,2,c
 10739  001906  D7E4               	goto	l9676
 10740  001908  D000               	goto	l9686
 10741  00190A                     l9686:
 10742                           
 10743                           ; BSR set to: 0
 10744                           ;lab_final_alt.c: 1963: Update_Setup_Time_Screen();
 10745  00190A  ECAC  F013         	call	_Update_Setup_Time_Screen	;wreg free
 10746                           
 10747                           ;lab_final_alt.c: 1964: Key_Up_Flag = 0;
 10748  00190E  0E00               	movlw	0
 10749  001910  0100               	movlb	0	; () banked
 10750  001912  6FC1               	movwf	Do_Setup_Time@Key_Up_Flag& (0+255),b
 10751  001914  D000               	goto	l9690
 10752  001916                     l9690:
 10753                           
 10754                           ; BSR set to: 0
 10755                           ;lab_final_alt.c: 1965: }
 10756                           ;lab_final_alt.c: 1966: if (Key_Dn_Flag == 1 )
 10757  001916  0100               	movlb	0	; () banked
 10758  001918  05C2               	decf	Do_Setup_Time@Key_Dn_Flag& (0+255),w,b
 10759  00191A  B4D8               	btfsc	status,2,c
 10760  00191C  D032               	goto	l9732
 10761  00191E  D04C               	goto	l9738
 10762                           
 10763                           ; BSR set to: 0
 10764                           ;lab_final_alt.c: 1967: {
 10765                           ;lab_final_alt.c: 1968: switch (Select_Field)
 10766  001920  D030               	goto	l9732
 10767  001922                     l9694:
 10768                           
 10769                           ; BSR set to: 0
 10770                           ;lab_final_alt.c: 1971: if (setup_hour == 0) setup_hour = 23;
 10771  001922  505F               	movf	_setup_hour,w,c
 10772  001924  A4D8               	btfss	status,2,c
 10773  001926  D003               	goto	l9698
 10774                           
 10775                           ; BSR set to: 0
 10776  001928  0E17               	movlw	23
 10777  00192A  6E5F               	movwf	_setup_hour,c
 10778  00192C  D03F               	goto	l9734
 10779  00192E                     l9698:
 10780                           
 10781                           ; BSR set to: 0
 10782                           ;lab_final_alt.c: 1972: else --setup_hour;
 10783  00192E  065F               	decf	_setup_hour,f,c
 10784                           
 10785                           ; BSR set to: 0
 10786                           ;lab_final_alt.c: 1973: break;
 10787  001930  D03D               	goto	l9734
 10788  001932                     l9700:
 10789                           
 10790                           ; BSR set to: 0
 10791                           ;lab_final_alt.c: 1975: if (setup_minute == 0) setup_minute = 59;
 10792  001932  5060               	movf	_setup_minute,w,c
 10793  001934  A4D8               	btfss	status,2,c
 10794  001936  D003               	goto	l9704
 10795                           
 10796                           ; BSR set to: 0
 10797  001938  0E3B               	movlw	59
 10798  00193A  6E60               	movwf	_setup_minute,c
 10799  00193C  D037               	goto	l9734
 10800  00193E                     l9704:
 10801                           
 10802                           ; BSR set to: 0
 10803                           ;lab_final_alt.c: 1976: else --setup_minute;
 10804  00193E  0660               	decf	_setup_minute,f,c
 10805                           
 10806                           ; BSR set to: 0
 10807                           ;lab_final_alt.c: 1977: break;
 10808  001940  D035               	goto	l9734
 10809  001942                     l9706:
 10810                           
 10811                           ; BSR set to: 0
 10812                           ;lab_final_alt.c: 1979: if (setup_second == 0) setup_second = 59;
 10813  001942  5062               	movf	_setup_second,w,c
 10814  001944  A4D8               	btfss	status,2,c
 10815  001946  D003               	goto	l9710
 10816                           
 10817                           ; BSR set to: 0
 10818  001948  0E3B               	movlw	59
 10819  00194A  6E62               	movwf	_setup_second,c
 10820  00194C  D02F               	goto	l9734
 10821  00194E                     l9710:
 10822                           
 10823                           ; BSR set to: 0
 10824                           ;lab_final_alt.c: 1980: else --setup_second;
 10825  00194E  0662               	decf	_setup_second,f,c
 10826                           
 10827                           ; BSR set to: 0
 10828                           ;lab_final_alt.c: 1981: break;
 10829  001950  D02D               	goto	l9734
 10830  001952                     l9712:
 10831                           
 10832                           ; BSR set to: 0
 10833                           ;lab_final_alt.c: 1983: if (setup_month == 01) setup_month = 12;
 10834  001952  0461               	decf	_setup_month,w,c
 10835  001954  A4D8               	btfss	status,2,c
 10836  001956  D003               	goto	l9716
 10837                           
 10838                           ; BSR set to: 0
 10839  001958  0E0C               	movlw	12
 10840  00195A  6E61               	movwf	_setup_month,c
 10841  00195C  D027               	goto	l9734
 10842  00195E                     l9716:
 10843                           
 10844                           ; BSR set to: 0
 10845                           ;lab_final_alt.c: 1984: else --setup_month;
 10846  00195E  0661               	decf	_setup_month,f,c
 10847                           
 10848                           ; BSR set to: 0
 10849                           ;lab_final_alt.c: 1985: break;
 10850  001960  D025               	goto	l9734
 10851  001962                     l9718:
 10852                           
 10853                           ; BSR set to: 0
 10854                           ;lab_final_alt.c: 1987: if (setup_day == 1) setup_day = 31;
 10855  001962  045D               	decf	_setup_day,w,c
 10856  001964  A4D8               	btfss	status,2,c
 10857  001966  D003               	goto	l9722
 10858                           
 10859                           ; BSR set to: 0
 10860  001968  0E1F               	movlw	31
 10861  00196A  6E5D               	movwf	_setup_day,c
 10862  00196C  D01F               	goto	l9734
 10863  00196E                     l9722:
 10864                           
 10865                           ; BSR set to: 0
 10866                           ;lab_final_alt.c: 1988: else --setup_day;
 10867  00196E  065D               	decf	_setup_day,f,c
 10868                           
 10869                           ; BSR set to: 0
 10870                           ;lab_final_alt.c: 1989: break;
 10871  001970  D01D               	goto	l9734
 10872  001972                     l9724:
 10873                           
 10874                           ; BSR set to: 0
 10875                           ;lab_final_alt.c: 1991: if (setup_year == 0) setup_year = 99;
 10876  001972  5063               	movf	_setup_year,w,c
 10877  001974  A4D8               	btfss	status,2,c
 10878  001976  D003               	goto	l9728
 10879                           
 10880                           ; BSR set to: 0
 10881  001978  0E63               	movlw	99
 10882  00197A  6E63               	movwf	_setup_year,c
 10883  00197C  D017               	goto	l9734
 10884  00197E                     l9728:
 10885                           
 10886                           ; BSR set to: 0
 10887                           ;lab_final_alt.c: 1992: else --setup_year;
 10888  00197E  0663               	decf	_setup_year,f,c
 10889                           
 10890                           ; BSR set to: 0
 10891                           ;lab_final_alt.c: 1996: }
 10892                           
 10893                           ; BSR set to: 0
 10894                           ;lab_final_alt.c: 1995: break;
 10895                           
 10896                           ;lab_final_alt.c: 1994: default:
 10897                           
 10898                           ; BSR set to: 0
 10899                           ;lab_final_alt.c: 1993: break;
 10900  001980  D015               	goto	l9734
 10901  001982                     l9732:
 10902                           
 10903                           ; BSR set to: 0
 10904  001982  0100               	movlb	0	; () banked
 10905  001984  51C7               	movf	Do_Setup_Time@Select_Field& (0+255),w,b
 10906                           
 10907                           ; Switch size 1, requested type "space"
 10908                           ; Number of cases is 6, Range of values is 0 to 5
 10909                           ; switch strategies available:
 10910                           ; Name         Instructions Cycles
 10911                           ; simple_byte           19    10 (average)
 10912                           ;	Chosen strategy is simple_byte
 10913  001986  0A00               	xorlw	0	; case 0
 10914  001988  B4D8               	btfsc	status,2,c
 10915  00198A  D7CB               	goto	l9694
 10916  00198C  0A01               	xorlw	1	; case 1
 10917  00198E  B4D8               	btfsc	status,2,c
 10918  001990  D7D0               	goto	l9700
 10919  001992  0A03               	xorlw	3	; case 2
 10920  001994  B4D8               	btfsc	status,2,c
 10921  001996  D7D5               	goto	l9706
 10922  001998  0A01               	xorlw	1	; case 3
 10923  00199A  B4D8               	btfsc	status,2,c
 10924  00199C  D7DA               	goto	l9712
 10925  00199E  0A07               	xorlw	7	; case 4
 10926  0019A0  B4D8               	btfsc	status,2,c
 10927  0019A2  D7DF               	goto	l9718
 10928  0019A4  0A01               	xorlw	1	; case 5
 10929  0019A6  B4D8               	btfsc	status,2,c
 10930  0019A8  D7E4               	goto	l9724
 10931  0019AA  D000               	goto	l9734
 10932  0019AC                     l9734:
 10933                           
 10934                           ; BSR set to: 0
 10935                           ;lab_final_alt.c: 1998: Update_Setup_Time_Screen();
 10936  0019AC  ECAC  F013         	call	_Update_Setup_Time_Screen	;wreg free
 10937                           
 10938                           ;lab_final_alt.c: 1999: Key_Dn_Flag = 0;
 10939  0019B0  0E00               	movlw	0
 10940  0019B2  0100               	movlb	0	; () banked
 10941  0019B4  6FC2               	movwf	Do_Setup_Time@Key_Dn_Flag& (0+255),b
 10942  0019B6  D000               	goto	l9738
 10943  0019B8                     l9738:
 10944                           
 10945                           ; BSR set to: 0
 10946                           ;lab_final_alt.c: 2000: }
 10947                           ;lab_final_alt.c: 2001: if (Key_Done_Flag == 1 )
 10948  0019B8  0100               	movlb	0	; () banked
 10949  0019BA  05C4               	decf	Do_Setup_Time@Key_Done_Flag& (0+255),w,b
 10950  0019BC  A4D8               	btfss	status,2,c
 10951  0019BE  D035               	goto	l9758
 10952                           
 10953                           ; BSR set to: 0
 10954                           ;lab_final_alt.c: 2002: {
 10955                           ;lab_final_alt.c: 2003: second = dec_2_bcd(setup_second);
 10956  0019C0  5062               	movf	_setup_second,w,c
 10957  0019C2  ECB3  F021         	call	_dec_2_bcd
 10958  0019C6  502A               	movf	?_dec_2_bcd,w,c
 10959  0019C8  0100               	movlb	0	; () banked
 10960  0019CA  6FF6               	movwf	_second& (0+255),b
 10961                           
 10962                           ;lab_final_alt.c: 2004: minute = dec_2_bcd(setup_minute);
 10963  0019CC  5060               	movf	_setup_minute,w,c
 10964  0019CE  ECB3  F021         	call	_dec_2_bcd
 10965  0019D2  502A               	movf	?_dec_2_bcd,w,c
 10966  0019D4  0100               	movlb	0	; () banked
 10967  0019D6  6FF2               	movwf	_minute& (0+255),b
 10968                           
 10969                           ;lab_final_alt.c: 2005: hour = dec_2_bcd(setup_hour);
 10970  0019D8  505F               	movf	_setup_hour,w,c
 10971  0019DA  ECB3  F021         	call	_dec_2_bcd
 10972  0019DE  502A               	movf	?_dec_2_bcd,w,c
 10973  0019E0  0100               	movlb	0	; () banked
 10974  0019E2  6FF1               	movwf	_hour& (0+255),b
 10975                           
 10976                           ; BSR set to: 0
 10977                           ;lab_final_alt.c: 2006: dow = 0;
 10978  0019E4  0E00               	movlw	0
 10979  0019E6  6E57               	movwf	_dow,c
 10980                           
 10981                           ; BSR set to: 0
 10982                           ;lab_final_alt.c: 2007: day = dec_2_bcd(setup_day);
 10983  0019E8  505D               	movf	_setup_day,w,c
 10984  0019EA  ECB3  F021         	call	_dec_2_bcd
 10985  0019EE  502A               	movf	?_dec_2_bcd,w,c
 10986  0019F0  0100               	movlb	0	; () banked
 10987  0019F2  6FEF               	movwf	_day& (0+255),b
 10988                           
 10989                           ; BSR set to: 0
 10990                           ;lab_final_alt.c: 2008: month = dec_2_bcd(setup_month);
 10991  0019F4  5061               	movf	_setup_month,w,c
 10992  0019F6  ECB3  F021         	call	_dec_2_bcd
 10993  0019FA  502A               	movf	?_dec_2_bcd,w,c
 10994  0019FC  0100               	movlb	0	; () banked
 10995  0019FE  6FF3               	movwf	_month& (0+255),b
 10996                           
 10997                           ; BSR set to: 0
 10998                           ;lab_final_alt.c: 2009: year = dec_2_bcd(setup_year);
 10999  001A00  5063               	movf	_setup_year,w,c
 11000  001A02  ECB3  F021         	call	_dec_2_bcd
 11001  001A06  502A               	movf	?_dec_2_bcd,w,c
 11002  001A08  0100               	movlb	0	; () banked
 11003  001A0A  6FF8               	movwf	_year& (0+255),b
 11004                           
 11005                           ;lab_final_alt.c: 2010: Key_Done_Flag = 0;
 11006  001A0C  0E00               	movlw	0
 11007  001A0E  0100               	movlb	0	; () banked
 11008  001A10  6FC4               	movwf	Do_Setup_Time@Key_Done_Flag& (0+255),b
 11009                           
 11010                           ; BSR set to: 0
 11011                           ;lab_final_alt.c: 2011: DS3231_Write_Time(0x68);
 11012  001A12  0E68               	movlw	104
 11013  001A14  EC87  F021         	call	_DS3231_Write_Time
 11014                           
 11015                           ;lab_final_alt.c: 2012: DS3231_Read_Time(0x68);
 11016  001A18  0E68               	movlw	104
 11017  001A1A  EC09  F020         	call	_DS3231_Read_Time
 11018                           
 11019                           ;lab_final_alt.c: 2013: Initialize_Main_Screen();
 11020  001A1E  ECFB  F009         	call	_Initialize_Main_Screen	;wreg free
 11021                           
 11022                           ;lab_final_alt.c: 2014: Setup_Mode = 0;
 11023  001A22  0E00               	movlw	0
 11024  001A24  0100               	movlb	0	; () banked
 11025  001A26  6FC6               	movwf	Do_Setup_Time@Setup_Mode& (0+255),b
 11026  001A28  D000               	goto	l9758
 11027  001A2A                     l9758:
 11028                           
 11029                           ; BSR set to: 0
 11030                           ;lab_final_alt.c: 2015: }
 11031                           ;lab_final_alt.c: 2017: if (Key_Abort_Flag == 1 )
 11032  001A2A  0100               	movlb	0	; () banked
 11033  001A2C  05C3               	decf	Do_Setup_Time@Key_Abort_Flag& (0+255),w,b
 11034  001A2E  A4D8               	btfss	status,2,c
 11035  001A30  D00C               	goto	l9768
 11036                           
 11037                           ; BSR set to: 0
 11038                           ;lab_final_alt.c: 2018: {
 11039                           ;lab_final_alt.c: 2019: Key_Abort_Flag = 0;
 11040  001A32  0E00               	movlw	0
 11041  001A34  0100               	movlb	0	; () banked
 11042  001A36  6FC3               	movwf	Do_Setup_Time@Key_Abort_Flag& (0+255),b
 11043                           
 11044                           ; BSR set to: 0
 11045                           ;lab_final_alt.c: 2020: DS3231_Read_Time(0x68);
 11046  001A38  0E68               	movlw	104
 11047  001A3A  EC09  F020         	call	_DS3231_Read_Time
 11048                           
 11049                           ;lab_final_alt.c: 2021: Initialize_Main_Screen();
 11050  001A3E  ECFB  F009         	call	_Initialize_Main_Screen	;wreg free
 11051                           
 11052                           ;lab_final_alt.c: 2022: Setup_Mode = 0;
 11053  001A42  0E00               	movlw	0
 11054  001A44  0100               	movlb	0	; () banked
 11055  001A46  6FC6               	movwf	Do_Setup_Time@Setup_Mode& (0+255),b
 11056                           
 11057                           ; BSR set to: 0
 11058                           
 11059                           ; BSR set to: 0
 11060  001A48  D000               	goto	l9768
 11061  001A4A                     l9768:
 11062  001A4A  0100               	movlb	0	; () banked
 11063  001A4C  05C6               	decf	Do_Setup_Time@Setup_Mode& (0+255),w,b
 11064  001A4E  B4D8               	btfsc	status,2,c
 11065  001A50  D6A8               	goto	l9602
 11066                           
 11067                           ; BSR set to: 0
 11068                           
 11069                           ; BSR set to: 0
 11070  001A52  0012               	return		;funcret
 11071  001A54                     __end_of_Do_Setup_Time:
 11072                           	opt stack 0
 11073                           tblptru	equ	0xFF8
 11074                           tblptrh	equ	0xFF7
 11075                           tblptrl	equ	0xFF6
 11076                           tablat	equ	0xFF5
 11077                           prodh	equ	0xFF4
 11078                           prodl	equ	0xFF3
 11079                           intcon	equ	0xFF2
 11080                           intcon2	equ	0xFF1
 11081                           intcon3	equ	0xFF0
 11082                           postinc0	equ	0xFEE
 11083                           wreg	equ	0xFE8
 11084                           postdec1	equ	0xFE5
 11085                           fsr1l	equ	0xFE1
 11086                           postinc2	equ	0xFDE
 11087                           postdec2	equ	0xFDD
 11088                           fsr2h	equ	0xFDA
 11089                           fsr2l	equ	0xFD9
 11090                           status	equ	0xFD8
 11091                           
 11092 ;; *************** function _Update_Setup_Time_Screen *****************
 11093 ;; Defined at:
 11094 ;;		line 1841 in file "lab_final_alt.c"
 11095 ;; Parameters:    Size  Location     Type
 11096 ;;		None
 11097 ;; Auto vars:     Size  Location     Type
 11098 ;;		None
 11099 ;; Return value:  Size  Location     Type
 11100 ;;		None               void
 11101 ;; Registers used:
 11102 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11103 ;; Tracked objects:
 11104 ;;		On entry : 0/0
 11105 ;;		On exit  : 0/0
 11106 ;;		Unchanged: 0/0
 11107 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11108 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11109 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11110 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11111 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11112 ;;Total ram usage:        0 bytes
 11113 ;; Hardware stack levels used:    1
 11114 ;; Hardware stack levels required when called:   12
 11115 ;; This function calls:
 11116 ;;		___awdiv
 11117 ;;		___awmod
 11118 ;;		_drawtext
 11119 ;; This function is called by:
 11120 ;;		_Do_Setup_Time
 11121 ;; This function uses a non-reentrant model
 11122 ;;
 11123                           
 11124                           	psect	text34
 11125  002758                     __ptext34:
 11126                           	opt stack 0
 11127  002758                     _Update_Setup_Time_Screen:
 11128                           	opt stack 17
 11129                           
 11130                           ;lab_final_alt.c: 1843: setup_time[0] = (setup_hour/10) + '0';
 11131                           
 11132                           ; BSR set to: 0
 11133                           ;incstack = 0
 11134  002758  C05F  F022         	movff	_setup_hour,___awdiv@dividend
 11135  00275C  6A23               	clrf	___awdiv@dividend+1,c
 11136  00275E  0E00               	movlw	0
 11137  002760  6E25               	movwf	___awdiv@divisor+1,c
 11138  002762  0E0A               	movlw	10
 11139  002764  6E24               	movwf	___awdiv@divisor,c
 11140  002766  EC92  F01D         	call	___awdiv	;wreg free
 11141  00276A  5022               	movf	?___awdiv,w,c
 11142  00276C  0F30               	addlw	48
 11143  00276E  0100               	movlb	0	; () banked
 11144  002770  6F89               	movwf	_setup_time& (0+255),b
 11145                           
 11146                           ;lab_final_alt.c: 1844: setup_time[1] = (setup_hour%10) + '0';
 11147  002772  C05F  F01C         	movff	_setup_hour,___awmod@dividend
 11148  002776  6A1D               	clrf	___awmod@dividend+1,c
 11149  002778  0E00               	movlw	0
 11150  00277A  6E1F               	movwf	___awmod@divisor+1,c
 11151  00277C  0E0A               	movlw	10
 11152  00277E  6E1E               	movwf	___awmod@divisor,c
 11153  002780  ECC8  F01F         	call	___awmod	;wreg free
 11154  002784  501C               	movf	?___awmod,w,c
 11155  002786  0F30               	addlw	48
 11156  002788  0100               	movlb	0	; () banked
 11157  00278A  6F8A               	movwf	(_setup_time+1)& (0+255),b
 11158                           
 11159                           ;lab_final_alt.c: 1845: setup_time[3] = (setup_minute/10) + '0';
 11160  00278C  C060  F022         	movff	_setup_minute,___awdiv@dividend
 11161  002790  6A23               	clrf	___awdiv@dividend+1,c
 11162  002792  0E00               	movlw	0
 11163  002794  6E25               	movwf	___awdiv@divisor+1,c
 11164  002796  0E0A               	movlw	10
 11165  002798  6E24               	movwf	___awdiv@divisor,c
 11166  00279A  EC92  F01D         	call	___awdiv	;wreg free
 11167  00279E  5022               	movf	?___awdiv,w,c
 11168  0027A0  0F30               	addlw	48
 11169  0027A2  0100               	movlb	0	; () banked
 11170  0027A4  6F8C               	movwf	(_setup_time+3)& (0+255),b
 11171                           
 11172                           ;lab_final_alt.c: 1846: setup_time[4] = (setup_minute %10)+ '0';
 11173  0027A6  C060  F01C         	movff	_setup_minute,___awmod@dividend
 11174  0027AA  6A1D               	clrf	___awmod@dividend+1,c
 11175  0027AC  0E00               	movlw	0
 11176  0027AE  6E1F               	movwf	___awmod@divisor+1,c
 11177  0027B0  0E0A               	movlw	10
 11178  0027B2  6E1E               	movwf	___awmod@divisor,c
 11179  0027B4  ECC8  F01F         	call	___awmod	;wreg free
 11180  0027B8  501C               	movf	?___awmod,w,c
 11181  0027BA  0F30               	addlw	48
 11182  0027BC  0100               	movlb	0	; () banked
 11183  0027BE  6F8D               	movwf	(_setup_time+4)& (0+255),b
 11184                           
 11185                           ;lab_final_alt.c: 1847: setup_time[6] = (setup_second/10) + '0';
 11186  0027C0  C062  F022         	movff	_setup_second,___awdiv@dividend
 11187  0027C4  6A23               	clrf	___awdiv@dividend+1,c
 11188  0027C6  0E00               	movlw	0
 11189  0027C8  6E25               	movwf	___awdiv@divisor+1,c
 11190  0027CA  0E0A               	movlw	10
 11191  0027CC  6E24               	movwf	___awdiv@divisor,c
 11192  0027CE  EC92  F01D         	call	___awdiv	;wreg free
 11193  0027D2  5022               	movf	?___awdiv,w,c
 11194  0027D4  0F30               	addlw	48
 11195  0027D6  0100               	movlb	0	; () banked
 11196  0027D8  6F8F               	movwf	(_setup_time+6)& (0+255),b
 11197                           
 11198                           ;lab_final_alt.c: 1848: setup_time[7] = (setup_second %10)+ '0';
 11199  0027DA  C062  F01C         	movff	_setup_second,___awmod@dividend
 11200  0027DE  6A1D               	clrf	___awmod@dividend+1,c
 11201  0027E0  0E00               	movlw	0
 11202  0027E2  6E1F               	movwf	___awmod@divisor+1,c
 11203  0027E4  0E0A               	movlw	10
 11204  0027E6  6E1E               	movwf	___awmod@divisor,c
 11205  0027E8  ECC8  F01F         	call	___awmod	;wreg free
 11206  0027EC  501C               	movf	?___awmod,w,c
 11207  0027EE  0F30               	addlw	48
 11208  0027F0  0100               	movlb	0	; () banked
 11209  0027F2  6F90               	movwf	(_setup_time+7)& (0+255),b
 11210                           
 11211                           ;lab_final_alt.c: 1849: setup_date[0] = (setup_month/10) + '0';
 11212  0027F4  C061  F022         	movff	_setup_month,___awdiv@dividend
 11213  0027F8  6A23               	clrf	___awdiv@dividend+1,c
 11214  0027FA  0E00               	movlw	0
 11215  0027FC  6E25               	movwf	___awdiv@divisor+1,c
 11216  0027FE  0E0A               	movlw	10
 11217  002800  6E24               	movwf	___awdiv@divisor,c
 11218  002802  EC92  F01D         	call	___awdiv	;wreg free
 11219  002806  5022               	movf	?___awdiv,w,c
 11220  002808  0F30               	addlw	48
 11221  00280A  0101               	movlb	1	; () banked
 11222  00280C  6F28               	movwf	_setup_date& (0+255),b
 11223                           
 11224                           ;lab_final_alt.c: 1850: setup_date[1] = (setup_month %10)+ '0';
 11225  00280E  C061  F01C         	movff	_setup_month,___awmod@dividend
 11226  002812  6A1D               	clrf	___awmod@dividend+1,c
 11227  002814  0E00               	movlw	0
 11228  002816  6E1F               	movwf	___awmod@divisor+1,c
 11229  002818  0E0A               	movlw	10
 11230  00281A  6E1E               	movwf	___awmod@divisor,c
 11231  00281C  ECC8  F01F         	call	___awmod	;wreg free
 11232  002820  501C               	movf	?___awmod,w,c
 11233  002822  0F30               	addlw	48
 11234  002824  0101               	movlb	1	; () banked
 11235  002826  6F29               	movwf	(_setup_date+1)& (0+255),b
 11236                           
 11237                           ;lab_final_alt.c: 1851: setup_date[3] = (setup_day/10) + '0';
 11238  002828  C05D  F022         	movff	_setup_day,___awdiv@dividend
 11239  00282C  6A23               	clrf	___awdiv@dividend+1,c
 11240  00282E  0E00               	movlw	0
 11241  002830  6E25               	movwf	___awdiv@divisor+1,c
 11242  002832  0E0A               	movlw	10
 11243  002834  6E24               	movwf	___awdiv@divisor,c
 11244  002836  EC92  F01D         	call	___awdiv	;wreg free
 11245  00283A  5022               	movf	?___awdiv,w,c
 11246  00283C  0F30               	addlw	48
 11247  00283E  0101               	movlb	1	; () banked
 11248  002840  6F2B               	movwf	(_setup_date+3)& (0+255),b
 11249                           
 11250                           ;lab_final_alt.c: 1852: setup_date[4] = (setup_day %10)+ '0';
 11251  002842  C05D  F01C         	movff	_setup_day,___awmod@dividend
 11252  002846  6A1D               	clrf	___awmod@dividend+1,c
 11253  002848  0E00               	movlw	0
 11254  00284A  6E1F               	movwf	___awmod@divisor+1,c
 11255  00284C  0E0A               	movlw	10
 11256  00284E  6E1E               	movwf	___awmod@divisor,c
 11257  002850  ECC8  F01F         	call	___awmod	;wreg free
 11258  002854  501C               	movf	?___awmod,w,c
 11259  002856  0F30               	addlw	48
 11260  002858  0101               	movlb	1	; () banked
 11261  00285A  6F2C               	movwf	(_setup_date+4)& (0+255),b
 11262                           
 11263                           ;lab_final_alt.c: 1853: setup_date[6] = (setup_year/10) + '0';
 11264  00285C  C063  F022         	movff	_setup_year,___awdiv@dividend
 11265  002860  6A23               	clrf	___awdiv@dividend+1,c
 11266  002862  0E00               	movlw	0
 11267  002864  6E25               	movwf	___awdiv@divisor+1,c
 11268  002866  0E0A               	movlw	10
 11269  002868  6E24               	movwf	___awdiv@divisor,c
 11270  00286A  EC92  F01D         	call	___awdiv	;wreg free
 11271  00286E  5022               	movf	?___awdiv,w,c
 11272  002870  0F30               	addlw	48
 11273  002872  0101               	movlb	1	; () banked
 11274  002874  6F2E               	movwf	(_setup_date+6)& (0+255),b
 11275                           
 11276                           ;lab_final_alt.c: 1854: setup_date[7] = (setup_year %10)+ '0';
 11277  002876  C063  F01C         	movff	_setup_year,___awmod@dividend
 11278  00287A  6A1D               	clrf	___awmod@dividend+1,c
 11279  00287C  0E00               	movlw	0
 11280  00287E  6E1F               	movwf	___awmod@divisor+1,c
 11281  002880  0E0A               	movlw	10
 11282  002882  6E1E               	movwf	___awmod@divisor,c
 11283  002884  ECC8  F01F         	call	___awmod	;wreg free
 11284  002888  501C               	movf	?___awmod,w,c
 11285  00288A  0F30               	addlw	48
 11286  00288C  0101               	movlb	1	; () banked
 11287  00288E  6F2F               	movwf	(_setup_date+7)& (0+255),b
 11288                           
 11289                           ; BSR set to: 1
 11290                           ;lab_final_alt.c: 1855: drawtext(15, 56, setup_time, 0x07FF, 0x0000, 2);
 11291  002890  0E38               	movlw	56
 11292  002892  0100               	movlb	0	; () banked
 11293  002894  6FB2               	movwf	drawtext@y& (0+255),b
 11294  002896  0E89               	movlw	low _setup_time
 11295  002898  0100               	movlb	0	; () banked
 11296  00289A  6FB3               	movwf	drawtext@_text& (0+255),b
 11297  00289C  0E00               	movlw	high _setup_time
 11298  00289E  0100               	movlb	0	; () banked
 11299  0028A0  6FB4               	movwf	(drawtext@_text+1)& (0+255),b
 11300  0028A2  0E07               	movlw	7
 11301  0028A4  0100               	movlb	0	; () banked
 11302  0028A6  6FB6               	movwf	(drawtext@color+1)& (0+255),b
 11303  0028A8  69B5               	setf	drawtext@color& (0+255),b
 11304  0028AA  0E00               	movlw	0
 11305  0028AC  0100               	movlb	0	; () banked
 11306  0028AE  6FB8               	movwf	(drawtext@bg+1)& (0+255),b
 11307  0028B0  0E00               	movlw	0
 11308  0028B2  6FB7               	movwf	drawtext@bg& (0+255),b
 11309  0028B4  0E02               	movlw	2
 11310  0028B6  0100               	movlb	0	; () banked
 11311  0028B8  6FB9               	movwf	drawtext@size& (0+255),b
 11312  0028BA  0E0F               	movlw	15
 11313  0028BC  ECC8  F017         	call	_drawtext
 11314                           
 11315                           ;lab_final_alt.c: 1856: drawtext(15, 86, setup_date, 0x07E0, 0x0000, 2);
 11316  0028C0  0E56               	movlw	86
 11317  0028C2  0100               	movlb	0	; () banked
 11318  0028C4  6FB2               	movwf	drawtext@y& (0+255),b
 11319  0028C6  0E28               	movlw	low _setup_date
 11320  0028C8  0100               	movlb	0	; () banked
 11321  0028CA  6FB3               	movwf	drawtext@_text& (0+255),b
 11322  0028CC  0E01               	movlw	high _setup_date
 11323  0028CE  0100               	movlb	0	; () banked
 11324  0028D0  6FB4               	movwf	(drawtext@_text+1)& (0+255),b
 11325  0028D2  0E07               	movlw	7
 11326  0028D4  0100               	movlb	0	; () banked
 11327  0028D6  6FB6               	movwf	(drawtext@color+1)& (0+255),b
 11328  0028D8  0EE0               	movlw	224
 11329  0028DA  6FB5               	movwf	drawtext@color& (0+255),b
 11330  0028DC  0E00               	movlw	0
 11331  0028DE  0100               	movlb	0	; () banked
 11332  0028E0  6FB8               	movwf	(drawtext@bg+1)& (0+255),b
 11333  0028E2  0E00               	movlw	0
 11334  0028E4  6FB7               	movwf	drawtext@bg& (0+255),b
 11335  0028E6  0E02               	movlw	2
 11336  0028E8  0100               	movlb	0	; () banked
 11337  0028EA  6FB9               	movwf	drawtext@size& (0+255),b
 11338  0028EC  0E0F               	movlw	15
 11339  0028EE  ECC8  F017         	call	_drawtext
 11340  0028F2  0012               	return		;funcret
 11341  0028F4                     __end_of_Update_Setup_Time_Screen:
 11342                           	opt stack 0
 11343                           tblptru	equ	0xFF8
 11344                           tblptrh	equ	0xFF7
 11345                           tblptrl	equ	0xFF6
 11346                           tablat	equ	0xFF5
 11347                           prodh	equ	0xFF4
 11348                           prodl	equ	0xFF3
 11349                           intcon	equ	0xFF2
 11350                           intcon2	equ	0xFF1
 11351                           intcon3	equ	0xFF0
 11352                           postinc0	equ	0xFEE
 11353                           wreg	equ	0xFE8
 11354                           postdec1	equ	0xFE5
 11355                           fsr1l	equ	0xFE1
 11356                           postinc2	equ	0xFDE
 11357                           postdec2	equ	0xFDD
 11358                           fsr2h	equ	0xFDA
 11359                           fsr2l	equ	0xFD9
 11360                           status	equ	0xFD8
 11361                           
 11362 ;; *************** function _Initialize_Setup_Time_Screen *****************
 11363 ;; Defined at:
 11364 ;;		line 1824 in file "lab_final_alt.c"
 11365 ;; Parameters:    Size  Location     Type
 11366 ;;		None
 11367 ;; Auto vars:     Size  Location     Type
 11368 ;;		None
 11369 ;; Return value:  Size  Location     Type
 11370 ;;		None               void
 11371 ;; Registers used:
 11372 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11373 ;; Tracked objects:
 11374 ;;		On entry : 0/0
 11375 ;;		On exit  : 0/0
 11376 ;;		Unchanged: 0/0
 11377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11378 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11379 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11380 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11381 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11382 ;;Total ram usage:        0 bytes
 11383 ;; Hardware stack levels used:    1
 11384 ;; Hardware stack levels required when called:   12
 11385 ;; This function calls:
 11386 ;;		_drawtext
 11387 ;;		_fillRect
 11388 ;;		_fillScreen
 11389 ;;		_strcpy
 11390 ;; This function is called by:
 11391 ;;		_Do_Setup_Time
 11392 ;; This function uses a non-reentrant model
 11393 ;;
 11394                           
 11395                           	psect	text35
 11396  002E64                     __ptext35:
 11397                           	opt stack 0
 11398  002E64                     _Initialize_Setup_Time_Screen:
 11399                           	opt stack 17
 11400                           
 11401                           ;lab_final_alt.c: 1826: fillScreen(0x0000);
 11402                           
 11403                           ;incstack = 0
 11404  002E64  0E00               	movlw	0
 11405  002E66  6E30               	movwf	fillScreen@color+1,c
 11406  002E68  0E00               	movlw	0
 11407  002E6A  6E2F               	movwf	fillScreen@color,c
 11408  002E6C  EC7C  F025         	call	_fillScreen	;wreg free
 11409                           
 11410                           ;lab_final_alt.c: 1828: strcpy(txt, " ECE3301L Spring 2019\0");
 11411  002E70  C04F  F01C         	movff	_txt,strcpy@to
 11412  002E74  C050  F01D         	movff	_txt+1,strcpy@to+1
 11413  002E78  0E57               	movlw	low STR_4
 11414  002E7A  6E1E               	movwf	strcpy@from,c
 11415  002E7C  0EFF               	movlw	high STR_4
 11416  002E7E  6E1F               	movwf	strcpy@from+1,c
 11417  002E80  EC33  F024         	call	_strcpy	;wreg free
 11418                           
 11419                           ;lab_final_alt.c: 1829: drawtext(1 , 2, txt, 0xFFFF , 0x0000, 1);
 11420  002E84  0E02               	movlw	2
 11421  002E86  0100               	movlb	0	; () banked
 11422  002E88  6FB2               	movwf	drawtext@y& (0+255),b
 11423  002E8A  C04F  F0B3         	movff	_txt,drawtext@_text
 11424  002E8E  C050  F0B4         	movff	_txt+1,drawtext@_text+1
 11425  002E92  0EFF               	movlw	255
 11426  002E94  0100               	movlb	0	; () banked
 11427  002E96  6FB6               	movwf	(drawtext@color+1)& (0+255),b
 11428  002E98  69B5               	setf	drawtext@color& (0+255),b
 11429  002E9A  0E00               	movlw	0
 11430  002E9C  0100               	movlb	0	; () banked
 11431  002E9E  6FB8               	movwf	(drawtext@bg+1)& (0+255),b
 11432  002EA0  0E00               	movlw	0
 11433  002EA2  6FB7               	movwf	drawtext@bg& (0+255),b
 11434  002EA4  0E01               	movlw	1
 11435  002EA6  0100               	movlb	0	; () banked
 11436  002EA8  6FB9               	movwf	drawtext@size& (0+255),b
 11437  002EAA  0E01               	movlw	1
 11438  002EAC  ECC8  F017         	call	_drawtext
 11439                           
 11440                           ;lab_final_alt.c: 1831: strcpy(txt, "Time Setup\0");
 11441  002EB0  C04F  F01C         	movff	_txt,strcpy@to
 11442  002EB4  C050  F01D         	movff	_txt+1,strcpy@to+1
 11443  002EB8  0EAF               	movlw	low STR_20
 11444  002EBA  6E1E               	movwf	strcpy@from,c
 11445  002EBC  0EFF               	movlw	high STR_20
 11446  002EBE  6E1F               	movwf	strcpy@from+1,c
 11447  002EC0  EC33  F024         	call	_strcpy	;wreg free
 11448                           
 11449                           ;lab_final_alt.c: 1832: drawtext(1+3 , 2+15, txt, 0xF81F, 0x0000, 2);
 11450  002EC4  0E11               	movlw	17
 11451  002EC6  0100               	movlb	0	; () banked
 11452  002EC8  6FB2               	movwf	drawtext@y& (0+255),b
 11453  002ECA  C04F  F0B3         	movff	_txt,drawtext@_text
 11454  002ECE  C050  F0B4         	movff	_txt+1,drawtext@_text+1
 11455  002ED2  0EF8               	movlw	248
 11456  002ED4  0100               	movlb	0	; () banked
 11457  002ED6  6FB6               	movwf	(drawtext@color+1)& (0+255),b
 11458  002ED8  0E1F               	movlw	31
 11459  002EDA  6FB5               	movwf	drawtext@color& (0+255),b
 11460  002EDC  0E00               	movlw	0
 11461  002EDE  0100               	movlb	0	; () banked
 11462  002EE0  6FB8               	movwf	(drawtext@bg+1)& (0+255),b
 11463  002EE2  0E00               	movlw	0
 11464  002EE4  6FB7               	movwf	drawtext@bg& (0+255),b
 11465  002EE6  0E02               	movlw	2
 11466  002EE8  0100               	movlb	0	; () banked
 11467  002EEA  6FB9               	movwf	drawtext@size& (0+255),b
 11468  002EEC  0E04               	movlw	4
 11469  002EEE  ECC8  F017         	call	_drawtext
 11470                           
 11471                           ;lab_final_alt.c: 1834: strcpy(txt, "Time");
 11472  002EF2  C04F  F01C         	movff	_txt,strcpy@to
 11473  002EF6  C050  F01D         	movff	_txt+1,strcpy@to+1
 11474  002EFA  0EE6               	movlw	low STR_8
 11475  002EFC  6E1E               	movwf	strcpy@from,c
 11476  002EFE  0EFF               	movlw	high STR_8
 11477  002F00  6E1F               	movwf	strcpy@from+1,c
 11478  002F02  EC33  F024         	call	_strcpy	;wreg free
 11479                           
 11480                           ;lab_final_alt.c: 1835: drawtext(50 , 46 , txt, 0x001F , 0x0000, 1);
 11481  002F06  0E2E               	movlw	46
 11482  002F08  0100               	movlb	0	; () banked
 11483  002F0A  6FB2               	movwf	drawtext@y& (0+255),b
 11484  002F0C  C04F  F0B3         	movff	_txt,drawtext@_text
 11485  002F10  C050  F0B4         	movff	_txt+1,drawtext@_text+1
 11486  002F14  0E00               	movlw	0
 11487  002F16  0100               	movlb	0	; () banked
 11488  002F18  6FB6               	movwf	(drawtext@color+1)& (0+255),b
 11489  002F1A  0E1F               	movlw	31
 11490  002F1C  6FB5               	movwf	drawtext@color& (0+255),b
 11491  002F1E  0E00               	movlw	0
 11492  002F20  0100               	movlb	0	; () banked
 11493  002F22  6FB8               	movwf	(drawtext@bg+1)& (0+255),b
 11494  002F24  0E00               	movlw	0
 11495  002F26  6FB7               	movwf	drawtext@bg& (0+255),b
 11496  002F28  0E01               	movlw	1
 11497  002F2A  0100               	movlb	0	; () banked
 11498  002F2C  6FB9               	movwf	drawtext@size& (0+255),b
 11499  002F2E  0E32               	movlw	50
 11500  002F30  ECC8  F017         	call	_drawtext
 11501                           
 11502                           ;lab_final_alt.c: 1837: fillRect(15-1, 56+16, 25,2,0x07FF);
 11503  002F34  0E48               	movlw	72
 11504  002F36  6E2E               	movwf	fillRect@y,c
 11505  002F38  0E19               	movlw	25
 11506  002F3A  6E2F               	movwf	fillRect@w,c
 11507  002F3C  0E02               	movlw	2
 11508  002F3E  6E30               	movwf	fillRect@h,c
 11509  002F40  0E07               	movlw	7
 11510  002F42  6E32               	movwf	fillRect@color+1,c
 11511  002F44  6831               	setf	fillRect@color,c
 11512  002F46  0E0E               	movlw	14
 11513  002F48  ECA6  F022         	call	_fillRect
 11514                           
 11515                           ;lab_final_alt.c: 1838: strcpy(txt, "Date");
 11516  002F4C  C04F  F01C         	movff	_txt,strcpy@to
 11517  002F50  C050  F01D         	movff	_txt+1,strcpy@to+1
 11518  002F54  0EEB               	movlw	low STR_9
 11519  002F56  6E1E               	movwf	strcpy@from,c
 11520  002F58  0EFF               	movlw	high STR_9
 11521  002F5A  6E1F               	movwf	strcpy@from+1,c
 11522  002F5C  EC33  F024         	call	_strcpy	;wreg free
 11523                           
 11524                           ;lab_final_alt.c: 1839: drawtext(50 , 76 , txt, 0xF800 , 0x0000, 1);
 11525  002F60  0E4C               	movlw	76
 11526  002F62  0100               	movlb	0	; () banked
 11527  002F64  6FB2               	movwf	drawtext@y& (0+255),b
 11528  002F66  C04F  F0B3         	movff	_txt,drawtext@_text
 11529  002F6A  C050  F0B4         	movff	_txt+1,drawtext@_text+1
 11530  002F6E  0EF8               	movlw	248
 11531  002F70  0100               	movlb	0	; () banked
 11532  002F72  6FB6               	movwf	(drawtext@color+1)& (0+255),b
 11533  002F74  0E00               	movlw	0
 11534  002F76  6FB5               	movwf	drawtext@color& (0+255),b
 11535  002F78  0E00               	movlw	0
 11536  002F7A  0100               	movlb	0	; () banked
 11537  002F7C  6FB8               	movwf	(drawtext@bg+1)& (0+255),b
 11538  002F7E  0E00               	movlw	0
 11539  002F80  6FB7               	movwf	drawtext@bg& (0+255),b
 11540  002F82  0E01               	movlw	1
 11541  002F84  0100               	movlb	0	; () banked
 11542  002F86  6FB9               	movwf	drawtext@size& (0+255),b
 11543  002F88  0E32               	movlw	50
 11544  002F8A  ECC8  F017         	call	_drawtext
 11545  002F8E  0012               	return		;funcret
 11546  002F90                     __end_of_Initialize_Setup_Time_Screen:
 11547                           	opt stack 0
 11548                           tblptru	equ	0xFF8
 11549                           tblptrh	equ	0xFF7
 11550                           tblptrl	equ	0xFF6
 11551                           tablat	equ	0xFF5
 11552                           prodh	equ	0xFF4
 11553                           prodl	equ	0xFF3
 11554                           intcon	equ	0xFF2
 11555                           intcon2	equ	0xFF1
 11556                           intcon3	equ	0xFF0
 11557                           postinc0	equ	0xFEE
 11558                           wreg	equ	0xFE8
 11559                           postdec1	equ	0xFE5
 11560                           fsr1l	equ	0xFE1
 11561                           postinc2	equ	0xFDE
 11562                           postdec2	equ	0xFDD
 11563                           fsr2h	equ	0xFDA
 11564                           fsr2l	equ	0xFD9
 11565                           status	equ	0xFD8
 11566                           
 11567 ;; *************** function _DS3231_Write_Time *****************
 11568 ;; Defined at:
 11569 ;;		line 2330 in file "lab_final_alt.c"
 11570 ;; Parameters:    Size  Location     Type
 11571 ;;  Device          1    wreg     unsigned char 
 11572 ;; Auto vars:     Size  Location     Type
 11573 ;;  Device          1   53[COMRAM] unsigned char 
 11574 ;; Return value:  Size  Location     Type
 11575 ;;		None               void
 11576 ;; Registers used:
 11577 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 11578 ;; Tracked objects:
 11579 ;;		On entry : 0/0
 11580 ;;		On exit  : 0/0
 11581 ;;		Unchanged: 0/0
 11582 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11583 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11584 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11585 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11586 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11587 ;;Total ram usage:        1 bytes
 11588 ;; Hardware stack levels used:    1
 11589 ;; Hardware stack levels required when called:    7
 11590 ;; This function calls:
 11591 ;;		_I2C_Start
 11592 ;;		_I2C_Write
 11593 ;;		_delay_ms
 11594 ;; This function is called by:
 11595 ;;		_Do_Setup_Time
 11596 ;; This function uses a non-reentrant model
 11597 ;;
 11598                           
 11599                           	psect	text36
 11600  00430E                     __ptext36:
 11601                           	opt stack 0
 11602  00430E                     _DS3231_Write_Time:
 11603                           	opt stack 22
 11604                           
 11605                           ;incstack = 0
 11606                           ;DS3231_Write_Time@Device stored from wreg
 11607  00430E  6E36               	movwf	DS3231_Write_Time@Device,c
 11608                           
 11609                           ;lab_final_alt.c: 2332: I2C_Start();
 11610  004310  ECDD  F025         	call	_I2C_Start	;wreg free
 11611                           
 11612                           ;lab_final_alt.c: 2333: I2C_Write((Device << 1) | 0);
 11613  004314  5036               	movf	DS3231_Write_Time@Device,w,c
 11614  004316  2436               	addwf	DS3231_Write_Time@Device,w,c
 11615  004318  EC52  F023         	call	_I2C_Write
 11616                           
 11617                           ;lab_final_alt.c: 2334: I2C_Write(0x00);
 11618  00431C  0E00               	movlw	0
 11619  00431E  EC52  F023         	call	_I2C_Write
 11620                           
 11621                           ;lab_final_alt.c: 2335: I2C_Write(second);
 11622  004322  0100               	movlb	0	; () banked
 11623  004324  51F6               	movf	_second& (0+255),w,b
 11624  004326  EC52  F023         	call	_I2C_Write
 11625                           
 11626                           ;lab_final_alt.c: 2336: I2C_Write(minute);
 11627  00432A  0100               	movlb	0	; () banked
 11628  00432C  51F2               	movf	_minute& (0+255),w,b
 11629  00432E  EC52  F023         	call	_I2C_Write
 11630                           
 11631                           ;lab_final_alt.c: 2337: I2C_Write(hour);
 11632  004332  0100               	movlb	0	; () banked
 11633  004334  51F1               	movf	_hour& (0+255),w,b
 11634  004336  EC52  F023         	call	_I2C_Write
 11635                           
 11636                           ;lab_final_alt.c: 2338: I2C_Write(dow);
 11637  00433A  5057               	movf	_dow,w,c
 11638  00433C  EC52  F023         	call	_I2C_Write
 11639                           
 11640                           ;lab_final_alt.c: 2339: I2C_Write(day);
 11641  004340  0100               	movlb	0	; () banked
 11642  004342  51EF               	movf	_day& (0+255),w,b
 11643  004344  EC52  F023         	call	_I2C_Write
 11644                           
 11645                           ;lab_final_alt.c: 2340: I2C_Write(month);
 11646  004348  0100               	movlb	0	; () banked
 11647  00434A  51F3               	movf	_month& (0+255),w,b
 11648  00434C  EC52  F023         	call	_I2C_Write
 11649                           
 11650                           ;lab_final_alt.c: 2341: I2C_Write(year);
 11651  004350  0100               	movlb	0	; () banked
 11652  004352  51F8               	movf	_year& (0+255),w,b
 11653  004354  EC52  F023         	call	_I2C_Write
 11654                           
 11655                           ;lab_final_alt.c: 2342: delay_ms(20);
 11656  004358  0E00               	movlw	0
 11657  00435A  6E31               	movwf	delay_ms@ms+1,c
 11658  00435C  0E14               	movlw	20
 11659  00435E  6E30               	movwf	delay_ms@ms,c
 11660  004360  ECDF  F021         	call	_delay_ms	;wreg free
 11661  004364  0012               	return		;funcret
 11662  004366                     __end_of_DS3231_Write_Time:
 11663                           	opt stack 0
 11664                           tblptru	equ	0xFF8
 11665                           tblptrh	equ	0xFF7
 11666                           tblptrl	equ	0xFF6
 11667                           tablat	equ	0xFF5
 11668                           prodh	equ	0xFF4
 11669                           prodl	equ	0xFF3
 11670                           intcon	equ	0xFF2
 11671                           intcon2	equ	0xFF1
 11672                           intcon3	equ	0xFF0
 11673                           postinc0	equ	0xFEE
 11674                           wreg	equ	0xFE8
 11675                           postdec1	equ	0xFE5
 11676                           fsr1l	equ	0xFE1
 11677                           postinc2	equ	0xFDE
 11678                           postdec2	equ	0xFDD
 11679                           fsr2h	equ	0xFDA
 11680                           fsr2l	equ	0xFD9
 11681                           status	equ	0xFD8
 11682                           
 11683 ;; *************** function _Do_Setup_Heater_Temp *****************
 11684 ;; Defined at:
 11685 ;;		line 2159 in file "lab_final_alt.c"
 11686 ;; Parameters:    Size  Location     Type
 11687 ;;		None
 11688 ;; Auto vars:     Size  Location     Type
 11689 ;;  Setup_Mode      1   20[BANK0 ] unsigned char 
 11690 ;;  Key_Done_Fla    1   19[BANK0 ] unsigned char 
 11691 ;;  Key_Abort_Fl    1   18[BANK0 ] unsigned char 
 11692 ;;  Key_Dn_Flag     1   17[BANK0 ] unsigned char 
 11693 ;;  Key_Up_Flag     1   16[BANK0 ] unsigned char 
 11694 ;;  Select_Field    1   15[BANK0 ] unsigned char 
 11695 ;; Return value:  Size  Location     Type
 11696 ;;		None               void
 11697 ;; Registers used:
 11698 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11699 ;; Tracked objects:
 11700 ;;		On entry : 0/0
 11701 ;;		On exit  : 0/0
 11702 ;;		Unchanged: 0/0
 11703 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11704 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11705 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11706 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11707 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11708 ;;Total ram usage:        6 bytes
 11709 ;; Hardware stack levels used:    1
 11710 ;; Hardware stack levels required when called:   13
 11711 ;; This function calls:
 11712 ;;		_Initialize_Main_Screen
 11713 ;;		_Initialize_Setup_Heater_Screen
 11714 ;;		_Update_Setup_Heater_Screen
 11715 ;; This function is called by:
 11716 ;;		_main
 11717 ;; This function uses a non-reentrant model
 11718 ;;
 11719                           
 11720                           	psect	text37
 11721  0032C8                     __ptext37:
 11722                           	opt stack 0
 11723  0032C8                     _Do_Setup_Heater_Temp:
 11724                           	opt stack 17
 11725                           
 11726                           ;lab_final_alt.c: 2162: Initialize_Setup_Heater_Screen();
 11727                           
 11728                           ;incstack = 0
 11729  0032C8  EC7A  F014         	call	_Initialize_Setup_Heater_Screen	;wreg free
 11730                           
 11731                           ;lab_final_alt.c: 2163: char Key_Up_Flag, Key_Dn_Flag, Key_Abort_Flag, Key_Done_Flag;
 11732                           ;lab_final_alt.c: 2164: char Select_Field, Setup_Mode;
 11733                           ;lab_final_alt.c: 2165: Setup_Mode = 1;
 11734  0032CC  0E01               	movlw	1
 11735  0032CE  0100               	movlb	0	; () banked
 11736  0032D0  6FC6               	movwf	Do_Setup_Heater_Temp@Setup_Mode& (0+255),b
 11737                           
 11738                           ; BSR set to: 0
 11739                           ;lab_final_alt.c: 2166: Select_Field = 0;
 11740  0032D2  0E00               	movlw	0
 11741  0032D4  0100               	movlb	0	; () banked
 11742  0032D6  6FC1               	movwf	Do_Setup_Heater_Temp@Select_Field& (0+255),b
 11743                           
 11744                           ;lab_final_alt.c: 2167: Update_Setup_Heater_Screen();
 11745  0032D8  EC23  F021         	call	_Update_Setup_Heater_Screen	;wreg free
 11746                           
 11747                           ;lab_final_alt.c: 2168: setup_heater_temp=set_heater_temp;
 11748  0032DC  C0F7  F05E         	movff	_set_heater_temp,_setup_heater_temp
 11749                           
 11750                           ;lab_final_alt.c: 2170: while (Setup_Mode == 1)
 11751  0032E0  D075               	goto	l9974
 11752  0032E2                     l9918:
 11753                           
 11754                           ;lab_final_alt.c: 2171: {
 11755                           ;lab_final_alt.c: 2172: if (nec_ok == 1)
 11756  0032E2  0100               	movlb	0	; () banked
 11757  0032E4  05F4               	decf	_nec_ok& (0+255),w,b
 11758  0032E6  A4D8               	btfss	status,2,c
 11759  0032E8  D071               	goto	l9974
 11760                           
 11761                           ; BSR set to: 0
 11762                           ;lab_final_alt.c: 2173: {
 11763                           ;lab_final_alt.c: 2174: INTCON3bits.INT2IE = 1;
 11764  0032EA  88F0               	bsf	intcon3,4,c	;volatile
 11765                           
 11766                           ;lab_final_alt.c: 2175: INTCON2bits.INTEDG2 = 0;
 11767  0032EC  98F1               	bcf	intcon2,4,c	;volatile
 11768                           
 11769                           ; BSR set to: 0
 11770                           ;lab_final_alt.c: 2176: nec_ok = 0;
 11771  0032EE  0E00               	movlw	0
 11772  0032F0  0100               	movlb	0	; () banked
 11773  0032F2  6FF4               	movwf	_nec_ok& (0+255),b
 11774                           
 11775                           ; BSR set to: 0
 11776                           ;lab_final_alt.c: 2179: if (nec_code == 0x00ffe21d) Key_Up_Flag = 1;
 11777  0032F4  0E1D               	movlw	29
 11778  0032F6  1849               	xorwf	_nec_code,w,c
 11779  0032F8  E10B               	bnz	l9928
 11780  0032FA  0EE2               	movlw	226
 11781  0032FC  184A               	xorwf	_nec_code+1,w,c
 11782  0032FE  E108               	bnz	l9928
 11783  003300  284B               	incf	_nec_code+2,w,c
 11784  003302  104C               	iorwf	_nec_code+3,w,c
 11785  003304  A4D8               	btfss	status,2,c
 11786  003306  D004               	goto	l9928
 11787                           
 11788                           ; BSR set to: 0
 11789  003308  0E01               	movlw	1
 11790  00330A  0100               	movlb	0	; () banked
 11791  00330C  6FC2               	movwf	Do_Setup_Heater_Temp@Key_Up_Flag& (0+255),b
 11792  00330E  D000               	goto	l9928
 11793  003310                     l9928:
 11794                           
 11795                           ; BSR set to: 0
 11796                           ;lab_final_alt.c: 2180: if (nec_code == 0x00ffa25d) Key_Dn_Flag = 1;
 11797  003310  0E5D               	movlw	93
 11798  003312  1849               	xorwf	_nec_code,w,c
 11799  003314  E10B               	bnz	l9932
 11800  003316  0EA2               	movlw	162
 11801  003318  184A               	xorwf	_nec_code+1,w,c
 11802  00331A  E108               	bnz	l9932
 11803  00331C  284B               	incf	_nec_code+2,w,c
 11804  00331E  104C               	iorwf	_nec_code+3,w,c
 11805  003320  A4D8               	btfss	status,2,c
 11806  003322  D004               	goto	l9932
 11807                           
 11808                           ; BSR set to: 0
 11809  003324  0E01               	movlw	1
 11810  003326  0100               	movlb	0	; () banked
 11811  003328  6FC3               	movwf	Do_Setup_Heater_Temp@Key_Dn_Flag& (0+255),b
 11812  00332A  D000               	goto	l9932
 11813  00332C                     l9932:
 11814                           
 11815                           ; BSR set to: 0
 11816                           ;lab_final_alt.c: 2181: if (nec_code == 0x00ff22dd) Key_Abort_Flag = 1;
 11817  00332C  0EDD               	movlw	221
 11818  00332E  1849               	xorwf	_nec_code,w,c
 11819  003330  E10B               	bnz	l9936
 11820  003332  0E22               	movlw	34
 11821  003334  184A               	xorwf	_nec_code+1,w,c
 11822  003336  E108               	bnz	l9936
 11823  003338  284B               	incf	_nec_code+2,w,c
 11824  00333A  104C               	iorwf	_nec_code+3,w,c
 11825  00333C  A4D8               	btfss	status,2,c
 11826  00333E  D004               	goto	l9936
 11827                           
 11828                           ; BSR set to: 0
 11829  003340  0E01               	movlw	1
 11830  003342  0100               	movlb	0	; () banked
 11831  003344  6FC4               	movwf	Do_Setup_Heater_Temp@Key_Abort_Flag& (0+255),b
 11832  003346  D000               	goto	l9936
 11833  003348                     l9936:
 11834                           
 11835                           ; BSR set to: 0
 11836                           ;lab_final_alt.c: 2182: if (nec_code == 0x00ffc23d) Key_Done_Flag = 1;
 11837  003348  0E3D               	movlw	61
 11838  00334A  1849               	xorwf	_nec_code,w,c
 11839  00334C  E10B               	bnz	l9940
 11840  00334E  0EC2               	movlw	194
 11841  003350  184A               	xorwf	_nec_code+1,w,c
 11842  003352  E108               	bnz	l9940
 11843  003354  284B               	incf	_nec_code+2,w,c
 11844  003356  104C               	iorwf	_nec_code+3,w,c
 11845  003358  A4D8               	btfss	status,2,c
 11846  00335A  D004               	goto	l9940
 11847                           
 11848                           ; BSR set to: 0
 11849  00335C  0E01               	movlw	1
 11850  00335E  0100               	movlb	0	; () banked
 11851  003360  6FC5               	movwf	Do_Setup_Heater_Temp@Key_Done_Flag& (0+255),b
 11852  003362  D000               	goto	l9940
 11853  003364                     l9940:
 11854                           
 11855                           ; BSR set to: 0
 11856                           ;lab_final_alt.c: 2185: if (Key_Up_Flag == 1 )
 11857  003364  0100               	movlb	0	; () banked
 11858  003366  05C2               	decf	Do_Setup_Heater_Temp@Key_Up_Flag& (0+255),w,b
 11859  003368  A4D8               	btfss	status,2,c
 11860  00336A  D008               	goto	l9948
 11861                           
 11862                           ; BSR set to: 0
 11863                           ;lab_final_alt.c: 2186: {
 11864                           ;lab_final_alt.c: 2187: set_heater_temp++;
 11865  00336C  0100               	movlb	0	; () banked
 11866  00336E  2BF7               	incf	_set_heater_temp& (0+255),f,b
 11867                           
 11868                           ; BSR set to: 0
 11869                           ;lab_final_alt.c: 2188: Key_Up_Flag = 0;
 11870  003370  0E00               	movlw	0
 11871  003372  0100               	movlb	0	; () banked
 11872  003374  6FC2               	movwf	Do_Setup_Heater_Temp@Key_Up_Flag& (0+255),b
 11873                           
 11874                           ; BSR set to: 0
 11875                           ;lab_final_alt.c: 2189: Update_Setup_Heater_Screen();
 11876  003376  EC23  F021         	call	_Update_Setup_Heater_Screen	;wreg free
 11877  00337A  D000               	goto	l9948
 11878  00337C                     l9948:
 11879                           
 11880                           ;lab_final_alt.c: 2192: }
 11881                           ;lab_final_alt.c: 2193: if (Key_Dn_Flag == 1 )
 11882  00337C  0100               	movlb	0	; () banked
 11883  00337E  05C3               	decf	Do_Setup_Heater_Temp@Key_Dn_Flag& (0+255),w,b
 11884  003380  A4D8               	btfss	status,2,c
 11885  003382  D008               	goto	l9956
 11886                           
 11887                           ; BSR set to: 0
 11888                           ;lab_final_alt.c: 2194: {
 11889                           ;lab_final_alt.c: 2195: set_heater_temp--;
 11890  003384  0100               	movlb	0	; () banked
 11891  003386  07F7               	decf	_set_heater_temp& (0+255),f,b
 11892                           
 11893                           ; BSR set to: 0
 11894                           ;lab_final_alt.c: 2196: Key_Dn_Flag = 0;
 11895  003388  0E00               	movlw	0
 11896  00338A  0100               	movlb	0	; () banked
 11897  00338C  6FC3               	movwf	Do_Setup_Heater_Temp@Key_Dn_Flag& (0+255),b
 11898                           
 11899                           ; BSR set to: 0
 11900                           ;lab_final_alt.c: 2197: Update_Setup_Heater_Screen();
 11901  00338E  EC23  F021         	call	_Update_Setup_Heater_Screen	;wreg free
 11902  003392  D000               	goto	l9956
 11903  003394                     l9956:
 11904                           
 11905                           ;lab_final_alt.c: 2199: }
 11906                           ;lab_final_alt.c: 2200: if (Key_Done_Flag == 1 )
 11907  003394  0100               	movlb	0	; () banked
 11908  003396  05C5               	decf	Do_Setup_Heater_Temp@Key_Done_Flag& (0+255),w,b
 11909  003398  A4D8               	btfss	status,2,c
 11910  00339A  D009               	goto	l9964
 11911                           
 11912                           ; BSR set to: 0
 11913                           ;lab_final_alt.c: 2201: {
 11914                           ;lab_final_alt.c: 2202: Key_Done_Flag = 0;
 11915  00339C  0E00               	movlw	0
 11916  00339E  0100               	movlb	0	; () banked
 11917  0033A0  6FC5               	movwf	Do_Setup_Heater_Temp@Key_Done_Flag& (0+255),b
 11918                           
 11919                           ; BSR set to: 0
 11920                           ;lab_final_alt.c: 2203: Initialize_Main_Screen();
 11921  0033A2  ECFB  F009         	call	_Initialize_Main_Screen	;wreg free
 11922                           
 11923                           ;lab_final_alt.c: 2204: Setup_Mode = 0;
 11924  0033A6  0E00               	movlw	0
 11925  0033A8  0100               	movlb	0	; () banked
 11926  0033AA  6FC6               	movwf	Do_Setup_Heater_Temp@Setup_Mode& (0+255),b
 11927  0033AC  D000               	goto	l9964
 11928  0033AE                     l9964:
 11929                           
 11930                           ; BSR set to: 0
 11931                           ;lab_final_alt.c: 2206: }
 11932                           ;lab_final_alt.c: 2208: if (Key_Abort_Flag == 1 )
 11933  0033AE  0100               	movlb	0	; () banked
 11934  0033B0  05C4               	decf	Do_Setup_Heater_Temp@Key_Abort_Flag& (0+255),w,b
 11935  0033B2  A4D8               	btfss	status,2,c
 11936  0033B4  D00B               	goto	l9974
 11937                           
 11938                           ; BSR set to: 0
 11939                           ;lab_final_alt.c: 2209: {
 11940                           ;lab_final_alt.c: 2210: set_heater_temp=setup_heater_temp;
 11941  0033B6  C05E  F0F7         	movff	_setup_heater_temp,_set_heater_temp
 11942                           
 11943                           ; BSR set to: 0
 11944                           ;lab_final_alt.c: 2211: Key_Abort_Flag = 0;
 11945  0033BA  0E00               	movlw	0
 11946  0033BC  0100               	movlb	0	; () banked
 11947  0033BE  6FC4               	movwf	Do_Setup_Heater_Temp@Key_Abort_Flag& (0+255),b
 11948                           
 11949                           ; BSR set to: 0
 11950                           ;lab_final_alt.c: 2212: Initialize_Main_Screen();
 11951  0033C0  ECFB  F009         	call	_Initialize_Main_Screen	;wreg free
 11952                           
 11953                           ;lab_final_alt.c: 2213: Setup_Mode = 0;
 11954  0033C4  0E00               	movlw	0
 11955  0033C6  0100               	movlb	0	; () banked
 11956  0033C8  6FC6               	movwf	Do_Setup_Heater_Temp@Setup_Mode& (0+255),b
 11957                           
 11958                           ; BSR set to: 0
 11959                           
 11960                           ; BSR set to: 0
 11961  0033CA  D000               	goto	l9974
 11962  0033CC                     l9974:
 11963  0033CC  0100               	movlb	0	; () banked
 11964  0033CE  05C6               	decf	Do_Setup_Heater_Temp@Setup_Mode& (0+255),w,b
 11965  0033D0  B4D8               	btfsc	status,2,c
 11966  0033D2  D787               	goto	l9918
 11967                           
 11968                           ; BSR set to: 0
 11969                           
 11970                           ; BSR set to: 0
 11971  0033D4  0012               	return		;funcret
 11972  0033D6                     __end_of_Do_Setup_Heater_Temp:
 11973                           	opt stack 0
 11974                           tblptru	equ	0xFF8
 11975                           tblptrh	equ	0xFF7
 11976                           tblptrl	equ	0xFF6
 11977                           tablat	equ	0xFF5
 11978                           prodh	equ	0xFF4
 11979                           prodl	equ	0xFF3
 11980                           intcon	equ	0xFF2
 11981                           intcon2	equ	0xFF1
 11982                           intcon3	equ	0xFF0
 11983                           postinc0	equ	0xFEE
 11984                           wreg	equ	0xFE8
 11985                           postdec1	equ	0xFE5
 11986                           fsr1l	equ	0xFE1
 11987                           postinc2	equ	0xFDE
 11988                           postdec2	equ	0xFDD
 11989                           fsr2h	equ	0xFDA
 11990                           fsr2l	equ	0xFD9
 11991                           status	equ	0xFD8
 11992                           
 11993 ;; *************** function _Update_Setup_Heater_Screen *****************
 11994 ;; Defined at:
 11995 ;;		line 2236 in file "lab_final_alt.c"
 11996 ;; Parameters:    Size  Location     Type
 11997 ;;		None
 11998 ;; Auto vars:     Size  Location     Type
 11999 ;;		None
 12000 ;; Return value:  Size  Location     Type
 12001 ;;		None               void
 12002 ;; Registers used:
 12003 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12004 ;; Tracked objects:
 12005 ;;		On entry : 0/0
 12006 ;;		On exit  : 0/0
 12007 ;;		Unchanged: 0/0
 12008 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12009 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12010 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12011 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12012 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12013 ;;Total ram usage:        0 bytes
 12014 ;; Hardware stack levels used:    1
 12015 ;; Hardware stack levels required when called:   12
 12016 ;; This function calls:
 12017 ;;		___awdiv
 12018 ;;		___awmod
 12019 ;;		_drawtext
 12020 ;; This function is called by:
 12021 ;;		_Do_Setup_Heater_Temp
 12022 ;; This function uses a non-reentrant model
 12023 ;;
 12024                           
 12025                           	psect	text38
 12026  004246                     __ptext38:
 12027                           	opt stack 0
 12028  004246                     _Update_Setup_Heater_Screen:
 12029                           	opt stack 17
 12030                           
 12031                           ;lab_final_alt.c: 2238: setup_heater_S_text[0] = set_heater_temp/10 + '0';
 12032                           
 12033                           ; BSR set to: 0
 12034                           ;incstack = 0
 12035  004246  C0F7  F022         	movff	_set_heater_temp,___awdiv@dividend
 12036  00424A  6A23               	clrf	___awdiv@dividend+1,c
 12037  00424C  0E00               	movlw	0
 12038  00424E  6E25               	movwf	___awdiv@divisor+1,c
 12039  004250  0E0A               	movlw	10
 12040  004252  6E24               	movwf	___awdiv@divisor,c
 12041  004254  EC92  F01D         	call	___awdiv	;wreg free
 12042  004258  5022               	movf	?___awdiv,w,c
 12043  00425A  0F30               	addlw	48
 12044  00425C  0100               	movlb	0	; () banked
 12045  00425E  6FA9               	movwf	_setup_heater_S_text& (0+255),b
 12046                           
 12047                           ;lab_final_alt.c: 2239: setup_heater_S_text[1] = set_heater_temp%10 + '0';
 12048  004260  C0F7  F01C         	movff	_set_heater_temp,___awmod@dividend
 12049  004264  6A1D               	clrf	___awmod@dividend+1,c
 12050  004266  0E00               	movlw	0
 12051  004268  6E1F               	movwf	___awmod@divisor+1,c
 12052  00426A  0E0A               	movlw	10
 12053  00426C  6E1E               	movwf	___awmod@divisor,c
 12054  00426E  ECC8  F01F         	call	___awmod	;wreg free
 12055  004272  501C               	movf	?___awmod,w,c
 12056  004274  0F30               	addlw	48
 12057  004276  0100               	movlb	0	; () banked
 12058  004278  6FAA               	movwf	(_setup_heater_S_text+1)& (0+255),b
 12059                           
 12060                           ; BSR set to: 0
 12061                           ;lab_final_alt.c: 2240: drawtext(46, 94 ,setup_heater_S_text, 0x001F, 0x0000, 2);
 12062  00427A  0E5E               	movlw	94
 12063  00427C  0100               	movlb	0	; () banked
 12064  00427E  6FB2               	movwf	drawtext@y& (0+255),b
 12065  004280  0EA9               	movlw	low _setup_heater_S_text
 12066  004282  0100               	movlb	0	; () banked
 12067  004284  6FB3               	movwf	drawtext@_text& (0+255),b
 12068  004286  0E00               	movlw	high _setup_heater_S_text
 12069  004288  0100               	movlb	0	; () banked
 12070  00428A  6FB4               	movwf	(drawtext@_text+1)& (0+255),b
 12071  00428C  0E00               	movlw	0
 12072  00428E  0100               	movlb	0	; () banked
 12073  004290  6FB6               	movwf	(drawtext@color+1)& (0+255),b
 12074  004292  0E1F               	movlw	31
 12075  004294  6FB5               	movwf	drawtext@color& (0+255),b
 12076  004296  0E00               	movlw	0
 12077  004298  0100               	movlb	0	; () banked
 12078  00429A  6FB8               	movwf	(drawtext@bg+1)& (0+255),b
 12079  00429C  0E00               	movlw	0
 12080  00429E  6FB7               	movwf	drawtext@bg& (0+255),b
 12081  0042A0  0E02               	movlw	2
 12082  0042A2  0100               	movlb	0	; () banked
 12083  0042A4  6FB9               	movwf	drawtext@size& (0+255),b
 12084  0042A6  0E2E               	movlw	46
 12085  0042A8  ECC8  F017         	call	_drawtext
 12086  0042AC  0012               	return		;funcret
 12087  0042AE                     __end_of_Update_Setup_Heater_Screen:
 12088                           	opt stack 0
 12089                           tblptru	equ	0xFF8
 12090                           tblptrh	equ	0xFF7
 12091                           tblptrl	equ	0xFF6
 12092                           tablat	equ	0xFF5
 12093                           prodh	equ	0xFF4
 12094                           prodl	equ	0xFF3
 12095                           intcon	equ	0xFF2
 12096                           intcon2	equ	0xFF1
 12097                           intcon3	equ	0xFF0
 12098                           postinc0	equ	0xFEE
 12099                           wreg	equ	0xFE8
 12100                           postdec1	equ	0xFE5
 12101                           fsr1l	equ	0xFE1
 12102                           postinc2	equ	0xFDE
 12103                           postdec2	equ	0xFDD
 12104                           fsr2h	equ	0xFDA
 12105                           fsr2l	equ	0xFD9
 12106                           status	equ	0xFD8
 12107                           
 12108 ;; *************** function _Initialize_Setup_Heater_Screen *****************
 12109 ;; Defined at:
 12110 ;;		line 2219 in file "lab_final_alt.c"
 12111 ;; Parameters:    Size  Location     Type
 12112 ;;		None
 12113 ;; Auto vars:     Size  Location     Type
 12114 ;;		None
 12115 ;; Return value:  Size  Location     Type
 12116 ;;		None               void
 12117 ;; Registers used:
 12118 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12119 ;; Tracked objects:
 12120 ;;		On entry : 0/0
 12121 ;;		On exit  : 0/0
 12122 ;;		Unchanged: 0/0
 12123 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12124 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12125 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12126 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12127 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12128 ;;Total ram usage:        0 bytes
 12129 ;; Hardware stack levels used:    1
 12130 ;; Hardware stack levels required when called:   12
 12131 ;; This function calls:
 12132 ;;		_drawCircle
 12133 ;;		_drawtext
 12134 ;;		_fillScreen
 12135 ;;		_strcpy
 12136 ;; This function is called by:
 12137 ;;		_Do_Setup_Heater_Temp
 12138 ;; This function uses a non-reentrant model
 12139 ;;
 12140                           
 12141                           	psect	text39
 12142  0028F4                     __ptext39:
 12143                           	opt stack 0
 12144  0028F4                     _Initialize_Setup_Heater_Screen:
 12145                           	opt stack 17
 12146                           
 12147                           ;lab_final_alt.c: 2221: fillScreen(0x0000);
 12148                           
 12149                           ;incstack = 0
 12150  0028F4  0E00               	movlw	0
 12151  0028F6  6E30               	movwf	fillScreen@color+1,c
 12152  0028F8  0E00               	movlw	0
 12153  0028FA  6E2F               	movwf	fillScreen@color,c
 12154  0028FC  EC7C  F025         	call	_fillScreen	;wreg free
 12155                           
 12156                           ;lab_final_alt.c: 2223: strcpy(txt, " ECE3301L Spring 2019\0");
 12157  002900  C04F  F01C         	movff	_txt,strcpy@to
 12158  002904  C050  F01D         	movff	_txt+1,strcpy@to+1
 12159  002908  0E57               	movlw	low STR_4
 12160  00290A  6E1E               	movwf	strcpy@from,c
 12161  00290C  0EFF               	movlw	high STR_4
 12162  00290E  6E1F               	movwf	strcpy@from+1,c
 12163  002910  EC33  F024         	call	_strcpy	;wreg free
 12164                           
 12165                           ;lab_final_alt.c: 2224: drawtext(1 , 2, txt, 0xFFFF , 0x0000, 1);
 12166  002914  0E02               	movlw	2
 12167  002916  0100               	movlb	0	; () banked
 12168  002918  6FB2               	movwf	drawtext@y& (0+255),b
 12169  00291A  C04F  F0B3         	movff	_txt,drawtext@_text
 12170  00291E  C050  F0B4         	movff	_txt+1,drawtext@_text+1
 12171  002922  0EFF               	movlw	255
 12172  002924  0100               	movlb	0	; () banked
 12173  002926  6FB6               	movwf	(drawtext@color+1)& (0+255),b
 12174  002928  69B5               	setf	drawtext@color& (0+255),b
 12175  00292A  0E00               	movlw	0
 12176  00292C  0100               	movlb	0	; () banked
 12177  00292E  6FB8               	movwf	(drawtext@bg+1)& (0+255),b
 12178  002930  0E00               	movlw	0
 12179  002932  6FB7               	movwf	drawtext@bg& (0+255),b
 12180  002934  0E01               	movlw	1
 12181  002936  0100               	movlb	0	; () banked
 12182  002938  6FB9               	movwf	drawtext@size& (0+255),b
 12183  00293A  0E01               	movlw	1
 12184  00293C  ECC8  F017         	call	_drawtext
 12185                           
 12186                           ;lab_final_alt.c: 2225: strcpy(txt, "Heater\0");
 12187  002940  C04F  F01C         	movff	_txt,strcpy@to
 12188  002944  C050  F01D         	movff	_txt+1,strcpy@to+1
 12189  002948  0ED1               	movlw	low STR_27
 12190  00294A  6E1E               	movwf	strcpy@from,c
 12191  00294C  0EFF               	movlw	high STR_27
 12192  00294E  6E1F               	movwf	strcpy@from+1,c
 12193  002950  EC33  F024         	call	_strcpy	;wreg free
 12194                           
 12195                           ;lab_final_alt.c: 2226: drawtext(1+25 , 2+15, txt, 0xF81F, 0x0000, 2);
 12196  002954  0E11               	movlw	17
 12197  002956  0100               	movlb	0	; () banked
 12198  002958  6FB2               	movwf	drawtext@y& (0+255),b
 12199  00295A  C04F  F0B3         	movff	_txt,drawtext@_text
 12200  00295E  C050  F0B4         	movff	_txt+1,drawtext@_text+1
 12201  002962  0EF8               	movlw	248
 12202  002964  0100               	movlb	0	; () banked
 12203  002966  6FB6               	movwf	(drawtext@color+1)& (0+255),b
 12204  002968  0E1F               	movlw	31
 12205  00296A  6FB5               	movwf	drawtext@color& (0+255),b
 12206  00296C  0E00               	movlw	0
 12207  00296E  0100               	movlb	0	; () banked
 12208  002970  6FB8               	movwf	(drawtext@bg+1)& (0+255),b
 12209  002972  0E00               	movlw	0
 12210  002974  6FB7               	movwf	drawtext@bg& (0+255),b
 12211  002976  0E02               	movlw	2
 12212  002978  0100               	movlb	0	; () banked
 12213  00297A  6FB9               	movwf	drawtext@size& (0+255),b
 12214  00297C  0E1A               	movlw	26
 12215  00297E  ECC8  F017         	call	_drawtext
 12216                           
 12217                           ;lab_final_alt.c: 2227: strcpy(txt, "Setup\0");
 12218  002982  C04F  F01C         	movff	_txt,strcpy@to
 12219  002986  C050  F01D         	movff	_txt+1,strcpy@to+1
 12220  00298A  0EB4               	movlw	low (STR_20+5)
 12221  00298C  6E1E               	movwf	strcpy@from,c
 12222  00298E  0EFF               	movlw	high (STR_20+5)
 12223  002990  6E1F               	movwf	strcpy@from+1,c
 12224  002992  EC33  F024         	call	_strcpy	;wreg free
 12225                           
 12226                           ;lab_final_alt.c: 2228: drawtext(1+25 , 2+35, txt, 0xF81F, 0x0000, 2);
 12227  002996  0E25               	movlw	37
 12228  002998  0100               	movlb	0	; () banked
 12229  00299A  6FB2               	movwf	drawtext@y& (0+255),b
 12230  00299C  C04F  F0B3         	movff	_txt,drawtext@_text
 12231  0029A0  C050  F0B4         	movff	_txt+1,drawtext@_text+1
 12232  0029A4  0EF8               	movlw	248
 12233  0029A6  0100               	movlb	0	; () banked
 12234  0029A8  6FB6               	movwf	(drawtext@color+1)& (0+255),b
 12235  0029AA  0E1F               	movlw	31
 12236  0029AC  6FB5               	movwf	drawtext@color& (0+255),b
 12237  0029AE  0E00               	movlw	0
 12238  0029B0  0100               	movlb	0	; () banked
 12239  0029B2  6FB8               	movwf	(drawtext@bg+1)& (0+255),b
 12240  0029B4  0E00               	movlw	0
 12241  0029B6  6FB7               	movwf	drawtext@bg& (0+255),b
 12242  0029B8  0E02               	movlw	2
 12243  0029BA  0100               	movlb	0	; () banked
 12244  0029BC  6FB9               	movwf	drawtext@size& (0+255),b
 12245  0029BE  0E1A               	movlw	26
 12246  0029C0  ECC8  F017         	call	_drawtext
 12247                           
 12248                           ;lab_final_alt.c: 2229: strcpy(txt, "Heater Set Temp");
 12249  0029C4  C04F  F01C         	movff	_txt,strcpy@to
 12250  0029C8  C050  F01D         	movff	_txt+1,strcpy@to+1
 12251  0029CC  0E92               	movlw	low STR_13
 12252  0029CE  6E1E               	movwf	strcpy@from,c
 12253  0029D0  0EFF               	movlw	high STR_13
 12254  0029D2  6E1F               	movwf	strcpy@from+1,c
 12255  0029D4  EC33  F024         	call	_strcpy	;wreg free
 12256                           
 12257                           ;lab_final_alt.c: 2230: drawtext(15 , 80, txt, 0xFFE0 , 0x0000, 1);
 12258  0029D8  0E50               	movlw	80
 12259  0029DA  0100               	movlb	0	; () banked
 12260  0029DC  6FB2               	movwf	drawtext@y& (0+255),b
 12261  0029DE  C04F  F0B3         	movff	_txt,drawtext@_text
 12262  0029E2  C050  F0B4         	movff	_txt+1,drawtext@_text+1
 12263  0029E6  0EFF               	movlw	255
 12264  0029E8  0100               	movlb	0	; () banked
 12265  0029EA  6FB6               	movwf	(drawtext@color+1)& (0+255),b
 12266  0029EC  0EE0               	movlw	224
 12267  0029EE  6FB5               	movwf	drawtext@color& (0+255),b
 12268  0029F0  0E00               	movlw	0
 12269  0029F2  0100               	movlb	0	; () banked
 12270  0029F4  6FB8               	movwf	(drawtext@bg+1)& (0+255),b
 12271  0029F6  0E00               	movlw	0
 12272  0029F8  6FB7               	movwf	drawtext@bg& (0+255),b
 12273  0029FA  0E01               	movlw	1
 12274  0029FC  0100               	movlb	0	; () banked
 12275  0029FE  6FB9               	movwf	drawtext@size& (0+255),b
 12276  002A00  0E0F               	movlw	15
 12277  002A02  ECC8  F017         	call	_drawtext
 12278                           
 12279                           ;lab_final_alt.c: 2231: drawCircle(73, 94 , 2 , 0x001F);
 12280  002A06  0E00               	movlw	0
 12281  002A08  6E28               	movwf	drawCircle@x0+1,c
 12282  002A0A  0E49               	movlw	73
 12283  002A0C  6E27               	movwf	drawCircle@x0,c
 12284  002A0E  0E00               	movlw	0
 12285  002A10  6E2A               	movwf	drawCircle@y0+1,c
 12286  002A12  0E5E               	movlw	94
 12287  002A14  6E29               	movwf	drawCircle@y0,c
 12288  002A16  0E00               	movlw	0
 12289  002A18  6E2C               	movwf	drawCircle@r+1,c
 12290  002A1A  0E02               	movlw	2
 12291  002A1C  6E2B               	movwf	drawCircle@r,c
 12292  002A1E  0E00               	movlw	0
 12293  002A20  6E2E               	movwf	drawCircle@color+1,c
 12294  002A22  0E1F               	movlw	31
 12295  002A24  6E2D               	movwf	drawCircle@color,c
 12296  002A26  ECD5  F012         	call	_drawCircle	;wreg free
 12297                           
 12298                           ;lab_final_alt.c: 2232: strcpy(txt, "F");
 12299  002A2A  C04F  F01C         	movff	_txt,strcpy@to
 12300  002A2E  C050  F01D         	movff	_txt+1,strcpy@to+1
 12301  002A32  0EFA               	movlw	low (STR_16+2)
 12302  002A34  6E1E               	movwf	strcpy@from,c
 12303  002A36  0EFF               	movlw	high (STR_16+2)
 12304  002A38  6E1F               	movwf	strcpy@from+1,c
 12305  002A3A  EC33  F024         	call	_strcpy	;wreg free
 12306                           
 12307                           ;lab_final_alt.c: 2233: drawtext(78 , 94, txt, 0x001F , 0x0000, 2);
 12308  002A3E  0E5E               	movlw	94
 12309  002A40  0100               	movlb	0	; () banked
 12310  002A42  6FB2               	movwf	drawtext@y& (0+255),b
 12311  002A44  C04F  F0B3         	movff	_txt,drawtext@_text
 12312  002A48  C050  F0B4         	movff	_txt+1,drawtext@_text+1
 12313  002A4C  0E00               	movlw	0
 12314  002A4E  0100               	movlb	0	; () banked
 12315  002A50  6FB6               	movwf	(drawtext@color+1)& (0+255),b
 12316  002A52  0E1F               	movlw	31
 12317  002A54  6FB5               	movwf	drawtext@color& (0+255),b
 12318  002A56  0E00               	movlw	0
 12319  002A58  0100               	movlb	0	; () banked
 12320  002A5A  6FB8               	movwf	(drawtext@bg+1)& (0+255),b
 12321  002A5C  0E00               	movlw	0
 12322  002A5E  6FB7               	movwf	drawtext@bg& (0+255),b
 12323  002A60  0E02               	movlw	2
 12324  002A62  0100               	movlb	0	; () banked
 12325  002A64  6FB9               	movwf	drawtext@size& (0+255),b
 12326  002A66  0E4E               	movlw	78
 12327  002A68  ECC8  F017         	call	_drawtext
 12328  002A6C  0012               	return		;funcret
 12329  002A6E                     __end_of_Initialize_Setup_Heater_Screen:
 12330                           	opt stack 0
 12331                           tblptru	equ	0xFF8
 12332                           tblptrh	equ	0xFF7
 12333                           tblptrl	equ	0xFF6
 12334                           tablat	equ	0xFF5
 12335                           prodh	equ	0xFF4
 12336                           prodl	equ	0xFF3
 12337                           intcon	equ	0xFF2
 12338                           intcon2	equ	0xFF1
 12339                           intcon3	equ	0xFF0
 12340                           postinc0	equ	0xFEE
 12341                           wreg	equ	0xFE8
 12342                           postdec1	equ	0xFE5
 12343                           fsr1l	equ	0xFE1
 12344                           postinc2	equ	0xFDE
 12345                           postdec2	equ	0xFDD
 12346                           fsr2h	equ	0xFDA
 12347                           fsr2l	equ	0xFD9
 12348                           status	equ	0xFD8
 12349                           
 12350 ;; *************** function _Do_Setup_Alarm_Time *****************
 12351 ;; Defined at:
 12352 ;;		line 2053 in file "lab_final_alt.c"
 12353 ;; Parameters:    Size  Location     Type
 12354 ;;		None
 12355 ;; Auto vars:     Size  Location     Type
 12356 ;;  Select_Field    1   21[BANK0 ] unsigned char 
 12357 ;;  Setup_Mode      1   20[BANK0 ] unsigned char 
 12358 ;;  Key_Next_Fla    1   19[BANK0 ] unsigned char 
 12359 ;;  Key_Done_Fla    1   18[BANK0 ] unsigned char 
 12360 ;;  Key_Abort_Fl    1   17[BANK0 ] unsigned char 
 12361 ;;  Key_Dn_Flag     1   16[BANK0 ] unsigned char 
 12362 ;;  Key_Up_Flag     1   15[BANK0 ] unsigned char 
 12363 ;; Return value:  Size  Location     Type
 12364 ;;		None               void
 12365 ;; Registers used:
 12366 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12367 ;; Tracked objects:
 12368 ;;		On entry : 0/0
 12369 ;;		On exit  : 0/0
 12370 ;;		Unchanged: 0/0
 12371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12372 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12373 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12374 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12375 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12376 ;;Total ram usage:        7 bytes
 12377 ;; Hardware stack levels used:    1
 12378 ;; Hardware stack levels required when called:   13
 12379 ;; This function calls:
 12380 ;;		_DS3231_Read_Alarm_1_Time
 12381 ;;		_DS3231_Read_Time
 12382 ;;		_DS3231_Write_Alarm_1_Time
 12383 ;;		_Initialize_Main_Screen
 12384 ;;		_Initialize_Setup_Alarm_Screen
 12385 ;;		_Update_Setup_Alarm_Screen
 12386 ;;		_Update_Setup_Screen_Cursor
 12387 ;;		_bcd_2_dec
 12388 ;;		_dec_2_bcd
 12389 ;; This function is called by:
 12390 ;;		_main
 12391 ;; This function uses a non-reentrant model
 12392 ;;
 12393                           
 12394                           	psect	text40
 12395  0021B6                     __ptext40:
 12396                           	opt stack 0
 12397  0021B6                     _Do_Setup_Alarm_Time:
 12398                           	opt stack 17
 12399                           
 12400                           ;lab_final_alt.c: 2055: char Key_Next_Flag, Key_Up_Flag, Key_Dn_Flag, Key_Abort_Flag, Ke
      +                          y_Done_Flag;
 12401                           ;lab_final_alt.c: 2056: char Select_Field, Setup_Mode;
 12402                           ;lab_final_alt.c: 2057: Setup_Mode = 1;
 12403                           
 12404                           ;incstack = 0
 12405  0021B6  0E01               	movlw	1
 12406  0021B8  0100               	movlb	0	; () banked
 12407  0021BA  6FC6               	movwf	Do_Setup_Alarm_Time@Setup_Mode& (0+255),b
 12408                           
 12409                           ;lab_final_alt.c: 2058: Select_Field = 0;
 12410  0021BC  0E00               	movlw	0
 12411  0021BE  0100               	movlb	0	; () banked
 12412  0021C0  6FC7               	movwf	Do_Setup_Alarm_Time@Select_Field& (0+255),b
 12413                           
 12414                           ; BSR set to: 0
 12415                           ;lab_final_alt.c: 2059: DS3231_Read_Alarm_1_Time(0x68);
 12416  0021C2  0E68               	movlw	104
 12417  0021C4  ECCB  F022         	call	_DS3231_Read_Alarm_1_Time
 12418                           
 12419                           ;lab_final_alt.c: 2061: setup_alarm_second = bcd_2_dec(alarm_second);
 12420  0021C8  5055               	movf	_alarm_second,w,c
 12421  0021CA  EC7E  F024         	call	_bcd_2_dec
 12422  0021CE  501C               	movf	?_bcd_2_dec,w,c
 12423  0021D0  6E5C               	movwf	_setup_alarm_second,c
 12424                           
 12425                           ;lab_final_alt.c: 2062: setup_alarm_minute = bcd_2_dec(alarm_minute);
 12426  0021D2  5054               	movf	_alarm_minute,w,c
 12427  0021D4  EC7E  F024         	call	_bcd_2_dec
 12428  0021D8  501C               	movf	?_bcd_2_dec,w,c
 12429  0021DA  6E5B               	movwf	_setup_alarm_minute,c
 12430                           
 12431                           ;lab_final_alt.c: 2063: setup_alarm_hour = bcd_2_dec(alarm_hour);
 12432  0021DC  5053               	movf	_alarm_hour,w,c
 12433  0021DE  EC7E  F024         	call	_bcd_2_dec
 12434  0021E2  501C               	movf	?_bcd_2_dec,w,c
 12435  0021E4  6E5A               	movwf	_setup_alarm_hour,c
 12436                           
 12437                           ;lab_final_alt.c: 2065: Initialize_Setup_Alarm_Screen();
 12438  0021E6  ECE5  F01B         	call	_Initialize_Setup_Alarm_Screen	;wreg free
 12439                           
 12440                           ;lab_final_alt.c: 2066: Update_Setup_Alarm_Screen();
 12441  0021EA  ECC8  F01C         	call	_Update_Setup_Alarm_Screen	;wreg free
 12442                           
 12443                           ;lab_final_alt.c: 2068: while (Setup_Mode == 1)
 12444  0021EE  D0FB               	goto	l9908
 12445  0021F0                     l9784:
 12446                           
 12447                           ;lab_final_alt.c: 2069: {
 12448                           ;lab_final_alt.c: 2070: if (nec_ok == 1)
 12449  0021F0  0100               	movlb	0	; () banked
 12450  0021F2  05F4               	decf	_nec_ok& (0+255),w,b
 12451  0021F4  A4D8               	btfss	status,2,c
 12452  0021F6  D0F7               	goto	l9908
 12453                           
 12454                           ; BSR set to: 0
 12455                           ;lab_final_alt.c: 2071: {
 12456                           ;lab_final_alt.c: 2072: INTCON3bits.INT2IE = 1;
 12457  0021F8  88F0               	bsf	intcon3,4,c	;volatile
 12458                           
 12459                           ;lab_final_alt.c: 2073: INTCON2bits.INTEDG2 = 0;
 12460  0021FA  98F1               	bcf	intcon2,4,c	;volatile
 12461                           
 12462                           ; BSR set to: 0
 12463                           ;lab_final_alt.c: 2074: nec_ok = 0;
 12464  0021FC  0E00               	movlw	0
 12465  0021FE  0100               	movlb	0	; () banked
 12466  002200  6FF4               	movwf	_nec_ok& (0+255),b
 12467                           
 12468                           ; BSR set to: 0
 12469                           ;lab_final_alt.c: 2076: if (nec_code == 0x00ff02fd) Key_Next_Flag = 1;
 12470  002202  0EFD               	movlw	253
 12471  002204  1849               	xorwf	_nec_code,w,c
 12472  002206  E10B               	bnz	l9794
 12473  002208  0E02               	movlw	2
 12474  00220A  184A               	xorwf	_nec_code+1,w,c
 12475  00220C  E108               	bnz	l9794
 12476  00220E  284B               	incf	_nec_code+2,w,c
 12477  002210  104C               	iorwf	_nec_code+3,w,c
 12478  002212  A4D8               	btfss	status,2,c
 12479  002214  D004               	goto	l9794
 12480                           
 12481                           ; BSR set to: 0
 12482  002216  0E01               	movlw	1
 12483  002218  0100               	movlb	0	; () banked
 12484  00221A  6FC5               	movwf	Do_Setup_Alarm_Time@Key_Next_Flag& (0+255),b
 12485  00221C  D000               	goto	l9794
 12486  00221E                     l9794:
 12487                           
 12488                           ; BSR set to: 0
 12489                           ;lab_final_alt.c: 2077: if (nec_code == 0x00ffe21d) Key_Up_Flag = 1;
 12490  00221E  0E1D               	movlw	29
 12491  002220  1849               	xorwf	_nec_code,w,c
 12492  002222  E10B               	bnz	l9798
 12493  002224  0EE2               	movlw	226
 12494  002226  184A               	xorwf	_nec_code+1,w,c
 12495  002228  E108               	bnz	l9798
 12496  00222A  284B               	incf	_nec_code+2,w,c
 12497  00222C  104C               	iorwf	_nec_code+3,w,c
 12498  00222E  A4D8               	btfss	status,2,c
 12499  002230  D004               	goto	l9798
 12500                           
 12501                           ; BSR set to: 0
 12502  002232  0E01               	movlw	1
 12503  002234  0100               	movlb	0	; () banked
 12504  002236  6FC1               	movwf	Do_Setup_Alarm_Time@Key_Up_Flag& (0+255),b
 12505  002238  D000               	goto	l9798
 12506  00223A                     l9798:
 12507                           
 12508                           ; BSR set to: 0
 12509                           ;lab_final_alt.c: 2078: if (nec_code == 0x00ffa25d) Key_Dn_Flag = 1;
 12510  00223A  0E5D               	movlw	93
 12511  00223C  1849               	xorwf	_nec_code,w,c
 12512  00223E  E10B               	bnz	l9802
 12513  002240  0EA2               	movlw	162
 12514  002242  184A               	xorwf	_nec_code+1,w,c
 12515  002244  E108               	bnz	l9802
 12516  002246  284B               	incf	_nec_code+2,w,c
 12517  002248  104C               	iorwf	_nec_code+3,w,c
 12518  00224A  A4D8               	btfss	status,2,c
 12519  00224C  D004               	goto	l9802
 12520                           
 12521                           ; BSR set to: 0
 12522  00224E  0E01               	movlw	1
 12523  002250  0100               	movlb	0	; () banked
 12524  002252  6FC2               	movwf	Do_Setup_Alarm_Time@Key_Dn_Flag& (0+255),b
 12525  002254  D000               	goto	l9802
 12526  002256                     l9802:
 12527                           
 12528                           ; BSR set to: 0
 12529                           ;lab_final_alt.c: 2079: if (nec_code == 0x00ff22dd) Key_Abort_Flag = 1;
 12530  002256  0EDD               	movlw	221
 12531  002258  1849               	xorwf	_nec_code,w,c
 12532  00225A  E10B               	bnz	l9806
 12533  00225C  0E22               	movlw	34
 12534  00225E  184A               	xorwf	_nec_code+1,w,c
 12535  002260  E108               	bnz	l9806
 12536  002262  284B               	incf	_nec_code+2,w,c
 12537  002264  104C               	iorwf	_nec_code+3,w,c
 12538  002266  A4D8               	btfss	status,2,c
 12539  002268  D004               	goto	l9806
 12540                           
 12541                           ; BSR set to: 0
 12542  00226A  0E01               	movlw	1
 12543  00226C  0100               	movlb	0	; () banked
 12544  00226E  6FC3               	movwf	Do_Setup_Alarm_Time@Key_Abort_Flag& (0+255),b
 12545  002270  D000               	goto	l9806
 12546  002272                     l9806:
 12547                           
 12548                           ; BSR set to: 0
 12549                           ;lab_final_alt.c: 2080: if (nec_code == 0x00ffc23d) Key_Done_Flag = 1;
 12550  002272  0E3D               	movlw	61
 12551  002274  1849               	xorwf	_nec_code,w,c
 12552  002276  E10B               	bnz	l9810
 12553  002278  0EC2               	movlw	194
 12554  00227A  184A               	xorwf	_nec_code+1,w,c
 12555  00227C  E108               	bnz	l9810
 12556  00227E  284B               	incf	_nec_code+2,w,c
 12557  002280  104C               	iorwf	_nec_code+3,w,c
 12558  002282  A4D8               	btfss	status,2,c
 12559  002284  D004               	goto	l9810
 12560                           
 12561                           ; BSR set to: 0
 12562  002286  0E01               	movlw	1
 12563  002288  0100               	movlb	0	; () banked
 12564  00228A  6FC4               	movwf	Do_Setup_Alarm_Time@Key_Done_Flag& (0+255),b
 12565  00228C  D000               	goto	l9810
 12566  00228E                     l9810:
 12567                           
 12568                           ; BSR set to: 0
 12569                           ;lab_final_alt.c: 2082: if (Key_Next_Flag == 1 )
 12570  00228E  0100               	movlb	0	; () banked
 12571  002290  05C5               	decf	Do_Setup_Alarm_Time@Key_Next_Flag& (0+255),w,b
 12572  002292  A4D8               	btfss	status,2,c
 12573  002294  D016               	goto	l9824
 12574                           
 12575                           ; BSR set to: 0
 12576                           ;lab_final_alt.c: 2083: {
 12577                           ;lab_final_alt.c: 2084: Key_Next_Flag = 0;
 12578  002296  0E00               	movlw	0
 12579  002298  0100               	movlb	0	; () banked
 12580  00229A  6FC5               	movwf	Do_Setup_Alarm_Time@Key_Next_Flag& (0+255),b
 12581                           
 12582                           ; BSR set to: 0
 12583                           ;lab_final_alt.c: 2085: Select_Field++;
 12584  00229C  0100               	movlb	0	; () banked
 12585  00229E  2BC7               	incf	Do_Setup_Alarm_Time@Select_Field& (0+255),f,b
 12586                           
 12587                           ; BSR set to: 0
 12588                           ;lab_final_alt.c: 2086: if (Select_Field == 3) Select_Field = 0;
 12589  0022A0  0E03               	movlw	3
 12590  0022A2  0100               	movlb	0	; () banked
 12591  0022A4  19C7               	xorwf	Do_Setup_Alarm_Time@Select_Field& (0+255),w,b
 12592  0022A6  A4D8               	btfss	status,2,c
 12593  0022A8  D004               	goto	l9820
 12594                           
 12595                           ; BSR set to: 0
 12596  0022AA  0E00               	movlw	0
 12597  0022AC  0100               	movlb	0	; () banked
 12598  0022AE  6FC7               	movwf	Do_Setup_Alarm_Time@Select_Field& (0+255),b
 12599  0022B0  D000               	goto	l9820
 12600  0022B2                     l9820:
 12601                           
 12602                           ; BSR set to: 0
 12603                           ;lab_final_alt.c: 2087: Update_Setup_Screen_Cursor(Select_Field);
 12604  0022B2  0100               	movlb	0	; () banked
 12605  0022B4  51C7               	movf	Do_Setup_Alarm_Time@Select_Field& (0+255),w,b
 12606  0022B6  ECF8  F011         	call	_Update_Setup_Screen_Cursor
 12607                           
 12608                           ;lab_final_alt.c: 2088: Key_Next_Flag = 0;
 12609  0022BA  0E00               	movlw	0
 12610  0022BC  0100               	movlb	0	; () banked
 12611  0022BE  6FC5               	movwf	Do_Setup_Alarm_Time@Key_Next_Flag& (0+255),b
 12612  0022C0  D000               	goto	l9824
 12613  0022C2                     l9824:
 12614                           
 12615                           ; BSR set to: 0
 12616                           ;lab_final_alt.c: 2089: }
 12617                           ;lab_final_alt.c: 2090: if (Key_Up_Flag == 1 )
 12618  0022C2  0100               	movlb	0	; () banked
 12619  0022C4  05C1               	decf	Do_Setup_Alarm_Time@Key_Up_Flag& (0+255),w,b
 12620  0022C6  B4D8               	btfsc	status,2,c
 12621  0022C8  D01A               	goto	l9848
 12622  0022CA  D02B               	goto	l9854
 12623                           
 12624                           ; BSR set to: 0
 12625                           ;lab_final_alt.c: 2091: {
 12626                           ;lab_final_alt.c: 2092: switch (Select_Field)
 12627  0022CC  D018               	goto	l9848
 12628  0022CE                     l9828:
 12629                           
 12630                           ; BSR set to: 0
 12631                           ;lab_final_alt.c: 2095: setup_alarm_hour++;
 12632  0022CE  2A5A               	incf	_setup_alarm_hour,f,c
 12633                           
 12634                           ; BSR set to: 0
 12635                           ;lab_final_alt.c: 2096: if (setup_alarm_hour == 24) setup_alarm_hour = 0;
 12636  0022D0  0E18               	movlw	24
 12637  0022D2  185A               	xorwf	_setup_alarm_hour,w,c
 12638  0022D4  A4D8               	btfss	status,2,c
 12639  0022D6  D01F               	goto	l9850
 12640                           
 12641                           ; BSR set to: 0
 12642  0022D8  0E00               	movlw	0
 12643  0022DA  6E5A               	movwf	_setup_alarm_hour,c
 12644                           
 12645                           ; BSR set to: 0
 12646                           ;lab_final_alt.c: 2097: break;
 12647  0022DC  D01C               	goto	l9850
 12648  0022DE                     l9834:
 12649                           
 12650                           ; BSR set to: 0
 12651                           ;lab_final_alt.c: 2099: setup_alarm_minute++;
 12652  0022DE  2A5B               	incf	_setup_alarm_minute,f,c
 12653                           
 12654                           ; BSR set to: 0
 12655                           ;lab_final_alt.c: 2100: if (setup_alarm_minute == 60) setup_alarm_minute = 0;
 12656  0022E0  0E3C               	movlw	60
 12657  0022E2  185B               	xorwf	_setup_alarm_minute,w,c
 12658  0022E4  A4D8               	btfss	status,2,c
 12659  0022E6  D017               	goto	l9850
 12660                           
 12661                           ; BSR set to: 0
 12662  0022E8  0E00               	movlw	0
 12663  0022EA  6E5B               	movwf	_setup_alarm_minute,c
 12664                           
 12665                           ; BSR set to: 0
 12666                           ;lab_final_alt.c: 2101: break;
 12667  0022EC  D014               	goto	l9850
 12668  0022EE                     l9840:
 12669                           
 12670                           ; BSR set to: 0
 12671                           ;lab_final_alt.c: 2103: setup_alarm_second++;
 12672  0022EE  2A5C               	incf	_setup_alarm_second,f,c
 12673                           
 12674                           ; BSR set to: 0
 12675                           ;lab_final_alt.c: 2104: if (setup_alarm_second == 60) setup_alarm_second = 0;
 12676  0022F0  0E3C               	movlw	60
 12677  0022F2  185C               	xorwf	_setup_alarm_second,w,c
 12678  0022F4  A4D8               	btfss	status,2,c
 12679  0022F6  D00F               	goto	l9850
 12680                           
 12681                           ; BSR set to: 0
 12682  0022F8  0E00               	movlw	0
 12683  0022FA  6E5C               	movwf	_setup_alarm_second,c
 12684                           
 12685                           ; BSR set to: 0
 12686                           ;lab_final_alt.c: 2108: }
 12687                           
 12688                           ; BSR set to: 0
 12689                           ;lab_final_alt.c: 2107: break;
 12690                           
 12691                           ;lab_final_alt.c: 2106: default:
 12692                           
 12693                           ; BSR set to: 0
 12694                           ;lab_final_alt.c: 2105: break;
 12695  0022FC  D00C               	goto	l9850
 12696  0022FE                     l9848:
 12697                           
 12698                           ; BSR set to: 0
 12699  0022FE  0100               	movlb	0	; () banked
 12700  002300  51C7               	movf	Do_Setup_Alarm_Time@Select_Field& (0+255),w,b
 12701                           
 12702                           ; Switch size 1, requested type "space"
 12703                           ; Number of cases is 3, Range of values is 0 to 2
 12704                           ; switch strategies available:
 12705                           ; Name         Instructions Cycles
 12706                           ; simple_byte           10     6 (average)
 12707                           ;	Chosen strategy is simple_byte
 12708  002302  0A00               	xorlw	0	; case 0
 12709  002304  B4D8               	btfsc	status,2,c
 12710  002306  D7E3               	goto	l9828
 12711  002308  0A01               	xorlw	1	; case 1
 12712  00230A  B4D8               	btfsc	status,2,c
 12713  00230C  D7E8               	goto	l9834
 12714  00230E  0A03               	xorlw	3	; case 2
 12715  002310  B4D8               	btfsc	status,2,c
 12716  002312  D7ED               	goto	l9840
 12717  002314  D000               	goto	l9850
 12718  002316                     l9850:
 12719                           
 12720                           ; BSR set to: 0
 12721                           ;lab_final_alt.c: 2109: Update_Setup_Alarm_Screen();
 12722  002316  ECC8  F01C         	call	_Update_Setup_Alarm_Screen	;wreg free
 12723                           
 12724                           ;lab_final_alt.c: 2110: Key_Up_Flag = 0;
 12725  00231A  0E00               	movlw	0
 12726  00231C  0100               	movlb	0	; () banked
 12727  00231E  6FC1               	movwf	Do_Setup_Alarm_Time@Key_Up_Flag& (0+255),b
 12728  002320  D000               	goto	l9854
 12729  002322                     l9854:
 12730                           
 12731                           ; BSR set to: 0
 12732                           ;lab_final_alt.c: 2111: }
 12733                           ;lab_final_alt.c: 2112: if (Key_Dn_Flag == 1 )
 12734  002322  0100               	movlb	0	; () banked
 12735  002324  05C2               	decf	Do_Setup_Alarm_Time@Key_Dn_Flag& (0+255),w,b
 12736  002326  B4D8               	btfsc	status,2,c
 12737  002328  D01A               	goto	l9878
 12738  00232A  D02B               	goto	l9884
 12739                           
 12740                           ; BSR set to: 0
 12741                           ;lab_final_alt.c: 2113: {
 12742                           ;lab_final_alt.c: 2114: switch (Select_Field)
 12743  00232C  D018               	goto	l9878
 12744  00232E                     l9858:
 12745                           
 12746                           ; BSR set to: 0
 12747                           ;lab_final_alt.c: 2117: if (setup_alarm_hour == 0) setup_alarm_hour = 23;
 12748  00232E  505A               	movf	_setup_alarm_hour,w,c
 12749  002330  A4D8               	btfss	status,2,c
 12750  002332  D003               	goto	l9862
 12751                           
 12752                           ; BSR set to: 0
 12753  002334  0E17               	movlw	23
 12754  002336  6E5A               	movwf	_setup_alarm_hour,c
 12755  002338  D01E               	goto	l9880
 12756  00233A                     l9862:
 12757                           
 12758                           ; BSR set to: 0
 12759                           ;lab_final_alt.c: 2118: else --setup_alarm_hour;
 12760  00233A  065A               	decf	_setup_alarm_hour,f,c
 12761                           
 12762                           ; BSR set to: 0
 12763                           ;lab_final_alt.c: 2119: break;
 12764  00233C  D01C               	goto	l9880
 12765  00233E                     l9864:
 12766                           
 12767                           ; BSR set to: 0
 12768                           ;lab_final_alt.c: 2121: if (setup_alarm_minute == 0) setup_alarm_minute = 59;
 12769  00233E  505B               	movf	_setup_alarm_minute,w,c
 12770  002340  A4D8               	btfss	status,2,c
 12771  002342  D003               	goto	l9868
 12772                           
 12773                           ; BSR set to: 0
 12774  002344  0E3B               	movlw	59
 12775  002346  6E5B               	movwf	_setup_alarm_minute,c
 12776  002348  D016               	goto	l9880
 12777  00234A                     l9868:
 12778                           
 12779                           ; BSR set to: 0
 12780                           ;lab_final_alt.c: 2122: else --setup_alarm_minute;
 12781  00234A  065B               	decf	_setup_alarm_minute,f,c
 12782                           
 12783                           ; BSR set to: 0
 12784                           ;lab_final_alt.c: 2123: break;
 12785  00234C  D014               	goto	l9880
 12786  00234E                     l9870:
 12787                           
 12788                           ; BSR set to: 0
 12789                           ;lab_final_alt.c: 2125: if (setup_alarm_second == 0) setup_alarm_second = 59;
 12790  00234E  505C               	movf	_setup_alarm_second,w,c
 12791  002350  A4D8               	btfss	status,2,c
 12792  002352  D003               	goto	l9874
 12793                           
 12794                           ; BSR set to: 0
 12795  002354  0E3B               	movlw	59
 12796  002356  6E5C               	movwf	_setup_alarm_second,c
 12797  002358  D00E               	goto	l9880
 12798  00235A                     l9874:
 12799                           
 12800                           ; BSR set to: 0
 12801                           ;lab_final_alt.c: 2126: else --setup_alarm_second;
 12802  00235A  065C               	decf	_setup_alarm_second,f,c
 12803                           
 12804                           ; BSR set to: 0
 12805                           ;lab_final_alt.c: 2130: }
 12806                           
 12807                           ; BSR set to: 0
 12808                           ;lab_final_alt.c: 2129: break;
 12809                           
 12810                           ;lab_final_alt.c: 2128: default:
 12811                           
 12812                           ; BSR set to: 0
 12813                           ;lab_final_alt.c: 2127: break;
 12814  00235C  D00C               	goto	l9880
 12815  00235E                     l9878:
 12816                           
 12817                           ; BSR set to: 0
 12818  00235E  0100               	movlb	0	; () banked
 12819  002360  51C7               	movf	Do_Setup_Alarm_Time@Select_Field& (0+255),w,b
 12820                           
 12821                           ; Switch size 1, requested type "space"
 12822                           ; Number of cases is 3, Range of values is 0 to 2
 12823                           ; switch strategies available:
 12824                           ; Name         Instructions Cycles
 12825                           ; simple_byte           10     6 (average)
 12826                           ;	Chosen strategy is simple_byte
 12827  002362  0A00               	xorlw	0	; case 0
 12828  002364  B4D8               	btfsc	status,2,c
 12829  002366  D7E3               	goto	l9858
 12830  002368  0A01               	xorlw	1	; case 1
 12831  00236A  B4D8               	btfsc	status,2,c
 12832  00236C  D7E8               	goto	l9864
 12833  00236E  0A03               	xorlw	3	; case 2
 12834  002370  B4D8               	btfsc	status,2,c
 12835  002372  D7ED               	goto	l9870
 12836  002374  D000               	goto	l9880
 12837  002376                     l9880:
 12838                           
 12839                           ; BSR set to: 0
 12840                           ;lab_final_alt.c: 2132: Update_Setup_Alarm_Screen();
 12841  002376  ECC8  F01C         	call	_Update_Setup_Alarm_Screen	;wreg free
 12842                           
 12843                           ;lab_final_alt.c: 2133: Key_Dn_Flag = 0;
 12844  00237A  0E00               	movlw	0
 12845  00237C  0100               	movlb	0	; () banked
 12846  00237E  6FC2               	movwf	Do_Setup_Alarm_Time@Key_Dn_Flag& (0+255),b
 12847  002380  D000               	goto	l9884
 12848  002382                     l9884:
 12849                           
 12850                           ; BSR set to: 0
 12851                           ;lab_final_alt.c: 2134: }
 12852                           ;lab_final_alt.c: 2135: if (Key_Done_Flag == 1 )
 12853  002382  0100               	movlb	0	; () banked
 12854  002384  05C4               	decf	Do_Setup_Alarm_Time@Key_Done_Flag& (0+255),w,b
 12855  002386  A4D8               	btfss	status,2,c
 12856  002388  D01E               	goto	l9898
 12857                           
 12858                           ; BSR set to: 0
 12859                           ;lab_final_alt.c: 2136: {
 12860                           ;lab_final_alt.c: 2137: alarm_second = dec_2_bcd(setup_alarm_second);
 12861  00238A  505C               	movf	_setup_alarm_second,w,c
 12862  00238C  ECB3  F021         	call	_dec_2_bcd
 12863  002390  502A               	movf	?_dec_2_bcd,w,c
 12864  002392  6E55               	movwf	_alarm_second,c
 12865                           
 12866                           ;lab_final_alt.c: 2138: alarm_minute = dec_2_bcd(setup_alarm_minute);
 12867  002394  505B               	movf	_setup_alarm_minute,w,c
 12868  002396  ECB3  F021         	call	_dec_2_bcd
 12869  00239A  502A               	movf	?_dec_2_bcd,w,c
 12870  00239C  6E54               	movwf	_alarm_minute,c
 12871                           
 12872                           ;lab_final_alt.c: 2139: alarm_hour = dec_2_bcd(setup_alarm_hour);
 12873  00239E  505A               	movf	_setup_alarm_hour,w,c
 12874  0023A0  ECB3  F021         	call	_dec_2_bcd
 12875  0023A4  502A               	movf	?_dec_2_bcd,w,c
 12876  0023A6  6E53               	movwf	_alarm_hour,c
 12877                           
 12878                           ;lab_final_alt.c: 2141: Key_Done_Flag = 0;
 12879  0023A8  0E00               	movlw	0
 12880  0023AA  0100               	movlb	0	; () banked
 12881  0023AC  6FC4               	movwf	Do_Setup_Alarm_Time@Key_Done_Flag& (0+255),b
 12882                           
 12883                           ; BSR set to: 0
 12884                           ;lab_final_alt.c: 2142: DS3231_Write_Alarm_1_Time(0x68);
 12885  0023AE  0E68               	movlw	104
 12886  0023B0  ECAD  F023         	call	_DS3231_Write_Alarm_1_Time
 12887                           
 12888                           ;lab_final_alt.c: 2143: DS3231_Read_Alarm_1_Time(0x68);
 12889  0023B4  0E68               	movlw	104
 12890  0023B6  ECCB  F022         	call	_DS3231_Read_Alarm_1_Time
 12891                           
 12892                           ;lab_final_alt.c: 2144: Initialize_Main_Screen();
 12893  0023BA  ECFB  F009         	call	_Initialize_Main_Screen	;wreg free
 12894                           
 12895                           ;lab_final_alt.c: 2145: Setup_Mode = 0;
 12896  0023BE  0E00               	movlw	0
 12897  0023C0  0100               	movlb	0	; () banked
 12898  0023C2  6FC6               	movwf	Do_Setup_Alarm_Time@Setup_Mode& (0+255),b
 12899  0023C4  D000               	goto	l9898
 12900  0023C6                     l9898:
 12901                           
 12902                           ; BSR set to: 0
 12903                           ;lab_final_alt.c: 2146: }
 12904                           ;lab_final_alt.c: 2148: if (Key_Abort_Flag == 1 )
 12905  0023C6  0100               	movlb	0	; () banked
 12906  0023C8  05C3               	decf	Do_Setup_Alarm_Time@Key_Abort_Flag& (0+255),w,b
 12907  0023CA  A4D8               	btfss	status,2,c
 12908  0023CC  D00C               	goto	l9908
 12909                           
 12910                           ; BSR set to: 0
 12911                           ;lab_final_alt.c: 2149: {
 12912                           ;lab_final_alt.c: 2150: Key_Abort_Flag = 0;
 12913  0023CE  0E00               	movlw	0
 12914  0023D0  0100               	movlb	0	; () banked
 12915  0023D2  6FC3               	movwf	Do_Setup_Alarm_Time@Key_Abort_Flag& (0+255),b
 12916                           
 12917                           ; BSR set to: 0
 12918                           ;lab_final_alt.c: 2151: DS3231_Read_Time(0x68);
 12919  0023D4  0E68               	movlw	104
 12920  0023D6  EC09  F020         	call	_DS3231_Read_Time
 12921                           
 12922                           ;lab_final_alt.c: 2152: Initialize_Main_Screen();
 12923  0023DA  ECFB  F009         	call	_Initialize_Main_Screen	;wreg free
 12924                           
 12925                           ;lab_final_alt.c: 2153: Setup_Mode = 0;
 12926  0023DE  0E00               	movlw	0
 12927  0023E0  0100               	movlb	0	; () banked
 12928  0023E2  6FC6               	movwf	Do_Setup_Alarm_Time@Setup_Mode& (0+255),b
 12929                           
 12930                           ; BSR set to: 0
 12931                           
 12932                           ; BSR set to: 0
 12933  0023E4  D000               	goto	l9908
 12934  0023E6                     l9908:
 12935  0023E6  0100               	movlb	0	; () banked
 12936  0023E8  05C6               	decf	Do_Setup_Alarm_Time@Setup_Mode& (0+255),w,b
 12937  0023EA  B4D8               	btfsc	status,2,c
 12938  0023EC  D701               	goto	l9784
 12939                           
 12940                           ; BSR set to: 0
 12941                           
 12942                           ; BSR set to: 0
 12943  0023EE  0012               	return		;funcret
 12944  0023F0                     __end_of_Do_Setup_Alarm_Time:
 12945                           	opt stack 0
 12946                           tblptru	equ	0xFF8
 12947                           tblptrh	equ	0xFF7
 12948                           tblptrl	equ	0xFF6
 12949                           tablat	equ	0xFF5
 12950                           prodh	equ	0xFF4
 12951                           prodl	equ	0xFF3
 12952                           intcon	equ	0xFF2
 12953                           intcon2	equ	0xFF1
 12954                           intcon3	equ	0xFF0
 12955                           postinc0	equ	0xFEE
 12956                           wreg	equ	0xFE8
 12957                           postdec1	equ	0xFE5
 12958                           fsr1l	equ	0xFE1
 12959                           postinc2	equ	0xFDE
 12960                           postdec2	equ	0xFDD
 12961                           fsr2h	equ	0xFDA
 12962                           fsr2l	equ	0xFD9
 12963                           status	equ	0xFD8
 12964                           
 12965 ;; *************** function _dec_2_bcd *****************
 12966 ;; Defined at:
 12967 ;;		line 2379 in file "lab_final_alt.c"
 12968 ;; Parameters:    Size  Location     Type
 12969 ;;  dec             1    wreg     unsigned char 
 12970 ;; Auto vars:     Size  Location     Type
 12971 ;;  dec             1   47[COMRAM] unsigned char 
 12972 ;;  bcd             2   45[COMRAM] int 
 12973 ;; Return value:  Size  Location     Type
 12974 ;;                  2   41[COMRAM] int 
 12975 ;; Registers used:
 12976 ;;		wreg, status,2, status,0, cstack
 12977 ;; Tracked objects:
 12978 ;;		On entry : 0/0
 12979 ;;		On exit  : 0/0
 12980 ;;		Unchanged: 0/0
 12981 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12982 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12983 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12984 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12985 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12986 ;;Total ram usage:        7 bytes
 12987 ;; Hardware stack levels used:    1
 12988 ;; Hardware stack levels required when called:    6
 12989 ;; This function calls:
 12990 ;;		___awdiv
 12991 ;;		___awmod
 12992 ;; This function is called by:
 12993 ;;		_Do_Setup_Time
 12994 ;;		_Do_Setup_Alarm_Time
 12995 ;; This function uses a non-reentrant model
 12996 ;;
 12997                           
 12998                           	psect	text41
 12999  004366                     __ptext41:
 13000                           	opt stack 0
 13001  004366                     _dec_2_bcd:
 13002                           	opt stack 23
 13003                           
 13004                           ; BSR set to: 0
 13005                           ;incstack = 0
 13006                           ;dec_2_bcd@dec stored from wreg
 13007  004366  6E30               	movwf	dec_2_bcd@dec,c
 13008                           
 13009                           ;lab_final_alt.c: 2381: int bcd;
 13010                           ;lab_final_alt.c: 2382: bcd = ((dec / 10) << 4) + (dec % 10);
 13011  004368  C030  F022         	movff	dec_2_bcd@dec,___awdiv@dividend
 13012  00436C  6A23               	clrf	___awdiv@dividend+1,c
 13013  00436E  0E00               	movlw	0
 13014  004370  6E25               	movwf	___awdiv@divisor+1,c
 13015  004372  0E0A               	movlw	10
 13016  004374  6E24               	movwf	___awdiv@divisor,c
 13017  004376  EC92  F01D         	call	___awdiv	;wreg free
 13018  00437A  C022  F02C         	movff	?___awdiv,??_dec_2_bcd
 13019  00437E  C023  F02D         	movff	?___awdiv+1,??_dec_2_bcd+1
 13020  004382  3A2C               	swapf	??_dec_2_bcd,f,c
 13021  004384  3A2D               	swapf	??_dec_2_bcd+1,f,c
 13022  004386  0EF0               	movlw	240
 13023  004388  162D               	andwf	??_dec_2_bcd+1,f,c
 13024  00438A  502C               	movf	??_dec_2_bcd,w,c
 13025  00438C  0B0F               	andlw	15
 13026  00438E  122D               	iorwf	??_dec_2_bcd+1,f,c
 13027  004390  0EF0               	movlw	240
 13028  004392  162C               	andwf	??_dec_2_bcd,f,c
 13029  004394  C030  F01C         	movff	dec_2_bcd@dec,___awmod@dividend
 13030  004398  6A1D               	clrf	___awmod@dividend+1,c
 13031  00439A  0E00               	movlw	0
 13032  00439C  6E1F               	movwf	___awmod@divisor+1,c
 13033  00439E  0E0A               	movlw	10
 13034  0043A0  6E1E               	movwf	___awmod@divisor,c
 13035  0043A2  ECC8  F01F         	call	___awmod	;wreg free
 13036  0043A6  501C               	movf	?___awmod,w,c
 13037  0043A8  242C               	addwf	??_dec_2_bcd,w,c
 13038  0043AA  6E2E               	movwf	dec_2_bcd@bcd,c
 13039  0043AC  501D               	movf	?___awmod+1,w,c
 13040  0043AE  202D               	addwfc	??_dec_2_bcd+1,w,c
 13041  0043B0  6E2F               	movwf	dec_2_bcd@bcd+1,c
 13042                           
 13043                           ;lab_final_alt.c: 2383: return bcd;
 13044  0043B2  C02E  F02A         	movff	dec_2_bcd@bcd,?_dec_2_bcd
 13045  0043B6  C02F  F02B         	movff	dec_2_bcd@bcd+1,?_dec_2_bcd+1
 13046  0043BA  D000               	goto	l768
 13047  0043BC                     l768:
 13048  0043BC  0012               	return		;funcret
 13049  0043BE                     __end_of_dec_2_bcd:
 13050                           	opt stack 0
 13051                           tblptru	equ	0xFF8
 13052                           tblptrh	equ	0xFF7
 13053                           tblptrl	equ	0xFF6
 13054                           tablat	equ	0xFF5
 13055                           prodh	equ	0xFF4
 13056                           prodl	equ	0xFF3
 13057                           intcon	equ	0xFF2
 13058                           intcon2	equ	0xFF1
 13059                           intcon3	equ	0xFF0
 13060                           postinc0	equ	0xFEE
 13061                           wreg	equ	0xFE8
 13062                           postdec1	equ	0xFE5
 13063                           fsr1l	equ	0xFE1
 13064                           postinc2	equ	0xFDE
 13065                           postdec2	equ	0xFDD
 13066                           fsr2h	equ	0xFDA
 13067                           fsr2l	equ	0xFD9
 13068                           status	equ	0xFD8
 13069                           
 13070 ;; *************** function _bcd_2_dec *****************
 13071 ;; Defined at:
 13072 ;;		line 2373 in file "lab_final_alt.c"
 13073 ;; Parameters:    Size  Location     Type
 13074 ;;  bcd             1    wreg     unsigned char 
 13075 ;; Auto vars:     Size  Location     Type
 13076 ;;  bcd             1   33[COMRAM] unsigned char 
 13077 ;;  dec             2   31[COMRAM] int 
 13078 ;; Return value:  Size  Location     Type
 13079 ;;                  2   27[COMRAM] int 
 13080 ;; Registers used:
 13081 ;;		wreg, status,2, status,0, prodl, prodh
 13082 ;; Tracked objects:
 13083 ;;		On entry : 0/0
 13084 ;;		On exit  : 0/0
 13085 ;;		Unchanged: 0/0
 13086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13087 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13088 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13089 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13090 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13091 ;;Total ram usage:        7 bytes
 13092 ;; Hardware stack levels used:    1
 13093 ;; Hardware stack levels required when called:    5
 13094 ;; This function calls:
 13095 ;;		Nothing
 13096 ;; This function is called by:
 13097 ;;		_Do_Setup_Time
 13098 ;;		_Do_Setup_Alarm_Time
 13099 ;; This function uses a non-reentrant model
 13100 ;;
 13101                           
 13102                           	psect	text42
 13103  0048FC                     __ptext42:
 13104                           	opt stack 0
 13105  0048FC                     _bcd_2_dec:
 13106                           	opt stack 24
 13107                           
 13108                           ;incstack = 0
 13109                           ;bcd_2_dec@bcd stored from wreg
 13110  0048FC  6E22               	movwf	bcd_2_dec@bcd,c
 13111                           
 13112                           ;lab_final_alt.c: 2375: int dec;
 13113                           ;lab_final_alt.c: 2376: dec = ((bcd>> 4) * 10) + (bcd & 0x0f);
 13114  0048FE  C022  F01E         	movff	bcd_2_dec@bcd,??_bcd_2_dec
 13115  004902  0E0F               	movlw	15
 13116  004904  161E               	andwf	??_bcd_2_dec,f,c
 13117  004906  C022  F01F         	movff	bcd_2_dec@bcd,??_bcd_2_dec+1
 13118  00490A  3A1F               	swapf	??_bcd_2_dec+1,f,c
 13119  00490C  0E0F               	movlw	15
 13120  00490E  161F               	andwf	??_bcd_2_dec+1,f,c
 13121  004910  501F               	movf	??_bcd_2_dec+1,w,c
 13122  004912  0D0A               	mullw	10
 13123  004914  501E               	movf	??_bcd_2_dec,w,c
 13124  004916  24F3               	addwf	prodl,w,c
 13125  004918  6E20               	movwf	bcd_2_dec@dec,c
 13126  00491A  0E00               	movlw	0
 13127  00491C  20F4               	addwfc	prodh,w,c
 13128  00491E  6E21               	movwf	bcd_2_dec@dec+1,c
 13129                           
 13130                           ;lab_final_alt.c: 2377: return dec;
 13131  004920  C020  F01C         	movff	bcd_2_dec@dec,?_bcd_2_dec
 13132  004924  C021  F01D         	movff	bcd_2_dec@dec+1,?_bcd_2_dec+1
 13133  004928  D000               	goto	l765
 13134  00492A                     l765:
 13135  00492A  0012               	return		;funcret
 13136  00492C                     __end_of_bcd_2_dec:
 13137                           	opt stack 0
 13138                           tblptru	equ	0xFF8
 13139                           tblptrh	equ	0xFF7
 13140                           tblptrl	equ	0xFF6
 13141                           tablat	equ	0xFF5
 13142                           prodh	equ	0xFF4
 13143                           prodl	equ	0xFF3
 13144                           intcon	equ	0xFF2
 13145                           intcon2	equ	0xFF1
 13146                           intcon3	equ	0xFF0
 13147                           postinc0	equ	0xFEE
 13148                           wreg	equ	0xFE8
 13149                           postdec1	equ	0xFE5
 13150                           fsr1l	equ	0xFE1
 13151                           postinc2	equ	0xFDE
 13152                           postdec2	equ	0xFDD
 13153                           fsr2h	equ	0xFDA
 13154                           fsr2l	equ	0xFD9
 13155                           status	equ	0xFD8
 13156                           
 13157 ;; *************** function _Update_Setup_Screen_Cursor *****************
 13158 ;; Defined at:
 13159 ;;		line 1858 in file "lab_final_alt.c"
 13160 ;; Parameters:    Size  Location     Type
 13161 ;;  cursor_posit    1    wreg     unsigned char 
 13162 ;; Auto vars:     Size  Location     Type
 13163 ;;  cursor_posit    1   56[COMRAM] unsigned char 
 13164 ;;  xinc            1   58[COMRAM] unsigned char 
 13165 ;;  yinc            1   57[COMRAM] unsigned char 
 13166 ;; Return value:  Size  Location     Type
 13167 ;;		None               void
 13168 ;; Registers used:
 13169 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 13170 ;; Tracked objects:
 13171 ;;		On entry : 0/0
 13172 ;;		On exit  : 0/0
 13173 ;;		Unchanged: 0/0
 13174 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13175 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13176 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13177 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13178 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13179 ;;Total ram usage:        3 bytes
 13180 ;; Hardware stack levels used:    1
 13181 ;; Hardware stack levels required when called:   10
 13182 ;; This function calls:
 13183 ;;		_fillRect
 13184 ;; This function is called by:
 13185 ;;		_Do_Setup_Time
 13186 ;;		_Do_Setup_Alarm_Time
 13187 ;; This function uses a non-reentrant model
 13188 ;;
 13189                           
 13190                           	psect	text43
 13191  0023F0                     __ptext43:
 13192                           	opt stack 0
 13193  0023F0                     _Update_Setup_Screen_Cursor:
 13194                           	opt stack 19
 13195                           
 13196                           ;incstack = 0
 13197                           ;Update_Setup_Screen_Cursor@cursor_position stored from wreg
 13198  0023F0  6E39               	movwf	Update_Setup_Screen_Cursor@cursor_position,c
 13199                           
 13200                           ;lab_final_alt.c: 1860: char xinc = 36;
 13201  0023F2  0E24               	movlw	36
 13202  0023F4  6E3B               	movwf	Update_Setup_Screen_Cursor@xinc,c
 13203                           
 13204                           ;lab_final_alt.c: 1861: char yinc = 30;
 13205  0023F6  0E1E               	movlw	30
 13206  0023F8  6E3A               	movwf	Update_Setup_Screen_Cursor@yinc,c
 13207                           
 13208                           ;lab_final_alt.c: 1862: switch (cursor_position)
 13209  0023FA  D0C2               	goto	l8588
 13210  0023FC                     l8566:
 13211                           
 13212                           ;lab_final_alt.c: 1865: fillRect(15-1+2*xinc, 56+16+yinc, 25,2,0x0000);
 13213  0023FC  503A               	movf	Update_Setup_Screen_Cursor@yinc,w,c
 13214  0023FE  0F48               	addlw	72
 13215  002400  6E2E               	movwf	fillRect@y,c
 13216  002402  0E19               	movlw	25
 13217  002404  6E2F               	movwf	fillRect@w,c
 13218  002406  0E02               	movlw	2
 13219  002408  6E30               	movwf	fillRect@h,c
 13220  00240A  0E00               	movlw	0
 13221  00240C  6E32               	movwf	fillRect@color+1,c
 13222  00240E  0E00               	movlw	0
 13223  002410  6E31               	movwf	fillRect@color,c
 13224  002412  503B               	movf	Update_Setup_Screen_Cursor@xinc,w,c
 13225  002414  0D02               	mullw	2
 13226  002416  50F3               	movf	prodl,w,c
 13227  002418  0F0E               	addlw	14
 13228  00241A  ECA6  F022         	call	_fillRect
 13229                           
 13230                           ;lab_final_alt.c: 1866: fillRect(15-1+2*xinc, 56+16, 25,2,0x0000);
 13231  00241E  0E48               	movlw	72
 13232  002420  6E2E               	movwf	fillRect@y,c
 13233  002422  0E19               	movlw	25
 13234  002424  6E2F               	movwf	fillRect@w,c
 13235  002426  0E02               	movlw	2
 13236  002428  6E30               	movwf	fillRect@h,c
 13237  00242A  0E00               	movlw	0
 13238  00242C  6E32               	movwf	fillRect@color+1,c
 13239  00242E  0E00               	movlw	0
 13240  002430  6E31               	movwf	fillRect@color,c
 13241  002432  503B               	movf	Update_Setup_Screen_Cursor@xinc,w,c
 13242  002434  0D02               	mullw	2
 13243  002436  50F3               	movf	prodl,w,c
 13244  002438  0F0E               	addlw	14
 13245  00243A  ECA6  F022         	call	_fillRect
 13246                           
 13247                           ;lab_final_alt.c: 1867: fillRect(15-1, 56+16, 25,2,0x07FF);
 13248  00243E  0E48               	movlw	72
 13249  002440  6E2E               	movwf	fillRect@y,c
 13250  002442  0E19               	movlw	25
 13251  002444  6E2F               	movwf	fillRect@w,c
 13252  002446  0E02               	movlw	2
 13253  002448  6E30               	movwf	fillRect@h,c
 13254  00244A  0E07               	movlw	7
 13255  00244C  6E32               	movwf	fillRect@color+1,c
 13256  00244E  6831               	setf	fillRect@color,c
 13257  002450  0E0E               	movlw	14
 13258  002452  ECA6  F022         	call	_fillRect
 13259                           
 13260                           ;lab_final_alt.c: 1868: break;
 13261  002456  D0A8               	goto	l610
 13262  002458                     l8570:
 13263                           
 13264                           ;lab_final_alt.c: 1871: fillRect(15-1, 56+16, 25,2,0x0000);
 13265  002458  0E48               	movlw	72
 13266  00245A  6E2E               	movwf	fillRect@y,c
 13267  00245C  0E19               	movlw	25
 13268  00245E  6E2F               	movwf	fillRect@w,c
 13269  002460  0E02               	movlw	2
 13270  002462  6E30               	movwf	fillRect@h,c
 13271  002464  0E00               	movlw	0
 13272  002466  6E32               	movwf	fillRect@color+1,c
 13273  002468  0E00               	movlw	0
 13274  00246A  6E31               	movwf	fillRect@color,c
 13275  00246C  0E0E               	movlw	14
 13276  00246E  ECA6  F022         	call	_fillRect
 13277                           
 13278                           ;lab_final_alt.c: 1872: fillRect(15-1+xinc, 56+16, 25,2,0x07FF);
 13279  002472  0E48               	movlw	72
 13280  002474  6E2E               	movwf	fillRect@y,c
 13281  002476  0E19               	movlw	25
 13282  002478  6E2F               	movwf	fillRect@w,c
 13283  00247A  0E02               	movlw	2
 13284  00247C  6E30               	movwf	fillRect@h,c
 13285  00247E  0E07               	movlw	7
 13286  002480  6E32               	movwf	fillRect@color+1,c
 13287  002482  6831               	setf	fillRect@color,c
 13288  002484  503B               	movf	Update_Setup_Screen_Cursor@xinc,w,c
 13289  002486  0F0E               	addlw	14
 13290  002488  ECA6  F022         	call	_fillRect
 13291                           
 13292                           ;lab_final_alt.c: 1873: break;
 13293  00248C  D08D               	goto	l610
 13294  00248E                     l8572:
 13295                           
 13296                           ;lab_final_alt.c: 1876: fillRect(15-1+xinc, 56+16, 25,2,0x0000);
 13297  00248E  0E48               	movlw	72
 13298  002490  6E2E               	movwf	fillRect@y,c
 13299  002492  0E19               	movlw	25
 13300  002494  6E2F               	movwf	fillRect@w,c
 13301  002496  0E02               	movlw	2
 13302  002498  6E30               	movwf	fillRect@h,c
 13303  00249A  0E00               	movlw	0
 13304  00249C  6E32               	movwf	fillRect@color+1,c
 13305  00249E  0E00               	movlw	0
 13306  0024A0  6E31               	movwf	fillRect@color,c
 13307  0024A2  503B               	movf	Update_Setup_Screen_Cursor@xinc,w,c
 13308  0024A4  0F0E               	addlw	14
 13309  0024A6  ECA6  F022         	call	_fillRect
 13310                           
 13311                           ;lab_final_alt.c: 1877: fillRect(15-1+2*xinc, 56+16, 25,2,0x07FF);
 13312  0024AA  0E48               	movlw	72
 13313  0024AC  6E2E               	movwf	fillRect@y,c
 13314  0024AE  0E19               	movlw	25
 13315  0024B0  6E2F               	movwf	fillRect@w,c
 13316  0024B2  0E02               	movlw	2
 13317  0024B4  6E30               	movwf	fillRect@h,c
 13318  0024B6  0E07               	movlw	7
 13319  0024B8  6E32               	movwf	fillRect@color+1,c
 13320  0024BA  6831               	setf	fillRect@color,c
 13321  0024BC  503B               	movf	Update_Setup_Screen_Cursor@xinc,w,c
 13322  0024BE  0D02               	mullw	2
 13323  0024C0  50F3               	movf	prodl,w,c
 13324  0024C2  0F0E               	addlw	14
 13325  0024C4  ECA6  F022         	call	_fillRect
 13326                           
 13327                           ;lab_final_alt.c: 1878: break;
 13328  0024C8  D06F               	goto	l610
 13329  0024CA                     l8576:
 13330                           
 13331                           ;lab_final_alt.c: 1881: fillRect(15-1+2*xinc, 56+16, 25,2,0x0000);
 13332  0024CA  0E48               	movlw	72
 13333  0024CC  6E2E               	movwf	fillRect@y,c
 13334  0024CE  0E19               	movlw	25
 13335  0024D0  6E2F               	movwf	fillRect@w,c
 13336  0024D2  0E02               	movlw	2
 13337  0024D4  6E30               	movwf	fillRect@h,c
 13338  0024D6  0E00               	movlw	0
 13339  0024D8  6E32               	movwf	fillRect@color+1,c
 13340  0024DA  0E00               	movlw	0
 13341  0024DC  6E31               	movwf	fillRect@color,c
 13342  0024DE  503B               	movf	Update_Setup_Screen_Cursor@xinc,w,c
 13343  0024E0  0D02               	mullw	2
 13344  0024E2  50F3               	movf	prodl,w,c
 13345  0024E4  0F0E               	addlw	14
 13346  0024E6  ECA6  F022         	call	_fillRect
 13347                           
 13348                           ;lab_final_alt.c: 1882: fillRect(15-1, 56+16+yinc, 25,2,0x07FF);
 13349  0024EA  503A               	movf	Update_Setup_Screen_Cursor@yinc,w,c
 13350  0024EC  0F48               	addlw	72
 13351  0024EE  6E2E               	movwf	fillRect@y,c
 13352  0024F0  0E19               	movlw	25
 13353  0024F2  6E2F               	movwf	fillRect@w,c
 13354  0024F4  0E02               	movlw	2
 13355  0024F6  6E30               	movwf	fillRect@h,c
 13356  0024F8  0E07               	movlw	7
 13357  0024FA  6E32               	movwf	fillRect@color+1,c
 13358  0024FC  6831               	setf	fillRect@color,c
 13359  0024FE  0E0E               	movlw	14
 13360  002500  ECA6  F022         	call	_fillRect
 13361                           
 13362                           ;lab_final_alt.c: 1883: break;
 13363  002504  D051               	goto	l610
 13364  002506                     l8580:
 13365                           
 13366                           ;lab_final_alt.c: 1886: fillRect(15-1, 56+16+yinc, 25,2,0x0000);
 13367  002506  503A               	movf	Update_Setup_Screen_Cursor@yinc,w,c
 13368  002508  0F48               	addlw	72
 13369  00250A  6E2E               	movwf	fillRect@y,c
 13370  00250C  0E19               	movlw	25
 13371  00250E  6E2F               	movwf	fillRect@w,c
 13372  002510  0E02               	movlw	2
 13373  002512  6E30               	movwf	fillRect@h,c
 13374  002514  0E00               	movlw	0
 13375  002516  6E32               	movwf	fillRect@color+1,c
 13376  002518  0E00               	movlw	0
 13377  00251A  6E31               	movwf	fillRect@color,c
 13378  00251C  0E0E               	movlw	14
 13379  00251E  ECA6  F022         	call	_fillRect
 13380                           
 13381                           ;lab_final_alt.c: 1887: fillRect(15-1+xinc, 56+16+yinc, 25,2,0x07FF);
 13382  002522  503A               	movf	Update_Setup_Screen_Cursor@yinc,w,c
 13383  002524  0F48               	addlw	72
 13384  002526  6E2E               	movwf	fillRect@y,c
 13385  002528  0E19               	movlw	25
 13386  00252A  6E2F               	movwf	fillRect@w,c
 13387  00252C  0E02               	movlw	2
 13388  00252E  6E30               	movwf	fillRect@h,c
 13389  002530  0E07               	movlw	7
 13390  002532  6E32               	movwf	fillRect@color+1,c
 13391  002534  6831               	setf	fillRect@color,c
 13392  002536  503B               	movf	Update_Setup_Screen_Cursor@xinc,w,c
 13393  002538  0F0E               	addlw	14
 13394  00253A  ECA6  F022         	call	_fillRect
 13395                           
 13396                           ;lab_final_alt.c: 1888: break;
 13397  00253E  D034               	goto	l610
 13398  002540                     l8582:
 13399                           
 13400                           ;lab_final_alt.c: 1890: fillRect(15-1+xinc, 56+16+yinc, 25,2,0x0000);
 13401  002540  503A               	movf	Update_Setup_Screen_Cursor@yinc,w,c
 13402  002542  0F48               	addlw	72
 13403  002544  6E2E               	movwf	fillRect@y,c
 13404  002546  0E19               	movlw	25
 13405  002548  6E2F               	movwf	fillRect@w,c
 13406  00254A  0E02               	movlw	2
 13407  00254C  6E30               	movwf	fillRect@h,c
 13408  00254E  0E00               	movlw	0
 13409  002550  6E32               	movwf	fillRect@color+1,c
 13410  002552  0E00               	movlw	0
 13411  002554  6E31               	movwf	fillRect@color,c
 13412  002556  503B               	movf	Update_Setup_Screen_Cursor@xinc,w,c
 13413  002558  0F0E               	addlw	14
 13414  00255A  ECA6  F022         	call	_fillRect
 13415                           
 13416                           ;lab_final_alt.c: 1891: fillRect(15-1+2*xinc, 56+16+yinc, 25,2,0x07FF);
 13417  00255E  503A               	movf	Update_Setup_Screen_Cursor@yinc,w,c
 13418  002560  0F48               	addlw	72
 13419  002562  6E2E               	movwf	fillRect@y,c
 13420  002564  0E19               	movlw	25
 13421  002566  6E2F               	movwf	fillRect@w,c
 13422  002568  0E02               	movlw	2
 13423  00256A  6E30               	movwf	fillRect@h,c
 13424  00256C  0E07               	movlw	7
 13425  00256E  6E32               	movwf	fillRect@color+1,c
 13426  002570  6831               	setf	fillRect@color,c
 13427  002572  503B               	movf	Update_Setup_Screen_Cursor@xinc,w,c
 13428  002574  0D02               	mullw	2
 13429  002576  50F3               	movf	prodl,w,c
 13430  002578  0F0E               	addlw	14
 13431  00257A  ECA6  F022         	call	_fillRect
 13432                           
 13433                           ;lab_final_alt.c: 1893: }
 13434                           
 13435                           ;lab_final_alt.c: 1892: break;
 13436  00257E  D014               	goto	l610
 13437  002580                     l8588:
 13438  002580  5039               	movf	Update_Setup_Screen_Cursor@cursor_position,w,c
 13439                           
 13440                           ; Switch size 1, requested type "space"
 13441                           ; Number of cases is 6, Range of values is 0 to 5
 13442                           ; switch strategies available:
 13443                           ; Name         Instructions Cycles
 13444                           ; simple_byte           19    10 (average)
 13445                           ;	Chosen strategy is simple_byte
 13446  002582  0A00               	xorlw	0	; case 0
 13447  002584  B4D8               	btfsc	status,2,c
 13448  002586  D73A               	goto	l8566
 13449  002588  0A01               	xorlw	1	; case 1
 13450  00258A  B4D8               	btfsc	status,2,c
 13451  00258C  D765               	goto	l8570
 13452  00258E  0A03               	xorlw	3	; case 2
 13453  002590  B4D8               	btfsc	status,2,c
 13454  002592  D77D               	goto	l8572
 13455  002594  0A01               	xorlw	1	; case 3
 13456  002596  B4D8               	btfsc	status,2,c
 13457  002598  D798               	goto	l8576
 13458  00259A  0A07               	xorlw	7	; case 4
 13459  00259C  B4D8               	btfsc	status,2,c
 13460  00259E  D7B3               	goto	l8580
 13461  0025A0  0A01               	xorlw	1	; case 5
 13462  0025A2  B4D8               	btfsc	status,2,c
 13463  0025A4  D7CD               	goto	l8582
 13464  0025A6  D000               	goto	l610
 13465  0025A8                     l610:
 13466  0025A8  0012               	return		;funcret
 13467  0025AA                     __end_of_Update_Setup_Screen_Cursor:
 13468                           	opt stack 0
 13469                           tblptru	equ	0xFF8
 13470                           tblptrh	equ	0xFF7
 13471                           tblptrl	equ	0xFF6
 13472                           tablat	equ	0xFF5
 13473                           prodh	equ	0xFF4
 13474                           prodl	equ	0xFF3
 13475                           intcon	equ	0xFF2
 13476                           intcon2	equ	0xFF1
 13477                           intcon3	equ	0xFF0
 13478                           postinc0	equ	0xFEE
 13479                           wreg	equ	0xFE8
 13480                           postdec1	equ	0xFE5
 13481                           fsr1l	equ	0xFE1
 13482                           postinc2	equ	0xFDE
 13483                           postdec2	equ	0xFDD
 13484                           fsr2h	equ	0xFDA
 13485                           fsr2l	equ	0xFD9
 13486                           status	equ	0xFD8
 13487                           
 13488 ;; *************** function _Update_Setup_Alarm_Screen *****************
 13489 ;; Defined at:
 13490 ;;		line 2042 in file "lab_final_alt.c"
 13491 ;; Parameters:    Size  Location     Type
 13492 ;;		None
 13493 ;; Auto vars:     Size  Location     Type
 13494 ;;		None
 13495 ;; Return value:  Size  Location     Type
 13496 ;;		None               void
 13497 ;; Registers used:
 13498 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13499 ;; Tracked objects:
 13500 ;;		On entry : 0/0
 13501 ;;		On exit  : 0/0
 13502 ;;		Unchanged: 0/0
 13503 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13504 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13505 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13506 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13507 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13508 ;;Total ram usage:        0 bytes
 13509 ;; Hardware stack levels used:    1
 13510 ;; Hardware stack levels required when called:   12
 13511 ;; This function calls:
 13512 ;;		___awdiv
 13513 ;;		___awmod
 13514 ;;		_drawtext
 13515 ;; This function is called by:
 13516 ;;		_Do_Setup_Alarm_Time
 13517 ;; This function uses a non-reentrant model
 13518 ;;
 13519                           
 13520                           	psect	text44
 13521  003990                     __ptext44:
 13522                           	opt stack 0
 13523  003990                     _Update_Setup_Alarm_Screen:
 13524                           	opt stack 17
 13525                           
 13526                           ;lab_final_alt.c: 2044: setup_alarm_time[0] = (setup_alarm_hour/10) + '0';
 13527                           
 13528                           ;incstack = 0
 13529  003990  C05A  F022         	movff	_setup_alarm_hour,___awdiv@dividend
 13530  003994  6A23               	clrf	___awdiv@dividend+1,c
 13531  003996  0E00               	movlw	0
 13532  003998  6E25               	movwf	___awdiv@divisor+1,c
 13533  00399A  0E0A               	movlw	10
 13534  00399C  6E24               	movwf	___awdiv@divisor,c
 13535  00399E  EC92  F01D         	call	___awdiv	;wreg free
 13536  0039A2  5022               	movf	?___awdiv,w,c
 13537  0039A4  0F30               	addlw	48
 13538  0039A6  0101               	movlb	1	; () banked
 13539  0039A8  6F1F               	movwf	_setup_alarm_time& (0+255),b
 13540                           
 13541                           ;lab_final_alt.c: 2045: setup_alarm_time[1] = (setup_alarm_hour%10) + '0';
 13542  0039AA  C05A  F01C         	movff	_setup_alarm_hour,___awmod@dividend
 13543  0039AE  6A1D               	clrf	___awmod@dividend+1,c
 13544  0039B0  0E00               	movlw	0
 13545  0039B2  6E1F               	movwf	___awmod@divisor+1,c
 13546  0039B4  0E0A               	movlw	10
 13547  0039B6  6E1E               	movwf	___awmod@divisor,c
 13548  0039B8  ECC8  F01F         	call	___awmod	;wreg free
 13549  0039BC  501C               	movf	?___awmod,w,c
 13550  0039BE  0F30               	addlw	48
 13551  0039C0  0101               	movlb	1	; () banked
 13552  0039C2  6F20               	movwf	(_setup_alarm_time+1)& (0+255),b
 13553                           
 13554                           ;lab_final_alt.c: 2046: setup_alarm_time[3] = (setup_alarm_minute/10) + '0';
 13555  0039C4  C05B  F022         	movff	_setup_alarm_minute,___awdiv@dividend
 13556  0039C8  6A23               	clrf	___awdiv@dividend+1,c
 13557  0039CA  0E00               	movlw	0
 13558  0039CC  6E25               	movwf	___awdiv@divisor+1,c
 13559  0039CE  0E0A               	movlw	10
 13560  0039D0  6E24               	movwf	___awdiv@divisor,c
 13561  0039D2  EC92  F01D         	call	___awdiv	;wreg free
 13562  0039D6  5022               	movf	?___awdiv,w,c
 13563  0039D8  0F30               	addlw	48
 13564  0039DA  0101               	movlb	1	; () banked
 13565  0039DC  6F22               	movwf	(_setup_alarm_time+3)& (0+255),b
 13566                           
 13567                           ;lab_final_alt.c: 2047: setup_alarm_time[4] = (setup_alarm_minute %10)+ '0';
 13568  0039DE  C05B  F01C         	movff	_setup_alarm_minute,___awmod@dividend
 13569  0039E2  6A1D               	clrf	___awmod@dividend+1,c
 13570  0039E4  0E00               	movlw	0
 13571  0039E6  6E1F               	movwf	___awmod@divisor+1,c
 13572  0039E8  0E0A               	movlw	10
 13573  0039EA  6E1E               	movwf	___awmod@divisor,c
 13574  0039EC  ECC8  F01F         	call	___awmod	;wreg free
 13575  0039F0  501C               	movf	?___awmod,w,c
 13576  0039F2  0F30               	addlw	48
 13577  0039F4  0101               	movlb	1	; () banked
 13578  0039F6  6F23               	movwf	(_setup_alarm_time+4)& (0+255),b
 13579                           
 13580                           ;lab_final_alt.c: 2048: setup_alarm_time[6] = (setup_alarm_second/10) + '0';
 13581  0039F8  C05C  F022         	movff	_setup_alarm_second,___awdiv@dividend
 13582  0039FC  6A23               	clrf	___awdiv@dividend+1,c
 13583  0039FE  0E00               	movlw	0
 13584  003A00  6E25               	movwf	___awdiv@divisor+1,c
 13585  003A02  0E0A               	movlw	10
 13586  003A04  6E24               	movwf	___awdiv@divisor,c
 13587  003A06  EC92  F01D         	call	___awdiv	;wreg free
 13588  003A0A  5022               	movf	?___awdiv,w,c
 13589  003A0C  0F30               	addlw	48
 13590  003A0E  0101               	movlb	1	; () banked
 13591  003A10  6F25               	movwf	(_setup_alarm_time+6)& (0+255),b
 13592                           
 13593                           ;lab_final_alt.c: 2049: setup_alarm_time[7] = (setup_alarm_second %10)+ '0';
 13594  003A12  C05C  F01C         	movff	_setup_alarm_second,___awmod@dividend
 13595  003A16  6A1D               	clrf	___awmod@dividend+1,c
 13596  003A18  0E00               	movlw	0
 13597  003A1A  6E1F               	movwf	___awmod@divisor+1,c
 13598  003A1C  0E0A               	movlw	10
 13599  003A1E  6E1E               	movwf	___awmod@divisor,c
 13600  003A20  ECC8  F01F         	call	___awmod	;wreg free
 13601  003A24  501C               	movf	?___awmod,w,c
 13602  003A26  0F30               	addlw	48
 13603  003A28  0101               	movlb	1	; () banked
 13604  003A2A  6F26               	movwf	(_setup_alarm_time+7)& (0+255),b
 13605                           
 13606                           ; BSR set to: 1
 13607                           ;lab_final_alt.c: 2051: drawtext(15, 56, setup_alarm_time, 0x07FF, 0x0000, 2);
 13608  003A2C  0E38               	movlw	56
 13609  003A2E  0100               	movlb	0	; () banked
 13610  003A30  6FB2               	movwf	drawtext@y& (0+255),b
 13611  003A32  0E1F               	movlw	low _setup_alarm_time
 13612  003A34  0100               	movlb	0	; () banked
 13613  003A36  6FB3               	movwf	drawtext@_text& (0+255),b
 13614  003A38  0E01               	movlw	high _setup_alarm_time
 13615  003A3A  0100               	movlb	0	; () banked
 13616  003A3C  6FB4               	movwf	(drawtext@_text+1)& (0+255),b
 13617  003A3E  0E07               	movlw	7
 13618  003A40  0100               	movlb	0	; () banked
 13619  003A42  6FB6               	movwf	(drawtext@color+1)& (0+255),b
 13620  003A44  69B5               	setf	drawtext@color& (0+255),b
 13621  003A46  0E00               	movlw	0
 13622  003A48  0100               	movlb	0	; () banked
 13623  003A4A  6FB8               	movwf	(drawtext@bg+1)& (0+255),b
 13624  003A4C  0E00               	movlw	0
 13625  003A4E  6FB7               	movwf	drawtext@bg& (0+255),b
 13626  003A50  0E02               	movlw	2
 13627  003A52  0100               	movlb	0	; () banked
 13628  003A54  6FB9               	movwf	drawtext@size& (0+255),b
 13629  003A56  0E0F               	movlw	15
 13630  003A58  ECC8  F017         	call	_drawtext
 13631  003A5C  0012               	return		;funcret
 13632  003A5E                     __end_of_Update_Setup_Alarm_Screen:
 13633                           	opt stack 0
 13634                           tblptru	equ	0xFF8
 13635                           tblptrh	equ	0xFF7
 13636                           tblptrl	equ	0xFF6
 13637                           tablat	equ	0xFF5
 13638                           prodh	equ	0xFF4
 13639                           prodl	equ	0xFF3
 13640                           intcon	equ	0xFF2
 13641                           intcon2	equ	0xFF1
 13642                           intcon3	equ	0xFF0
 13643                           postinc0	equ	0xFEE
 13644                           wreg	equ	0xFE8
 13645                           postdec1	equ	0xFE5
 13646                           fsr1l	equ	0xFE1
 13647                           postinc2	equ	0xFDE
 13648                           postdec2	equ	0xFDD
 13649                           fsr2h	equ	0xFDA
 13650                           fsr2l	equ	0xFD9
 13651                           status	equ	0xFD8
 13652                           
 13653 ;; *************** function ___awmod *****************
 13654 ;; Defined at:
 13655 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awmod.c"
 13656 ;; Parameters:    Size  Location     Type
 13657 ;;  dividend        2   27[COMRAM] int 
 13658 ;;  divisor         2   29[COMRAM] int 
 13659 ;; Auto vars:     Size  Location     Type
 13660 ;;  sign            1   32[COMRAM] unsigned char 
 13661 ;;  counter         1   31[COMRAM] unsigned char 
 13662 ;; Return value:  Size  Location     Type
 13663 ;;                  2   27[COMRAM] int 
 13664 ;; Registers used:
 13665 ;;		wreg, status,2, status,0
 13666 ;; Tracked objects:
 13667 ;;		On entry : 0/0
 13668 ;;		On exit  : 0/0
 13669 ;;		Unchanged: 0/0
 13670 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13671 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13672 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13673 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13674 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13675 ;;Total ram usage:        6 bytes
 13676 ;; Hardware stack levels used:    1
 13677 ;; Hardware stack levels required when called:    5
 13678 ;; This function calls:
 13679 ;;		Nothing
 13680 ;; This function is called by:
 13681 ;;		_Do_Update_Main_Screen
 13682 ;;		_Update_Setup_Time_Screen
 13683 ;;		_Update_Setup_Alarm_Screen
 13684 ;;		_Update_Setup_Heater_Screen
 13685 ;;		_dec_2_bcd
 13686 ;;		_fround
 13687 ;;		_scale
 13688 ;; This function uses a non-reentrant model
 13689 ;;
 13690                           
 13691                           	psect	text45
 13692  003F90                     __ptext45:
 13693                           	opt stack 0
 13694  003F90                     ___awmod:
 13695                           	opt stack 23
 13696                           
 13697                           ;incstack = 0
 13698  003F90  0E00               	movlw	0
 13699  003F92  6E21               	movwf	___awmod@sign,c
 13700  003F94  AE1D               	btfss	___awmod@dividend+1,7,c
 13701  003F96  D007               	goto	l8302
 13702  003F98  6C1C               	negf	___awmod@dividend,c
 13703  003F9A  1E1D               	comf	___awmod@dividend+1,f,c
 13704  003F9C  B0D8               	btfsc	status,0,c
 13705  003F9E  2A1D               	incf	___awmod@dividend+1,f,c
 13706  003FA0  0E01               	movlw	1
 13707  003FA2  6E21               	movwf	___awmod@sign,c
 13708  003FA4  D000               	goto	l8302
 13709  003FA6                     l8302:
 13710  003FA6  AE1F               	btfss	___awmod@divisor+1,7,c
 13711  003FA8  D005               	goto	l8306
 13712  003FAA  6C1E               	negf	___awmod@divisor,c
 13713  003FAC  1E1F               	comf	___awmod@divisor+1,f,c
 13714  003FAE  B0D8               	btfsc	status,0,c
 13715  003FB0  2A1F               	incf	___awmod@divisor+1,f,c
 13716  003FB2  D000               	goto	l8306
 13717  003FB4                     l8306:
 13718  003FB4  501E               	movf	___awmod@divisor,w,c
 13719  003FB6  101F               	iorwf	___awmod@divisor+1,w,c
 13720  003FB8  B4D8               	btfsc	status,2,c
 13721  003FBA  D01D               	goto	l8322
 13722  003FBC  0E01               	movlw	1
 13723  003FBE  6E20               	movwf	___awmod@counter,c
 13724  003FC0  D005               	goto	l8312
 13725  003FC2                     l8310:
 13726  003FC2  90D8               	bcf	status,0,c
 13727  003FC4  361E               	rlcf	___awmod@divisor,f,c
 13728  003FC6  361F               	rlcf	___awmod@divisor+1,f,c
 13729  003FC8  2A20               	incf	___awmod@counter,f,c
 13730  003FCA  D000               	goto	l8312
 13731  003FCC                     l8312:
 13732  003FCC  BE1F               	btfsc	___awmod@divisor+1,7,c
 13733  003FCE  D002               	goto	l8314
 13734  003FD0  D7F8               	goto	l8310
 13735  003FD2  D000               	goto	l8314
 13736  003FD4                     l8314:
 13737  003FD4  501E               	movf	___awmod@divisor,w,c
 13738  003FD6  5C1C               	subwf	___awmod@dividend,w,c
 13739  003FD8  501F               	movf	___awmod@divisor+1,w,c
 13740  003FDA  581D               	subwfb	___awmod@dividend+1,w,c
 13741  003FDC  A0D8               	btfss	status,0,c
 13742  003FDE  D005               	goto	l8318
 13743  003FE0  501E               	movf	___awmod@divisor,w,c
 13744  003FE2  5E1C               	subwf	___awmod@dividend,f,c
 13745  003FE4  501F               	movf	___awmod@divisor+1,w,c
 13746  003FE6  5A1D               	subwfb	___awmod@dividend+1,f,c
 13747  003FE8  D000               	goto	l8318
 13748  003FEA                     l8318:
 13749  003FEA  90D8               	bcf	status,0,c
 13750  003FEC  321F               	rrcf	___awmod@divisor+1,f,c
 13751  003FEE  321E               	rrcf	___awmod@divisor,f,c
 13752  003FF0  2E20               	decfsz	___awmod@counter,f,c
 13753  003FF2  D7F0               	goto	l8314
 13754  003FF4  D000               	goto	l8322
 13755  003FF6                     l8322:
 13756  003FF6  5021               	movf	___awmod@sign,w,c
 13757  003FF8  B4D8               	btfsc	status,2,c
 13758  003FFA  D005               	goto	l8326
 13759  003FFC  6C1C               	negf	___awmod@dividend,c
 13760  003FFE  1E1D               	comf	___awmod@dividend+1,f,c
 13761  004000  B0D8               	btfsc	status,0,c
 13762  004002  2A1D               	incf	___awmod@dividend+1,f,c
 13763  004004  D000               	goto	l8326
 13764  004006                     l8326:
 13765  004006  C01C  F01C         	movff	___awmod@dividend,?___awmod
 13766  00400A  C01D  F01D         	movff	___awmod@dividend+1,?___awmod+1
 13767  00400E  D000               	goto	l1208
 13768  004010                     l1208:
 13769  004010  0012               	return		;funcret
 13770  004012                     __end_of___awmod:
 13771                           	opt stack 0
 13772                           tblptru	equ	0xFF8
 13773                           tblptrh	equ	0xFF7
 13774                           tblptrl	equ	0xFF6
 13775                           tablat	equ	0xFF5
 13776                           prodh	equ	0xFF4
 13777                           prodl	equ	0xFF3
 13778                           intcon	equ	0xFF2
 13779                           intcon2	equ	0xFF1
 13780                           intcon3	equ	0xFF0
 13781                           postinc0	equ	0xFEE
 13782                           wreg	equ	0xFE8
 13783                           postdec1	equ	0xFE5
 13784                           fsr1l	equ	0xFE1
 13785                           postinc2	equ	0xFDE
 13786                           postdec2	equ	0xFDD
 13787                           fsr2h	equ	0xFDA
 13788                           fsr2l	equ	0xFD9
 13789                           status	equ	0xFD8
 13790                           
 13791 ;; *************** function ___awdiv *****************
 13792 ;; Defined at:
 13793 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
 13794 ;; Parameters:    Size  Location     Type
 13795 ;;  dividend        2   33[COMRAM] int 
 13796 ;;  divisor         2   35[COMRAM] int 
 13797 ;; Auto vars:     Size  Location     Type
 13798 ;;  quotient        2   39[COMRAM] int 
 13799 ;;  sign            1   38[COMRAM] unsigned char 
 13800 ;;  counter         1   37[COMRAM] unsigned char 
 13801 ;; Return value:  Size  Location     Type
 13802 ;;                  2   33[COMRAM] int 
 13803 ;; Registers used:
 13804 ;;		wreg, status,2, status,0
 13805 ;; Tracked objects:
 13806 ;;		On entry : 0/0
 13807 ;;		On exit  : 0/0
 13808 ;;		Unchanged: 0/0
 13809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13810 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13811 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13812 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13813 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13814 ;;Total ram usage:        8 bytes
 13815 ;; Hardware stack levels used:    1
 13816 ;; Hardware stack levels required when called:    5
 13817 ;; This function calls:
 13818 ;;		Nothing
 13819 ;; This function is called by:
 13820 ;;		_Do_Update_Main_Screen
 13821 ;;		_Update_Setup_Time_Screen
 13822 ;;		_Update_Setup_Alarm_Screen
 13823 ;;		_Update_Setup_Heater_Screen
 13824 ;;		_dec_2_bcd
 13825 ;;		_fround
 13826 ;;		_scale
 13827 ;;		_printf
 13828 ;; This function uses a non-reentrant model
 13829 ;;
 13830                           
 13831                           	psect	text46
 13832  003B24                     __ptext46:
 13833                           	opt stack 0
 13834  003B24                     ___awdiv:
 13835                           	opt stack 23
 13836                           
 13837                           ;incstack = 0
 13838  003B24  0E00               	movlw	0
 13839  003B26  6E27               	movwf	___awdiv@sign,c
 13840  003B28  AE25               	btfss	___awdiv@divisor+1,7,c
 13841  003B2A  D007               	goto	l8258
 13842  003B2C  6C24               	negf	___awdiv@divisor,c
 13843  003B2E  1E25               	comf	___awdiv@divisor+1,f,c
 13844  003B30  B0D8               	btfsc	status,0,c
 13845  003B32  2A25               	incf	___awdiv@divisor+1,f,c
 13846  003B34  0E01               	movlw	1
 13847  003B36  6E27               	movwf	___awdiv@sign,c
 13848  003B38  D000               	goto	l8258
 13849  003B3A                     l8258:
 13850  003B3A  AE23               	btfss	___awdiv@dividend+1,7,c
 13851  003B3C  D007               	goto	l8264
 13852  003B3E  6C22               	negf	___awdiv@dividend,c
 13853  003B40  1E23               	comf	___awdiv@dividend+1,f,c
 13854  003B42  B0D8               	btfsc	status,0,c
 13855  003B44  2A23               	incf	___awdiv@dividend+1,f,c
 13856  003B46  0E01               	movlw	1
 13857  003B48  1A27               	xorwf	___awdiv@sign,f,c
 13858  003B4A  D000               	goto	l8264
 13859  003B4C                     l8264:
 13860  003B4C  0E00               	movlw	0
 13861  003B4E  6E29               	movwf	___awdiv@quotient+1,c
 13862  003B50  0E00               	movlw	0
 13863  003B52  6E28               	movwf	___awdiv@quotient,c
 13864  003B54  5024               	movf	___awdiv@divisor,w,c
 13865  003B56  1025               	iorwf	___awdiv@divisor+1,w,c
 13866  003B58  B4D8               	btfsc	status,2,c
 13867  003B5A  D021               	goto	l8286
 13868  003B5C  0E01               	movlw	1
 13869  003B5E  6E26               	movwf	___awdiv@counter,c
 13870  003B60  D005               	goto	l8272
 13871  003B62                     l8270:
 13872  003B62  90D8               	bcf	status,0,c
 13873  003B64  3624               	rlcf	___awdiv@divisor,f,c
 13874  003B66  3625               	rlcf	___awdiv@divisor+1,f,c
 13875  003B68  2A26               	incf	___awdiv@counter,f,c
 13876  003B6A  D000               	goto	l8272
 13877  003B6C                     l8272:
 13878  003B6C  BE25               	btfsc	___awdiv@divisor+1,7,c
 13879  003B6E  D002               	goto	l8274
 13880  003B70  D7F8               	goto	l8270
 13881  003B72  D000               	goto	l8274
 13882  003B74                     l8274:
 13883  003B74  90D8               	bcf	status,0,c
 13884  003B76  3628               	rlcf	___awdiv@quotient,f,c
 13885  003B78  3629               	rlcf	___awdiv@quotient+1,f,c
 13886  003B7A  5024               	movf	___awdiv@divisor,w,c
 13887  003B7C  5C22               	subwf	___awdiv@dividend,w,c
 13888  003B7E  5025               	movf	___awdiv@divisor+1,w,c
 13889  003B80  5823               	subwfb	___awdiv@dividend+1,w,c
 13890  003B82  A0D8               	btfss	status,0,c
 13891  003B84  D006               	goto	l8282
 13892  003B86  5024               	movf	___awdiv@divisor,w,c
 13893  003B88  5E22               	subwf	___awdiv@dividend,f,c
 13894  003B8A  5025               	movf	___awdiv@divisor+1,w,c
 13895  003B8C  5A23               	subwfb	___awdiv@dividend+1,f,c
 13896  003B8E  8028               	bsf	___awdiv@quotient,0,c
 13897  003B90  D000               	goto	l8282
 13898  003B92                     l8282:
 13899  003B92  90D8               	bcf	status,0,c
 13900  003B94  3225               	rrcf	___awdiv@divisor+1,f,c
 13901  003B96  3224               	rrcf	___awdiv@divisor,f,c
 13902  003B98  2E26               	decfsz	___awdiv@counter,f,c
 13903  003B9A  D7EC               	goto	l8274
 13904  003B9C  D000               	goto	l8286
 13905  003B9E                     l8286:
 13906  003B9E  5027               	movf	___awdiv@sign,w,c
 13907  003BA0  B4D8               	btfsc	status,2,c
 13908  003BA2  D005               	goto	l8290
 13909  003BA4  6C28               	negf	___awdiv@quotient,c
 13910  003BA6  1E29               	comf	___awdiv@quotient+1,f,c
 13911  003BA8  B0D8               	btfsc	status,0,c
 13912  003BAA  2A29               	incf	___awdiv@quotient+1,f,c
 13913  003BAC  D000               	goto	l8290
 13914  003BAE                     l8290:
 13915  003BAE  C028  F022         	movff	___awdiv@quotient,?___awdiv
 13916  003BB2  C029  F023         	movff	___awdiv@quotient+1,?___awdiv+1
 13917  003BB6  D000               	goto	l1195
 13918  003BB8                     l1195:
 13919  003BB8  0012               	return		;funcret
 13920  003BBA                     __end_of___awdiv:
 13921                           	opt stack 0
 13922                           tblptru	equ	0xFF8
 13923                           tblptrh	equ	0xFF7
 13924                           tblptrl	equ	0xFF6
 13925                           tablat	equ	0xFF5
 13926                           prodh	equ	0xFF4
 13927                           prodl	equ	0xFF3
 13928                           intcon	equ	0xFF2
 13929                           intcon2	equ	0xFF1
 13930                           intcon3	equ	0xFF0
 13931                           postinc0	equ	0xFEE
 13932                           wreg	equ	0xFE8
 13933                           postdec1	equ	0xFE5
 13934                           fsr1l	equ	0xFE1
 13935                           postinc2	equ	0xFDE
 13936                           postdec2	equ	0xFDD
 13937                           fsr2h	equ	0xFDA
 13938                           fsr2l	equ	0xFD9
 13939                           status	equ	0xFD8
 13940                           
 13941 ;; *************** function _Initialize_Setup_Alarm_Screen *****************
 13942 ;; Defined at:
 13943 ;;		line 2028 in file "lab_final_alt.c"
 13944 ;; Parameters:    Size  Location     Type
 13945 ;;		None
 13946 ;; Auto vars:     Size  Location     Type
 13947 ;;		None
 13948 ;; Return value:  Size  Location     Type
 13949 ;;		None               void
 13950 ;; Registers used:
 13951 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13952 ;; Tracked objects:
 13953 ;;		On entry : 0/0
 13954 ;;		On exit  : 0/0
 13955 ;;		Unchanged: 0/0
 13956 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13957 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13958 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13959 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13960 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13961 ;;Total ram usage:        0 bytes
 13962 ;; Hardware stack levels used:    1
 13963 ;; Hardware stack levels required when called:   12
 13964 ;; This function calls:
 13965 ;;		_drawtext
 13966 ;;		_fillRect
 13967 ;;		_fillScreen
 13968 ;;		_strcpy
 13969 ;; This function is called by:
 13970 ;;		_Do_Setup_Alarm_Time
 13971 ;; This function uses a non-reentrant model
 13972 ;;
 13973                           
 13974                           	psect	text47
 13975  0037CA                     __ptext47:
 13976                           	opt stack 0
 13977  0037CA                     _Initialize_Setup_Alarm_Screen:
 13978                           	opt stack 17
 13979                           
 13980                           ;lab_final_alt.c: 2030: fillScreen(0x0000);
 13981                           
 13982                           ;incstack = 0
 13983  0037CA  0E00               	movlw	0
 13984  0037CC  6E30               	movwf	fillScreen@color+1,c
 13985  0037CE  0E00               	movlw	0
 13986  0037D0  6E2F               	movwf	fillScreen@color,c
 13987  0037D2  EC7C  F025         	call	_fillScreen	;wreg free
 13988                           
 13989                           ;lab_final_alt.c: 2032: strcpy(txt, " ECE3301L Spring 2019\0");
 13990  0037D6  C04F  F01C         	movff	_txt,strcpy@to
 13991  0037DA  C050  F01D         	movff	_txt+1,strcpy@to+1
 13992  0037DE  0E57               	movlw	low STR_4
 13993  0037E0  6E1E               	movwf	strcpy@from,c
 13994  0037E2  0EFF               	movlw	high STR_4
 13995  0037E4  6E1F               	movwf	strcpy@from+1,c
 13996  0037E6  EC33  F024         	call	_strcpy	;wreg free
 13997                           
 13998                           ;lab_final_alt.c: 2033: drawtext(1 , 2, txt, 0xFFFF , 0x0000, 1);
 13999  0037EA  0E02               	movlw	2
 14000  0037EC  0100               	movlb	0	; () banked
 14001  0037EE  6FB2               	movwf	drawtext@y& (0+255),b
 14002  0037F0  C04F  F0B3         	movff	_txt,drawtext@_text
 14003  0037F4  C050  F0B4         	movff	_txt+1,drawtext@_text+1
 14004  0037F8  0EFF               	movlw	255
 14005  0037FA  0100               	movlb	0	; () banked
 14006  0037FC  6FB6               	movwf	(drawtext@color+1)& (0+255),b
 14007  0037FE  69B5               	setf	drawtext@color& (0+255),b
 14008  003800  0E00               	movlw	0
 14009  003802  0100               	movlb	0	; () banked
 14010  003804  6FB8               	movwf	(drawtext@bg+1)& (0+255),b
 14011  003806  0E00               	movlw	0
 14012  003808  6FB7               	movwf	drawtext@bg& (0+255),b
 14013  00380A  0E01               	movlw	1
 14014  00380C  0100               	movlb	0	; () banked
 14015  00380E  6FB9               	movwf	drawtext@size& (0+255),b
 14016  003810  0E01               	movlw	1
 14017  003812  ECC8  F017         	call	_drawtext
 14018                           
 14019                           ;lab_final_alt.c: 2035: strcpy(txt, "Alrm Setup");
 14020  003816  C04F  F01C         	movff	_txt,strcpy@to
 14021  00381A  C050  F01D         	movff	_txt+1,strcpy@to+1
 14022  00381E  0EC6               	movlw	low STR_24
 14023  003820  6E1E               	movwf	strcpy@from,c
 14024  003822  0EFF               	movlw	high STR_24
 14025  003824  6E1F               	movwf	strcpy@from+1,c
 14026  003826  EC33  F024         	call	_strcpy	;wreg free
 14027                           
 14028                           ;lab_final_alt.c: 2036: drawtext(1+5 , 2+15, txt, 0xF81F, 0x0000, 2);
 14029  00382A  0E11               	movlw	17
 14030  00382C  0100               	movlb	0	; () banked
 14031  00382E  6FB2               	movwf	drawtext@y& (0+255),b
 14032  003830  C04F  F0B3         	movff	_txt,drawtext@_text
 14033  003834  C050  F0B4         	movff	_txt+1,drawtext@_text+1
 14034  003838  0EF8               	movlw	248
 14035  00383A  0100               	movlb	0	; () banked
 14036  00383C  6FB6               	movwf	(drawtext@color+1)& (0+255),b
 14037  00383E  0E1F               	movlw	31
 14038  003840  6FB5               	movwf	drawtext@color& (0+255),b
 14039  003842  0E00               	movlw	0
 14040  003844  0100               	movlb	0	; () banked
 14041  003846  6FB8               	movwf	(drawtext@bg+1)& (0+255),b
 14042  003848  0E00               	movlw	0
 14043  00384A  6FB7               	movwf	drawtext@bg& (0+255),b
 14044  00384C  0E02               	movlw	2
 14045  00384E  0100               	movlb	0	; () banked
 14046  003850  6FB9               	movwf	drawtext@size& (0+255),b
 14047  003852  0E06               	movlw	6
 14048  003854  ECC8  F017         	call	_drawtext
 14049                           
 14050                           ;lab_final_alt.c: 2038: strcpy(txt, "Time");
 14051  003858  C04F  F01C         	movff	_txt,strcpy@to
 14052  00385C  C050  F01D         	movff	_txt+1,strcpy@to+1
 14053  003860  0EE6               	movlw	low STR_8
 14054  003862  6E1E               	movwf	strcpy@from,c
 14055  003864  0EFF               	movlw	high STR_8
 14056  003866  6E1F               	movwf	strcpy@from+1,c
 14057  003868  EC33  F024         	call	_strcpy	;wreg free
 14058                           
 14059                           ;lab_final_alt.c: 2039: drawtext(50 , 46 , txt, 0x001F , 0x0000, 1);
 14060  00386C  0E2E               	movlw	46
 14061  00386E  0100               	movlb	0	; () banked
 14062  003870  6FB2               	movwf	drawtext@y& (0+255),b
 14063  003872  C04F  F0B3         	movff	_txt,drawtext@_text
 14064  003876  C050  F0B4         	movff	_txt+1,drawtext@_text+1
 14065  00387A  0E00               	movlw	0
 14066  00387C  0100               	movlb	0	; () banked
 14067  00387E  6FB6               	movwf	(drawtext@color+1)& (0+255),b
 14068  003880  0E1F               	movlw	31
 14069  003882  6FB5               	movwf	drawtext@color& (0+255),b
 14070  003884  0E00               	movlw	0
 14071  003886  0100               	movlb	0	; () banked
 14072  003888  6FB8               	movwf	(drawtext@bg+1)& (0+255),b
 14073  00388A  0E00               	movlw	0
 14074  00388C  6FB7               	movwf	drawtext@bg& (0+255),b
 14075  00388E  0E01               	movlw	1
 14076  003890  0100               	movlb	0	; () banked
 14077  003892  6FB9               	movwf	drawtext@size& (0+255),b
 14078  003894  0E32               	movlw	50
 14079  003896  ECC8  F017         	call	_drawtext
 14080                           
 14081                           ;lab_final_alt.c: 2040: fillRect(15-1, 56+16, 25,2,0x07FF);
 14082  00389A  0E48               	movlw	72
 14083  00389C  6E2E               	movwf	fillRect@y,c
 14084  00389E  0E19               	movlw	25
 14085  0038A0  6E2F               	movwf	fillRect@w,c
 14086  0038A2  0E02               	movlw	2
 14087  0038A4  6E30               	movwf	fillRect@h,c
 14088  0038A6  0E07               	movlw	7
 14089  0038A8  6E32               	movwf	fillRect@color+1,c
 14090  0038AA  6831               	setf	fillRect@color,c
 14091  0038AC  0E0E               	movlw	14
 14092  0038AE  ECA6  F022         	call	_fillRect
 14093  0038B2  0012               	return		;funcret
 14094  0038B4                     __end_of_Initialize_Setup_Alarm_Screen:
 14095                           	opt stack 0
 14096                           tblptru	equ	0xFF8
 14097                           tblptrh	equ	0xFF7
 14098                           tblptrl	equ	0xFF6
 14099                           tablat	equ	0xFF5
 14100                           prodh	equ	0xFF4
 14101                           prodl	equ	0xFF3
 14102                           intcon	equ	0xFF2
 14103                           intcon2	equ	0xFF1
 14104                           intcon3	equ	0xFF0
 14105                           postinc0	equ	0xFEE
 14106                           wreg	equ	0xFE8
 14107                           postdec1	equ	0xFE5
 14108                           fsr1l	equ	0xFE1
 14109                           postinc2	equ	0xFDE
 14110                           postdec2	equ	0xFDD
 14111                           fsr2h	equ	0xFDA
 14112                           fsr2l	equ	0xFD9
 14113                           status	equ	0xFD8
 14114                           
 14115 ;; *************** function _Initialize_Main_Screen *****************
 14116 ;; Defined at:
 14117 ;;		line 1736 in file "lab_final_alt.c"
 14118 ;; Parameters:    Size  Location     Type
 14119 ;;		None
 14120 ;; Auto vars:     Size  Location     Type
 14121 ;;		None
 14122 ;; Return value:  Size  Location     Type
 14123 ;;		None               void
 14124 ;; Registers used:
 14125 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14126 ;; Tracked objects:
 14127 ;;		On entry : 0/0
 14128 ;;		On exit  : 0/0
 14129 ;;		Unchanged: 0/0
 14130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14131 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14132 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14133 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14134 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14135 ;;Total ram usage:        0 bytes
 14136 ;; Hardware stack levels used:    1
 14137 ;; Hardware stack levels required when called:   12
 14138 ;; This function calls:
 14139 ;;		_drawCircle
 14140 ;;		_drawtext
 14141 ;;		_fillScreen
 14142 ;;		_strcpy
 14143 ;; This function is called by:
 14144 ;;		_main
 14145 ;;		_Do_Setup_Time
 14146 ;;		_Do_Setup_Alarm_Time
 14147 ;;		_Do_Setup_Heater_Temp
 14148 ;; This function uses a non-reentrant model
 14149 ;;
 14150                           
 14151                           	psect	text48
 14152  0013F6                     __ptext48:
 14153                           	opt stack 0
 14154  0013F6                     _Initialize_Main_Screen:
 14155                           	opt stack 18
 14156                           
 14157                           ;lab_final_alt.c: 1738: fillScreen(0x0000);
 14158                           
 14159                           ;incstack = 0
 14160  0013F6  0E00               	movlw	0
 14161  0013F8  6E30               	movwf	fillScreen@color+1,c
 14162  0013FA  0E00               	movlw	0
 14163  0013FC  6E2F               	movwf	fillScreen@color,c
 14164  0013FE  EC7C  F025         	call	_fillScreen	;wreg free
 14165                           
 14166                           ;lab_final_alt.c: 1740: strcpy(txt, " ECE3301L Spring 2019\0");
 14167  001402  C04F  F01C         	movff	_txt,strcpy@to
 14168  001406  C050  F01D         	movff	_txt+1,strcpy@to+1
 14169  00140A  0E57               	movlw	low STR_4
 14170  00140C  6E1E               	movwf	strcpy@from,c
 14171  00140E  0EFF               	movlw	high STR_4
 14172  001410  6E1F               	movwf	strcpy@from+1,c
 14173  001412  EC33  F024         	call	_strcpy	;wreg free
 14174                           
 14175                           ;lab_final_alt.c: 1741: drawtext(1 , 2, txt, 0xFFFF , 0x0000, 1);
 14176  001416  0E02               	movlw	2
 14177  001418  0100               	movlb	0	; () banked
 14178  00141A  6FB2               	movwf	drawtext@y& (0+255),b
 14179  00141C  C04F  F0B3         	movff	_txt,drawtext@_text
 14180  001420  C050  F0B4         	movff	_txt+1,drawtext@_text+1
 14181  001424  0EFF               	movlw	255
 14182  001426  0100               	movlb	0	; () banked
 14183  001428  6FB6               	movwf	(drawtext@color+1)& (0+255),b
 14184  00142A  69B5               	setf	drawtext@color& (0+255),b
 14185  00142C  0E00               	movlw	0
 14186  00142E  0100               	movlb	0	; () banked
 14187  001430  6FB8               	movwf	(drawtext@bg+1)& (0+255),b
 14188  001432  0E00               	movlw	0
 14189  001434  6FB7               	movwf	drawtext@bg& (0+255),b
 14190  001436  0E01               	movlw	1
 14191  001438  0100               	movlb	0	; () banked
 14192  00143A  6FB9               	movwf	drawtext@size& (0+255),b
 14193  00143C  0E01               	movlw	1
 14194  00143E  ECC8  F017         	call	_drawtext
 14195                           
 14196                           ;lab_final_alt.c: 1742: strcpy(txt, "Temperature:");
 14197  001442  C04F  F01C         	movff	_txt,strcpy@to
 14198  001446  C050  F01D         	movff	_txt+1,strcpy@to+1
 14199  00144A  0EA2               	movlw	low STR_5
 14200  00144C  6E1E               	movwf	strcpy@from,c
 14201  00144E  0EFF               	movlw	high STR_5
 14202  001450  6E1F               	movwf	strcpy@from+1,c
 14203  001452  EC33  F024         	call	_strcpy	;wreg free
 14204                           
 14205                           ;lab_final_alt.c: 1743: drawtext(28 , 13 , txt, 0xF81F, 0x0000, 1);
 14206  001456  0E0D               	movlw	13
 14207  001458  0100               	movlb	0	; () banked
 14208  00145A  6FB2               	movwf	drawtext@y& (0+255),b
 14209  00145C  C04F  F0B3         	movff	_txt,drawtext@_text
 14210  001460  C050  F0B4         	movff	_txt+1,drawtext@_text+1
 14211  001464  0EF8               	movlw	248
 14212  001466  0100               	movlb	0	; () banked
 14213  001468  6FB6               	movwf	(drawtext@color+1)& (0+255),b
 14214  00146A  0E1F               	movlw	31
 14215  00146C  6FB5               	movwf	drawtext@color& (0+255),b
 14216  00146E  0E00               	movlw	0
 14217  001470  0100               	movlb	0	; () banked
 14218  001472  6FB8               	movwf	(drawtext@bg+1)& (0+255),b
 14219  001474  0E00               	movlw	0
 14220  001476  6FB7               	movwf	drawtext@bg& (0+255),b
 14221  001478  0E01               	movlw	1
 14222  00147A  0100               	movlb	0	; () banked
 14223  00147C  6FB9               	movwf	drawtext@size& (0+255),b
 14224  00147E  0E1C               	movlw	28
 14225  001480  ECC8  F017         	call	_drawtext
 14226                           
 14227                           ;lab_final_alt.c: 1744: drawCircle(40, 26 , 2 , 0xFFE0);
 14228  001484  0E00               	movlw	0
 14229  001486  6E28               	movwf	drawCircle@x0+1,c
 14230  001488  0E28               	movlw	40
 14231  00148A  6E27               	movwf	drawCircle@x0,c
 14232  00148C  0E00               	movlw	0
 14233  00148E  6E2A               	movwf	drawCircle@y0+1,c
 14234  001490  0E1A               	movlw	26
 14235  001492  6E29               	movwf	drawCircle@y0,c
 14236  001494  0E00               	movlw	0
 14237  001496  6E2C               	movwf	drawCircle@r+1,c
 14238  001498  0E02               	movlw	2
 14239  00149A  6E2B               	movwf	drawCircle@r,c
 14240  00149C  0EFF               	movlw	255
 14241  00149E  6E2E               	movwf	drawCircle@color+1,c
 14242  0014A0  0EE0               	movlw	224
 14243  0014A2  6E2D               	movwf	drawCircle@color,c
 14244  0014A4  ECD5  F012         	call	_drawCircle	;wreg free
 14245                           
 14246                           ;lab_final_alt.c: 1745: strcpy(txt, "C/");
 14247  0014A8  C04F  F01C         	movff	_txt,strcpy@to
 14248  0014AC  C050  F01D         	movff	_txt+1,strcpy@to+1
 14249  0014B0  0EFC               	movlw	low STR_6
 14250  0014B2  6E1E               	movwf	strcpy@from,c
 14251  0014B4  0EFF               	movlw	high STR_6
 14252  0014B6  6E1F               	movwf	strcpy@from+1,c
 14253  0014B8  EC33  F024         	call	_strcpy	;wreg free
 14254                           
 14255                           ;lab_final_alt.c: 1746: drawtext(45 , 26, txt, 0xFFE0 , 0x0000, 2);
 14256  0014BC  0E1A               	movlw	26
 14257  0014BE  0100               	movlb	0	; () banked
 14258  0014C0  6FB2               	movwf	drawtext@y& (0+255),b
 14259  0014C2  C04F  F0B3         	movff	_txt,drawtext@_text
 14260  0014C6  C050  F0B4         	movff	_txt+1,drawtext@_text+1
 14261  0014CA  0EFF               	movlw	255
 14262  0014CC  0100               	movlb	0	; () banked
 14263  0014CE  6FB6               	movwf	(drawtext@color+1)& (0+255),b
 14264  0014D0  0EE0               	movlw	224
 14265  0014D2  6FB5               	movwf	drawtext@color& (0+255),b
 14266  0014D4  0E00               	movlw	0
 14267  0014D6  0100               	movlb	0	; () banked
 14268  0014D8  6FB8               	movwf	(drawtext@bg+1)& (0+255),b
 14269  0014DA  0E00               	movlw	0
 14270  0014DC  6FB7               	movwf	drawtext@bg& (0+255),b
 14271  0014DE  0E02               	movlw	2
 14272  0014E0  0100               	movlb	0	; () banked
 14273  0014E2  6FB9               	movwf	drawtext@size& (0+255),b
 14274  0014E4  0E2D               	movlw	45
 14275  0014E6  ECC8  F017         	call	_drawtext
 14276                           
 14277                           ;lab_final_alt.c: 1747: drawCircle(95, 26 , 2 , 0xFFE0);
 14278  0014EA  0E00               	movlw	0
 14279  0014EC  6E28               	movwf	drawCircle@x0+1,c
 14280  0014EE  0E5F               	movlw	95
 14281  0014F0  6E27               	movwf	drawCircle@x0,c
 14282  0014F2  0E00               	movlw	0
 14283  0014F4  6E2A               	movwf	drawCircle@y0+1,c
 14284  0014F6  0E1A               	movlw	26
 14285  0014F8  6E29               	movwf	drawCircle@y0,c
 14286  0014FA  0E00               	movlw	0
 14287  0014FC  6E2C               	movwf	drawCircle@r+1,c
 14288  0014FE  0E02               	movlw	2
 14289  001500  6E2B               	movwf	drawCircle@r,c
 14290  001502  0EFF               	movlw	255
 14291  001504  6E2E               	movwf	drawCircle@color+1,c
 14292  001506  0EE0               	movlw	224
 14293  001508  6E2D               	movwf	drawCircle@color,c
 14294  00150A  ECD5  F012         	call	_drawCircle	;wreg free
 14295                           
 14296                           ;lab_final_alt.c: 1748: strcpy(txt, "F");
 14297  00150E  C04F  F01C         	movff	_txt,strcpy@to
 14298  001512  C050  F01D         	movff	_txt+1,strcpy@to+1
 14299  001516  0EFA               	movlw	low (STR_16+2)
 14300  001518  6E1E               	movwf	strcpy@from,c
 14301  00151A  0EFF               	movlw	high (STR_16+2)
 14302  00151C  6E1F               	movwf	strcpy@from+1,c
 14303  00151E  EC33  F024         	call	_strcpy	;wreg free
 14304                           
 14305                           ;lab_final_alt.c: 1749: drawtext(100 , 26, txt, 0xFFE0 , 0x0000, 2);
 14306  001522  0E1A               	movlw	26
 14307  001524  0100               	movlb	0	; () banked
 14308  001526  6FB2               	movwf	drawtext@y& (0+255),b
 14309  001528  C04F  F0B3         	movff	_txt,drawtext@_text
 14310  00152C  C050  F0B4         	movff	_txt+1,drawtext@_text+1
 14311  001530  0EFF               	movlw	255
 14312  001532  0100               	movlb	0	; () banked
 14313  001534  6FB6               	movwf	(drawtext@color+1)& (0+255),b
 14314  001536  0EE0               	movlw	224
 14315  001538  6FB5               	movwf	drawtext@color& (0+255),b
 14316  00153A  0E00               	movlw	0
 14317  00153C  0100               	movlb	0	; () banked
 14318  00153E  6FB8               	movwf	(drawtext@bg+1)& (0+255),b
 14319  001540  0E00               	movlw	0
 14320  001542  6FB7               	movwf	drawtext@bg& (0+255),b
 14321  001544  0E02               	movlw	2
 14322  001546  0100               	movlb	0	; () banked
 14323  001548  6FB9               	movwf	drawtext@size& (0+255),b
 14324  00154A  0E64               	movlw	100
 14325  00154C  ECC8  F017         	call	_drawtext
 14326                           
 14327                           ;lab_final_alt.c: 1750: strcpy(txt, "Time");
 14328  001550  C04F  F01C         	movff	_txt,strcpy@to
 14329  001554  C050  F01D         	movff	_txt+1,strcpy@to+1
 14330  001558  0EE6               	movlw	low STR_8
 14331  00155A  6E1E               	movwf	strcpy@from,c
 14332  00155C  0EFF               	movlw	high STR_8
 14333  00155E  6E1F               	movwf	strcpy@from+1,c
 14334  001560  EC33  F024         	call	_strcpy	;wreg free
 14335                           
 14336                           ;lab_final_alt.c: 1751: drawtext(50 , 46 , txt, 0x001F , 0x0000, 1);
 14337  001564  0E2E               	movlw	46
 14338  001566  0100               	movlb	0	; () banked
 14339  001568  6FB2               	movwf	drawtext@y& (0+255),b
 14340  00156A  C04F  F0B3         	movff	_txt,drawtext@_text
 14341  00156E  C050  F0B4         	movff	_txt+1,drawtext@_text+1
 14342  001572  0E00               	movlw	0
 14343  001574  0100               	movlb	0	; () banked
 14344  001576  6FB6               	movwf	(drawtext@color+1)& (0+255),b
 14345  001578  0E1F               	movlw	31
 14346  00157A  6FB5               	movwf	drawtext@color& (0+255),b
 14347  00157C  0E00               	movlw	0
 14348  00157E  0100               	movlb	0	; () banked
 14349  001580  6FB8               	movwf	(drawtext@bg+1)& (0+255),b
 14350  001582  0E00               	movlw	0
 14351  001584  6FB7               	movwf	drawtext@bg& (0+255),b
 14352  001586  0E01               	movlw	1
 14353  001588  0100               	movlb	0	; () banked
 14354  00158A  6FB9               	movwf	drawtext@size& (0+255),b
 14355  00158C  0E32               	movlw	50
 14356  00158E  ECC8  F017         	call	_drawtext
 14357                           
 14358                           ;lab_final_alt.c: 1752: strcpy(txt, "Date");
 14359  001592  C04F  F01C         	movff	_txt,strcpy@to
 14360  001596  C050  F01D         	movff	_txt+1,strcpy@to+1
 14361  00159A  0EEB               	movlw	low STR_9
 14362  00159C  6E1E               	movwf	strcpy@from,c
 14363  00159E  0EFF               	movlw	high STR_9
 14364  0015A0  6E1F               	movwf	strcpy@from+1,c
 14365  0015A2  EC33  F024         	call	_strcpy	;wreg free
 14366                           
 14367                           ;lab_final_alt.c: 1753: drawtext(50 , 76 , txt, 0xF800 , 0x0000, 1);
 14368  0015A6  0E4C               	movlw	76
 14369  0015A8  0100               	movlb	0	; () banked
 14370  0015AA  6FB2               	movwf	drawtext@y& (0+255),b
 14371  0015AC  C04F  F0B3         	movff	_txt,drawtext@_text
 14372  0015B0  C050  F0B4         	movff	_txt+1,drawtext@_text+1
 14373  0015B4  0EF8               	movlw	248
 14374  0015B6  0100               	movlb	0	; () banked
 14375  0015B8  6FB6               	movwf	(drawtext@color+1)& (0+255),b
 14376  0015BA  0E00               	movlw	0
 14377  0015BC  6FB5               	movwf	drawtext@color& (0+255),b
 14378  0015BE  0E00               	movlw	0
 14379  0015C0  0100               	movlb	0	; () banked
 14380  0015C2  6FB8               	movwf	(drawtext@bg+1)& (0+255),b
 14381  0015C4  0E00               	movlw	0
 14382  0015C6  6FB7               	movwf	drawtext@bg& (0+255),b
 14383  0015C8  0E01               	movlw	1
 14384  0015CA  0100               	movlb	0	; () banked
 14385  0015CC  6FB9               	movwf	drawtext@size& (0+255),b
 14386  0015CE  0E32               	movlw	50
 14387  0015D0  ECC8  F017         	call	_drawtext
 14388                           
 14389                           ;lab_final_alt.c: 1754: strcpy(txt, "ALARM");
 14390  0015D4  C04F  F01C         	movff	_txt,strcpy@to
 14391  0015D8  C050  F01D         	movff	_txt+1,strcpy@to+1
 14392  0015DC  0EE0               	movlw	low STR_10
 14393  0015DE  6E1E               	movwf	strcpy@from,c
 14394  0015E0  0EFF               	movlw	high STR_10
 14395  0015E2  6E1F               	movwf	strcpy@from+1,c
 14396  0015E4  EC33  F024         	call	_strcpy	;wreg free
 14397                           
 14398                           ;lab_final_alt.c: 1755: drawtext(10 , 107, txt, 0xFFFF , 0x0000, 1);
 14399  0015E8  0E6B               	movlw	107
 14400  0015EA  0100               	movlb	0	; () banked
 14401  0015EC  6FB2               	movwf	drawtext@y& (0+255),b
 14402  0015EE  C04F  F0B3         	movff	_txt,drawtext@_text
 14403  0015F2  C050  F0B4         	movff	_txt+1,drawtext@_text+1
 14404  0015F6  0EFF               	movlw	255
 14405  0015F8  0100               	movlb	0	; () banked
 14406  0015FA  6FB6               	movwf	(drawtext@color+1)& (0+255),b
 14407  0015FC  69B5               	setf	drawtext@color& (0+255),b
 14408  0015FE  0E00               	movlw	0
 14409  001600  0100               	movlb	0	; () banked
 14410  001602  6FB8               	movwf	(drawtext@bg+1)& (0+255),b
 14411  001604  0E00               	movlw	0
 14412  001606  6FB7               	movwf	drawtext@bg& (0+255),b
 14413  001608  0E01               	movlw	1
 14414  00160A  0100               	movlb	0	; () banked
 14415  00160C  6FB9               	movwf	drawtext@size& (0+255),b
 14416  00160E  0E0A               	movlw	10
 14417  001610  ECC8  F017         	call	_drawtext
 14418                           
 14419                           ;lab_final_alt.c: 1756: strcpy(txt, "LED");
 14420  001614  C04F  F01C         	movff	_txt,strcpy@to
 14421  001618  C050  F01D         	movff	_txt+1,strcpy@to+1
 14422  00161C  0EF4               	movlw	low STR_11
 14423  00161E  6E1E               	movwf	strcpy@from,c
 14424  001620  0EFF               	movlw	high STR_11
 14425  001622  6E1F               	movwf	strcpy@from+1,c
 14426  001624  EC33  F024         	call	_strcpy	;wreg free
 14427                           
 14428                           ;lab_final_alt.c: 1757: drawtext(50, 107, txt, 0xFFFF , 0x0000, 1);
 14429  001628  0E6B               	movlw	107
 14430  00162A  0100               	movlb	0	; () banked
 14431  00162C  6FB2               	movwf	drawtext@y& (0+255),b
 14432  00162E  C04F  F0B3         	movff	_txt,drawtext@_text
 14433  001632  C050  F0B4         	movff	_txt+1,drawtext@_text+1
 14434  001636  0EFF               	movlw	255
 14435  001638  0100               	movlb	0	; () banked
 14436  00163A  6FB6               	movwf	(drawtext@color+1)& (0+255),b
 14437  00163C  69B5               	setf	drawtext@color& (0+255),b
 14438  00163E  0E00               	movlw	0
 14439  001640  0100               	movlb	0	; () banked
 14440  001642  6FB8               	movwf	(drawtext@bg+1)& (0+255),b
 14441  001644  0E00               	movlw	0
 14442  001646  6FB7               	movwf	drawtext@bg& (0+255),b
 14443  001648  0E01               	movlw	1
 14444  00164A  0100               	movlb	0	; () banked
 14445  00164C  6FB9               	movwf	drawtext@size& (0+255),b
 14446  00164E  0E32               	movlw	50
 14447  001650  ECC8  F017         	call	_drawtext
 14448                           
 14449                           ;lab_final_alt.c: 1758: strcpy(txt, "Heater");
 14450  001654  C04F  F01C         	movff	_txt,strcpy@to
 14451  001658  C050  F01D         	movff	_txt+1,strcpy@to+1
 14452  00165C  0ED9               	movlw	low STR_12
 14453  00165E  6E1E               	movwf	strcpy@from,c
 14454  001660  0EFF               	movlw	high STR_12
 14455  001662  6E1F               	movwf	strcpy@from+1,c
 14456  001664  EC33  F024         	call	_strcpy	;wreg free
 14457                           
 14458                           ;lab_final_alt.c: 1759: drawtext(85 , 107 , txt, 0xFFFF , 0x0000, 1);
 14459  001668  0E6B               	movlw	107
 14460  00166A  0100               	movlb	0	; () banked
 14461  00166C  6FB2               	movwf	drawtext@y& (0+255),b
 14462  00166E  C04F  F0B3         	movff	_txt,drawtext@_text
 14463  001672  C050  F0B4         	movff	_txt+1,drawtext@_text+1
 14464  001676  0EFF               	movlw	255
 14465  001678  0100               	movlb	0	; () banked
 14466  00167A  6FB6               	movwf	(drawtext@color+1)& (0+255),b
 14467  00167C  69B5               	setf	drawtext@color& (0+255),b
 14468  00167E  0E00               	movlw	0
 14469  001680  0100               	movlb	0	; () banked
 14470  001682  6FB8               	movwf	(drawtext@bg+1)& (0+255),b
 14471  001684  0E00               	movlw	0
 14472  001686  6FB7               	movwf	drawtext@bg& (0+255),b
 14473  001688  0E01               	movlw	1
 14474  00168A  0100               	movlb	0	; () banked
 14475  00168C  6FB9               	movwf	drawtext@size& (0+255),b
 14476  00168E  0E55               	movlw	85
 14477  001690  ECC8  F017         	call	_drawtext
 14478                           
 14479                           ;lab_final_alt.c: 1760: strcpy(txt, "Heater Set Temp");
 14480  001694  C04F  F01C         	movff	_txt,strcpy@to
 14481  001698  C050  F01D         	movff	_txt+1,strcpy@to+1
 14482  00169C  0E92               	movlw	low STR_13
 14483  00169E  6E1E               	movwf	strcpy@from,c
 14484  0016A0  0EFF               	movlw	high STR_13
 14485  0016A2  6E1F               	movwf	strcpy@from+1,c
 14486  0016A4  EC33  F024         	call	_strcpy	;wreg free
 14487                           
 14488                           ;lab_final_alt.c: 1761: drawtext(15 , 130, txt, 0xFFE0 , 0x0000, 1);
 14489  0016A8  0E82               	movlw	130
 14490  0016AA  0100               	movlb	0	; () banked
 14491  0016AC  6FB2               	movwf	drawtext@y& (0+255),b
 14492  0016AE  C04F  F0B3         	movff	_txt,drawtext@_text
 14493  0016B2  C050  F0B4         	movff	_txt+1,drawtext@_text+1
 14494  0016B6  0EFF               	movlw	255
 14495  0016B8  0100               	movlb	0	; () banked
 14496  0016BA  6FB6               	movwf	(drawtext@color+1)& (0+255),b
 14497  0016BC  0EE0               	movlw	224
 14498  0016BE  6FB5               	movwf	drawtext@color& (0+255),b
 14499  0016C0  0E00               	movlw	0
 14500  0016C2  0100               	movlb	0	; () banked
 14501  0016C4  6FB8               	movwf	(drawtext@bg+1)& (0+255),b
 14502  0016C6  0E00               	movlw	0
 14503  0016C8  6FB7               	movwf	drawtext@bg& (0+255),b
 14504  0016CA  0E01               	movlw	1
 14505  0016CC  0100               	movlb	0	; () banked
 14506  0016CE  6FB9               	movwf	drawtext@size& (0+255),b
 14507  0016D0  0E0F               	movlw	15
 14508  0016D2  ECC8  F017         	call	_drawtext
 14509                           
 14510                           ;lab_final_alt.c: 1762: drawCircle(73, 144 , 2 , 0x001F);
 14511  0016D6  0E00               	movlw	0
 14512  0016D8  6E28               	movwf	drawCircle@x0+1,c
 14513  0016DA  0E49               	movlw	73
 14514  0016DC  6E27               	movwf	drawCircle@x0,c
 14515  0016DE  0E00               	movlw	0
 14516  0016E0  6E2A               	movwf	drawCircle@y0+1,c
 14517  0016E2  0E90               	movlw	144
 14518  0016E4  6E29               	movwf	drawCircle@y0,c
 14519  0016E6  0E00               	movlw	0
 14520  0016E8  6E2C               	movwf	drawCircle@r+1,c
 14521  0016EA  0E02               	movlw	2
 14522  0016EC  6E2B               	movwf	drawCircle@r,c
 14523  0016EE  0E00               	movlw	0
 14524  0016F0  6E2E               	movwf	drawCircle@color+1,c
 14525  0016F2  0E1F               	movlw	31
 14526  0016F4  6E2D               	movwf	drawCircle@color,c
 14527  0016F6  ECD5  F012         	call	_drawCircle	;wreg free
 14528                           
 14529                           ;lab_final_alt.c: 1763: strcpy(txt, "F");
 14530  0016FA  C04F  F01C         	movff	_txt,strcpy@to
 14531  0016FE  C050  F01D         	movff	_txt+1,strcpy@to+1
 14532  001702  0EFA               	movlw	low (STR_16+2)
 14533  001704  6E1E               	movwf	strcpy@from,c
 14534  001706  0EFF               	movlw	high (STR_16+2)
 14535  001708  6E1F               	movwf	strcpy@from+1,c
 14536  00170A  EC33  F024         	call	_strcpy	;wreg free
 14537                           
 14538                           ;lab_final_alt.c: 1764: drawtext(78 , 144, txt, 0x001F , 0x0000, 2);
 14539  00170E  0E90               	movlw	144
 14540  001710  0100               	movlb	0	; () banked
 14541  001712  6FB2               	movwf	drawtext@y& (0+255),b
 14542  001714  C04F  F0B3         	movff	_txt,drawtext@_text
 14543  001718  C050  F0B4         	movff	_txt+1,drawtext@_text+1
 14544  00171C  0E00               	movlw	0
 14545  00171E  0100               	movlb	0	; () banked
 14546  001720  6FB6               	movwf	(drawtext@color+1)& (0+255),b
 14547  001722  0E1F               	movlw	31
 14548  001724  6FB5               	movwf	drawtext@color& (0+255),b
 14549  001726  0E00               	movlw	0
 14550  001728  0100               	movlb	0	; () banked
 14551  00172A  6FB8               	movwf	(drawtext@bg+1)& (0+255),b
 14552  00172C  0E00               	movlw	0
 14553  00172E  6FB7               	movwf	drawtext@bg& (0+255),b
 14554  001730  0E02               	movlw	2
 14555  001732  0100               	movlb	0	; () banked
 14556  001734  6FB9               	movwf	drawtext@size& (0+255),b
 14557  001736  0E4E               	movlw	78
 14558  001738  ECC8  F017         	call	_drawtext
 14559  00173C  0012               	return		;funcret
 14560  00173E                     __end_of_Initialize_Main_Screen:
 14561                           	opt stack 0
 14562                           tblptru	equ	0xFF8
 14563                           tblptrh	equ	0xFF7
 14564                           tblptrl	equ	0xFF6
 14565                           tablat	equ	0xFF5
 14566                           prodh	equ	0xFF4
 14567                           prodl	equ	0xFF3
 14568                           intcon	equ	0xFF2
 14569                           intcon2	equ	0xFF1
 14570                           intcon3	equ	0xFF0
 14571                           postinc0	equ	0xFEE
 14572                           wreg	equ	0xFE8
 14573                           postdec1	equ	0xFE5
 14574                           fsr1l	equ	0xFE1
 14575                           postinc2	equ	0xFDE
 14576                           postdec2	equ	0xFDD
 14577                           fsr2h	equ	0xFDA
 14578                           fsr2l	equ	0xFD9
 14579                           status	equ	0xFD8
 14580                           
 14581 ;; *************** function _strcpy *****************
 14582 ;; Defined at:
 14583 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strcpy.c"
 14584 ;; Parameters:    Size  Location     Type
 14585 ;;  to              2   27[COMRAM] PTR unsigned char 
 14586 ;;		 -> NULL(0), heater_text(4), alarm_text(4), buffer(31), 
 14587 ;;  from            2   29[COMRAM] PTR const unsigned char 
 14588 ;;		 -> STR_30(2), STR_29(16), STR_28(7), STR_27(8), 
 14589 ;;		 -> STR_26(23), STR_25(5), STR_24(11), STR_23(23), 
 14590 ;;		 -> STR_22(5), STR_21(5), STR_20(12), STR_19(23), 
 14591 ;;		 -> STR_18(4), STR_17(4), STR_16(4), STR_15(4), 
 14592 ;;		 -> STR_14(2), STR_13(16), STR_12(7), STR_11(4), 
 14593 ;;		 -> STR_10(6), STR_9(5), STR_8(5), STR_7(2), 
 14594 ;;		 -> STR_6(3), STR_5(13), STR_4(23), 
 14595 ;; Auto vars:     Size  Location     Type
 14596 ;;  cp              2   31[COMRAM] PTR unsigned char 
 14597 ;;		 -> NULL(0), heater_text(4), alarm_text(4), buffer(31), 
 14598 ;; Return value:  Size  Location     Type
 14599 ;;                  2   27[COMRAM] PTR unsigned char 
 14600 ;; Registers used:
 14601 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 14602 ;; Tracked objects:
 14603 ;;		On entry : 0/0
 14604 ;;		On exit  : 0/0
 14605 ;;		Unchanged: 0/0
 14606 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14607 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14608 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14609 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14610 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14611 ;;Total ram usage:        6 bytes
 14612 ;; Hardware stack levels used:    1
 14613 ;; Hardware stack levels required when called:    5
 14614 ;; This function calls:
 14615 ;;		Nothing
 14616 ;; This function is called by:
 14617 ;;		_Initialize_Main_Screen
 14618 ;;		_Do_Update_Main_Screen
 14619 ;;		_Initialize_Setup_Time_Screen
 14620 ;;		_Initialize_Setup_Alarm_Screen
 14621 ;;		_Initialize_Setup_Heater_Screen
 14622 ;; This function uses a non-reentrant model
 14623 ;;
 14624                           
 14625                           	psect	text49
 14626  004866                     __ptext49:
 14627                           	opt stack 0
 14628  004866                     _strcpy:
 14629                           	opt stack 24
 14630                           
 14631                           ;incstack = 0
 14632  004866  C01C  F020         	movff	strcpy@to,strcpy@cp
 14633  00486A  C01D  F021         	movff	strcpy@to+1,strcpy@cp+1
 14634  00486E  D005               	goto	l8130
 14635  004870                     l8128:
 14636  004870  4A20               	infsnz	strcpy@cp,f,c
 14637  004872  2A21               	incf	strcpy@cp+1,f,c
 14638  004874  4A1E               	infsnz	strcpy@from,f,c
 14639  004876  2A1F               	incf	strcpy@from+1,f,c
 14640  004878  D000               	goto	l8130
 14641  00487A                     l8130:
 14642  00487A  C01E  FFF6         	movff	strcpy@from,tblptrl
 14643  00487E  C01F  FFF7         	movff	strcpy@from+1,tblptrh
 14644  004882                     	if	0	;tblptru may be non-zero
 14645  004882                     	endif
 14646  004882                     	if	0	;tblptru may be non-zero
 14647  004882                     	endif
 14648  004882  C020  FFD9         	movff	strcpy@cp,fsr2l
 14649  004886  C021  FFDA         	movff	strcpy@cp+1,fsr2h
 14650  00488A  0008               	tblrd		*
 14651  00488C  CFF5 FFDF          	movff	tablat,indf2
 14652  004890  50DF               	movf	indf2,w,c
 14653  004892  A4D8               	btfss	status,2,c
 14654  004894  D7ED               	goto	l8128
 14655                           
 14656                           ;	Return value of _strcpy is never used
 14657  004896  0012               	return		;funcret
 14658  004898                     __end_of_strcpy:
 14659                           	opt stack 0
 14660                           tblptru	equ	0xFF8
 14661                           tblptrh	equ	0xFF7
 14662                           tblptrl	equ	0xFF6
 14663                           tablat	equ	0xFF5
 14664                           prodh	equ	0xFF4
 14665                           prodl	equ	0xFF3
 14666                           intcon	equ	0xFF2
 14667                           intcon2	equ	0xFF1
 14668                           intcon3	equ	0xFF0
 14669                           postinc0	equ	0xFEE
 14670                           wreg	equ	0xFE8
 14671                           postdec1	equ	0xFE5
 14672                           fsr1l	equ	0xFE1
 14673                           indf2	equ	0xFDF
 14674                           postinc2	equ	0xFDE
 14675                           postdec2	equ	0xFDD
 14676                           fsr2h	equ	0xFDA
 14677                           fsr2l	equ	0xFD9
 14678                           status	equ	0xFD8
 14679                           
 14680 ;; *************** function _fillScreen *****************
 14681 ;; Defined at:
 14682 ;;		line 631 in file "ST7735_TFT.inc"
 14683 ;; Parameters:    Size  Location     Type
 14684 ;;  color           2   46[COMRAM] unsigned int 
 14685 ;; Auto vars:     Size  Location     Type
 14686 ;;		None
 14687 ;; Return value:  Size  Location     Type
 14688 ;;		None               void
 14689 ;; Registers used:
 14690 ;;		wreg, status,2, status,0, cstack
 14691 ;; Tracked objects:
 14692 ;;		On entry : 0/0
 14693 ;;		On exit  : 0/0
 14694 ;;		Unchanged: 0/0
 14695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14696 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14697 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14698 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14699 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14700 ;;Total ram usage:        2 bytes
 14701 ;; Hardware stack levels used:    1
 14702 ;; Hardware stack levels required when called:    9
 14703 ;; This function calls:
 14704 ;;		_fillRectangle
 14705 ;; This function is called by:
 14706 ;;		_Initialize_Main_Screen
 14707 ;;		_Initialize_Setup_Time_Screen
 14708 ;;		_Initialize_Setup_Alarm_Screen
 14709 ;;		_Initialize_Setup_Heater_Screen
 14710 ;; This function uses a non-reentrant model
 14711 ;;
 14712                           
 14713                           	psect	text50
 14714  004AF8                     __ptext50:
 14715                           	opt stack 0
 14716  004AF8                     _fillScreen:
 14717                           	opt stack 20
 14718                           
 14719                           ;ST7735_TFT.inc: 633: fillRectangle(0, 0, 128, 160, color);
 14720                           
 14721                           ;incstack = 0
 14722  004AF8  0E00               	movlw	0
 14723  004AFA  6E23               	movwf	fillRectangle@y,c
 14724  004AFC  0E80               	movlw	128
 14725  004AFE  6E24               	movwf	fillRectangle@w,c
 14726  004B00  0EA0               	movlw	160
 14727  004B02  6E25               	movwf	fillRectangle@h,c
 14728  004B04  C02F  F026         	movff	fillScreen@color,fillRectangle@color
 14729  004B08  C030  F027         	movff	fillScreen@color+1,fillRectangle@color+1
 14730  004B0C  0E00               	movlw	0
 14731  004B0E  EC5A  F01C         	call	_fillRectangle
 14732  004B12  0012               	return		;funcret
 14733  004B14                     __end_of_fillScreen:
 14734                           	opt stack 0
 14735                           tblptru	equ	0xFF8
 14736                           tblptrh	equ	0xFF7
 14737                           tblptrl	equ	0xFF6
 14738                           tablat	equ	0xFF5
 14739                           prodh	equ	0xFF4
 14740                           prodl	equ	0xFF3
 14741                           intcon	equ	0xFF2
 14742                           intcon2	equ	0xFF1
 14743                           intcon3	equ	0xFF0
 14744                           postinc0	equ	0xFEE
 14745                           wreg	equ	0xFE8
 14746                           postdec1	equ	0xFE5
 14747                           fsr1l	equ	0xFE1
 14748                           indf2	equ	0xFDF
 14749                           postinc2	equ	0xFDE
 14750                           postdec2	equ	0xFDD
 14751                           fsr2h	equ	0xFDA
 14752                           fsr2l	equ	0xFD9
 14753                           status	equ	0xFD8
 14754                           
 14755 ;; *************** function _fillRectangle *****************
 14756 ;; Defined at:
 14757 ;;		line 515 in file "ST7735_TFT.inc"
 14758 ;; Parameters:    Size  Location     Type
 14759 ;;  x               1    wreg     unsigned char 
 14760 ;;  y               1   34[COMRAM] unsigned char 
 14761 ;;  w               1   35[COMRAM] unsigned char 
 14762 ;;  h               1   36[COMRAM] unsigned char 
 14763 ;;  color           2   37[COMRAM] unsigned int 
 14764 ;; Auto vars:     Size  Location     Type
 14765 ;;  x               1   45[COMRAM] unsigned char 
 14766 ;;  lo              1   44[COMRAM] unsigned char 
 14767 ;;  hi              1   43[COMRAM] unsigned char 
 14768 ;; Return value:  Size  Location     Type
 14769 ;;		None               void
 14770 ;; Registers used:
 14771 ;;		wreg, status,2, status,0, cstack
 14772 ;; Tracked objects:
 14773 ;;		On entry : 0/0
 14774 ;;		On exit  : 0/0
 14775 ;;		Unchanged: 0/0
 14776 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14777 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14778 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14779 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14780 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14781 ;;Total ram usage:       12 bytes
 14782 ;; Hardware stack levels used:    1
 14783 ;; Hardware stack levels required when called:    8
 14784 ;; This function calls:
 14785 ;;		_setAddrWindow
 14786 ;;		_spiwrite
 14787 ;; This function is called by:
 14788 ;;		_fillScreen
 14789 ;; This function uses a non-reentrant model
 14790 ;;
 14791                           
 14792                           	psect	text51
 14793  0038B4                     __ptext51:
 14794                           	opt stack 0
 14795  0038B4                     _fillRectangle:
 14796                           	opt stack 20
 14797                           
 14798                           ;incstack = 0
 14799                           ;fillRectangle@x stored from wreg
 14800  0038B4  6E2E               	movwf	fillRectangle@x,c
 14801                           
 14802                           ;ST7735_TFT.inc: 517: unsigned char hi, lo;
 14803                           ;ST7735_TFT.inc: 518: if((x >= 128) || (y >= 160))
 14804  0038B6  0E80               	movlw	128
 14805  0038B8  602E               	cpfslt	fillRectangle@x,c
 14806  0038BA  D069               	goto	l434
 14807  0038BC  0E9F               	movlw	159
 14808  0038BE  6423               	cpfsgt	fillRectangle@y,c
 14809  0038C0  D001               	goto	l7862
 14810                           
 14811                           ;ST7735_TFT.inc: 519: return;
 14812  0038C2  D065               	goto	l434
 14813  0038C4                     l7862:
 14814                           
 14815                           ;ST7735_TFT.inc: 520: if((x + w - 1) >= 128)
 14816  0038C4  0EFF               	movlw	255
 14817  0038C6  6E28               	movwf	??_fillRectangle& (0+255),c
 14818  0038C8  0EFF               	movlw	255
 14819  0038CA  6E29               	movwf	(??_fillRectangle+1)& (0+255),c
 14820  0038CC  5024               	movf	fillRectangle@w,w,c
 14821  0038CE  C02E  F02A         	movff	fillRectangle@x,??_fillRectangle+2
 14822  0038D2  6A2B               	clrf	(??_fillRectangle+3)& (0+255),c
 14823  0038D4  262A               	addwf	??_fillRectangle+2,f,c
 14824  0038D6  0E00               	movlw	0
 14825  0038D8  222B               	addwfc	??_fillRectangle+3,f,c
 14826  0038DA  5028               	movf	??_fillRectangle,w,c
 14827  0038DC  262A               	addwf	??_fillRectangle+2,f,c
 14828  0038DE  5029               	movf	??_fillRectangle+1,w,c
 14829  0038E0  222B               	addwfc	??_fillRectangle+3,f,c
 14830  0038E2  BE2B               	btfsc	??_fillRectangle+3,7,c
 14831  0038E4  D00A               	goto	l435
 14832  0038E6  502B               	movf	??_fillRectangle+3,w,c
 14833  0038E8  E104               	bnz	u6980
 14834  0038EA  0E80               	movlw	128
 14835  0038EC  5C2A               	subwf	??_fillRectangle+2,w,c
 14836  0038EE  A0D8               	btfss	status,0,c
 14837  0038F0  D004               	goto	l435
 14838  0038F2                     u6980:
 14839                           
 14840                           ;ST7735_TFT.inc: 521: w = 128 - x;
 14841  0038F2  502E               	movf	fillRectangle@x,w,c
 14842  0038F4  0800               	sublw	0
 14843  0038F6  0F80               	addlw	128
 14844  0038F8  6E24               	movwf	fillRectangle@w,c
 14845  0038FA                     l435:
 14846                           
 14847                           ;ST7735_TFT.inc: 522: if((y + h - 1) >= 160)
 14848  0038FA  0EFF               	movlw	255
 14849  0038FC  6E28               	movwf	??_fillRectangle& (0+255),c
 14850  0038FE  0EFF               	movlw	255
 14851  003900  6E29               	movwf	(??_fillRectangle+1)& (0+255),c
 14852  003902  5025               	movf	fillRectangle@h,w,c
 14853  003904  C023  F02A         	movff	fillRectangle@y,??_fillRectangle+2
 14854  003908  6A2B               	clrf	(??_fillRectangle+3)& (0+255),c
 14855  00390A  262A               	addwf	??_fillRectangle+2,f,c
 14856  00390C  0E00               	movlw	0
 14857  00390E  222B               	addwfc	??_fillRectangle+3,f,c
 14858  003910  5028               	movf	??_fillRectangle,w,c
 14859  003912  262A               	addwf	??_fillRectangle+2,f,c
 14860  003914  5029               	movf	??_fillRectangle+1,w,c
 14861  003916  222B               	addwfc	??_fillRectangle+3,f,c
 14862  003918  BE2B               	btfsc	??_fillRectangle+3,7,c
 14863  00391A  D00B               	goto	l7868
 14864  00391C  502B               	movf	??_fillRectangle+3,w,c
 14865  00391E  E104               	bnz	u6990
 14866  003920  0EA0               	movlw	160
 14867  003922  5C2A               	subwf	??_fillRectangle+2,w,c
 14868  003924  A0D8               	btfss	status,0,c
 14869  003926  D005               	goto	l7868
 14870  003928                     u6990:
 14871                           
 14872                           ;ST7735_TFT.inc: 523: h = 160 - y;
 14873  003928  5023               	movf	fillRectangle@y,w,c
 14874  00392A  0800               	sublw	0
 14875  00392C  0FA0               	addlw	160
 14876  00392E  6E25               	movwf	fillRectangle@h,c
 14877  003930  D000               	goto	l7868
 14878  003932                     l7868:
 14879                           
 14880                           ;ST7735_TFT.inc: 524: setAddrWindow(x, y, x+w-1, y+h-1);
 14881  003932  C023  F01F         	movff	fillRectangle@y,setAddrWindow@y0
 14882  003936  502E               	movf	fillRectangle@x,w,c
 14883  003938  2424               	addwf	fillRectangle@w,w,c
 14884  00393A  6E28               	movwf	??_fillRectangle& (0+255),c
 14885  00393C  0428               	decf	??_fillRectangle,w,c
 14886  00393E  6E20               	movwf	setAddrWindow@x1,c
 14887  003940  5023               	movf	fillRectangle@y,w,c
 14888  003942  2425               	addwf	fillRectangle@h,w,c
 14889  003944  6E29               	movwf	(??_fillRectangle+1)& (0+255),c
 14890  003946  0429               	decf	??_fillRectangle+1,w,c
 14891  003948  6E21               	movwf	setAddrWindow@y1,c
 14892  00394A  502E               	movf	fillRectangle@x,w,c
 14893  00394C  EC59  F022         	call	_setAddrWindow
 14894                           
 14895                           ;ST7735_TFT.inc: 525: hi = color >> 8; lo = color;
 14896  003950  5027               	movf	fillRectangle@color+1,w,c
 14897  003952  6E2C               	movwf	fillRectangle@hi,c
 14898  003954  C026  F02D         	movff	fillRectangle@color,fillRectangle@lo
 14899                           
 14900                           ;ST7735_TFT.inc: 526: PORTEbits.RE0 = 1;
 14901  003958  8084               	bsf	3972,0,c	;volatile
 14902                           
 14903                           ;ST7735_TFT.inc: 527: PORTEbits.RE1 = 0;
 14904  00395A  9284               	bcf	3972,1,c	;volatile
 14905                           
 14906                           ;ST7735_TFT.inc: 529: for(y=h; y>0; y--) {
 14907  00395C  C025  F023         	movff	fillRectangle@h,fillRectangle@y
 14908  003960                     l7880:
 14909  003960  5023               	movf	fillRectangle@y,w,c
 14910  003962  B4D8               	btfsc	status,2,c
 14911  003964  D013               	goto	l438
 14912  003966  D001               	goto	l437
 14913  003968  D011               	goto	l438
 14914  00396A                     l437:
 14915                           
 14916                           ;ST7735_TFT.inc: 530: for(x = w; x > 0; x--) {
 14917  00396A  C024  F02E         	movff	fillRectangle@w,fillRectangle@x
 14918  00396E                     l7884:
 14919  00396E  502E               	movf	fillRectangle@x,w,c
 14920  003970  B4D8               	btfsc	status,2,c
 14921  003972  D00A               	goto	l7894
 14922  003974  D001               	goto	l7888
 14923  003976  D008               	goto	l7894
 14924  003978                     l7888:
 14925                           
 14926                           ;ST7735_TFT.inc: 531: spiwrite(hi);
 14927  003978  502C               	movf	fillRectangle@hi,w,c
 14928  00397A  ECB8  F025         	call	_spiwrite
 14929                           
 14930                           ;ST7735_TFT.inc: 532: spiwrite(lo);
 14931  00397E  502D               	movf	fillRectangle@lo,w,c
 14932  003980  ECB8  F025         	call	_spiwrite
 14933  003984  062E               	decf	fillRectangle@x,f,c
 14934  003986  D7F3               	goto	l7884
 14935  003988                     l7894:
 14936  003988  0623               	decf	fillRectangle@y,f,c
 14937  00398A  D7EA               	goto	l7880
 14938  00398C                     l438:
 14939                           
 14940                           ;ST7735_TFT.inc: 533: }
 14941                           ;ST7735_TFT.inc: 534: }
 14942                           ;ST7735_TFT.inc: 535: PORTEbits.RE1 = 1;
 14943  00398C  8284               	bsf	3972,1,c	;volatile
 14944  00398E                     l434:
 14945  00398E  0012               	return		;funcret
 14946  003990                     __end_of_fillRectangle:
 14947                           	opt stack 0
 14948                           tblptru	equ	0xFF8
 14949                           tblptrh	equ	0xFF7
 14950                           tblptrl	equ	0xFF6
 14951                           tablat	equ	0xFF5
 14952                           prodh	equ	0xFF4
 14953                           prodl	equ	0xFF3
 14954                           intcon	equ	0xFF2
 14955                           intcon2	equ	0xFF1
 14956                           intcon3	equ	0xFF0
 14957                           postinc0	equ	0xFEE
 14958                           wreg	equ	0xFE8
 14959                           postdec1	equ	0xFE5
 14960                           fsr1l	equ	0xFE1
 14961                           indf2	equ	0xFDF
 14962                           postinc2	equ	0xFDE
 14963                           postdec2	equ	0xFDD
 14964                           fsr2h	equ	0xFDA
 14965                           fsr2l	equ	0xFD9
 14966                           status	equ	0xFD8
 14967                           
 14968 ;; *************** function _drawtext *****************
 14969 ;; Defined at:
 14970 ;;		line 486 in file "ST7735_TFT.inc"
 14971 ;; Parameters:    Size  Location     Type
 14972 ;;  x               1    wreg     unsigned char 
 14973 ;;  y               1    0[BANK0 ] unsigned char 
 14974 ;;  _text           2    1[BANK0 ] PTR unsigned char 
 14975 ;;		 -> NULL(0), setup_heater_S_text(3), setup_alarm_time(9), setup_date(9), 
 14976 ;;		 -> setup_time(9), heater_S_text(3), heater_text(4), LED_Int_text(3), 
 14977 ;;		 -> alarm_text(4), date(9), time(9), tempF(3), 
 14978 ;;		 -> tempC(3), buffer(31), 
 14979 ;;  color           2    3[BANK0 ] unsigned int 
 14980 ;;  bg              2    5[BANK0 ] unsigned int 
 14981 ;;  size            1    7[BANK0 ] unsigned char 
 14982 ;; Auto vars:     Size  Location     Type
 14983 ;;  x               1    8[BANK0 ] unsigned char 
 14984 ;;  i               2   11[BANK0 ] unsigned int 
 14985 ;;  textsize        2    9[BANK0 ] unsigned int 
 14986 ;;  cursor_x        1   14[BANK0 ] unsigned char 
 14987 ;;  cursor_y        1   13[BANK0 ] unsigned char 
 14988 ;; Return value:  Size  Location     Type
 14989 ;;		None               void
 14990 ;; Registers used:
 14991 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14992 ;; Tracked objects:
 14993 ;;		On entry : 0/0
 14994 ;;		On exit  : 0/0
 14995 ;;		Unchanged: 0/0
 14996 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14997 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14998 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14999 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15000 ;;      Totals:         2      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15001 ;;Total ram usage:       17 bytes
 15002 ;; Hardware stack levels used:    1
 15003 ;; Hardware stack levels required when called:   11
 15004 ;; This function calls:
 15005 ;;		_drawChar
 15006 ;;		_strlen
 15007 ;; This function is called by:
 15008 ;;		_Initialize_Main_Screen
 15009 ;;		_Do_Update_Main_Screen
 15010 ;;		_Initialize_Setup_Time_Screen
 15011 ;;		_Update_Setup_Time_Screen
 15012 ;;		_Initialize_Setup_Alarm_Screen
 15013 ;;		_Update_Setup_Alarm_Screen
 15014 ;;		_Initialize_Setup_Heater_Screen
 15015 ;;		_Update_Setup_Heater_Screen
 15016 ;; This function uses a non-reentrant model
 15017 ;;
 15018                           
 15019                           	psect	text52
 15020  002F90                     __ptext52:
 15021                           	opt stack 0
 15022  002F90                     _drawtext:
 15023                           	opt stack 18
 15024                           
 15025                           ;incstack = 0
 15026                           ;drawtext@x stored from wreg
 15027  002F90  0100               	movlb	0	; () banked
 15028  002F92  6FBA               	movwf	drawtext@x& (0+255),b
 15029                           
 15030                           ; BSR set to: 0
 15031                           ;ST7735_TFT.inc: 488: unsigned char cursor_x, cursor_y;
 15032                           ;ST7735_TFT.inc: 489: unsigned int textsize, i;
 15033                           ;ST7735_TFT.inc: 490: cursor_x = x, cursor_y = y;
 15034  002F94  C0BA  F0C0         	movff	drawtext@x,drawtext@cursor_x
 15035                           
 15036                           ; BSR set to: 0
 15037  002F98  C0B2  F0BF         	movff	drawtext@y,drawtext@cursor_y
 15038                           
 15039                           ; BSR set to: 0
 15040                           ;ST7735_TFT.inc: 491: textsize = strlen(_text);
 15041  002F9C  C0B3  F01C         	movff	drawtext@_text,strlen@s
 15042  002FA0  C0B4  F01D         	movff	drawtext@_text+1,strlen@s+1
 15043  002FA4  EC33  F023         	call	_strlen	;wreg free
 15044  002FA8  C01C  F0BB         	movff	?_strlen,drawtext@textsize
 15045  002FAC  C01D  F0BC         	movff	?_strlen+1,drawtext@textsize+1
 15046                           
 15047                           ;ST7735_TFT.inc: 492: for(i = 0; i < textsize; i++){
 15048  002FB0  0E00               	movlw	0
 15049  002FB2  0100               	movlb	0	; () banked
 15050  002FB4  6FBE               	movwf	(drawtext@i+1)& (0+255),b
 15051  002FB6  0E00               	movlw	0
 15052  002FB8  6FBD               	movwf	drawtext@i& (0+255),b
 15053  002FBA  D06B               	goto	l7994
 15054  002FBC                     l7968:
 15055                           
 15056                           ; BSR set to: 0
 15057                           ;ST7735_TFT.inc: 493: if(wrap && ((cursor_x + size * 5) > 128)){
 15058  002FBC  5064               	movf	_wrap,w,c
 15059  002FBE  B4D8               	btfsc	status,2,c
 15060  002FC0  D038               	goto	l7984
 15061                           
 15062                           ; BSR set to: 0
 15063  002FC2  0100               	movlb	0	; () banked
 15064  002FC4  51B9               	movf	drawtext@size& (0+255),w,b
 15065  002FC6  0D05               	mullw	5
 15066  002FC8  0100               	movlb	0	; () banked
 15067  002FCA  51C0               	movf	drawtext@cursor_x& (0+255),w,b
 15068  002FCC  6E44               	movwf	??_drawtext& (0+255),c
 15069  002FCE  6A45               	clrf	(??_drawtext+1)& (0+255),c
 15070  002FD0  50F3               	movf	prodl,w,c
 15071  002FD2  2644               	addwf	??_drawtext,f,c
 15072  002FD4  50F4               	movf	prodh,w,c
 15073  002FD6  2245               	addwfc	??_drawtext+1,f,c
 15074  002FD8  BE45               	btfsc	??_drawtext+1,7,c
 15075  002FDA  D02B               	goto	l7984
 15076  002FDC  5045               	movf	??_drawtext+1,w,c
 15077  002FDE  E104               	bnz	u7140
 15078  002FE0  0E81               	movlw	129
 15079  002FE2  5C44               	subwf	??_drawtext,w,c
 15080  002FE4  A0D8               	btfss	status,0,c
 15081  002FE6  D025               	goto	l7984
 15082  002FE8                     u7140:
 15083                           
 15084                           ; BSR set to: 0
 15085                           ;ST7735_TFT.inc: 494: cursor_x = 0;
 15086  002FE8  0E00               	movlw	0
 15087  002FEA  0100               	movlb	0	; () banked
 15088  002FEC  6FC0               	movwf	drawtext@cursor_x& (0+255),b
 15089                           
 15090                           ; BSR set to: 0
 15091                           ;ST7735_TFT.inc: 495: cursor_y = cursor_y + size * 7 + 3 ;
 15092  002FEE  0100               	movlb	0	; () banked
 15093  002FF0  51B9               	movf	drawtext@size& (0+255),w,b
 15094  002FF2  0D07               	mullw	7
 15095  002FF4  50F3               	movf	prodl,w,c
 15096  002FF6  0100               	movlb	0	; () banked
 15097  002FF8  25BF               	addwf	drawtext@cursor_y& (0+255),w,b
 15098  002FFA  0F03               	addlw	3
 15099  002FFC  0100               	movlb	0	; () banked
 15100  002FFE  6FBF               	movwf	drawtext@cursor_y& (0+255),b
 15101                           
 15102                           ; BSR set to: 0
 15103                           ;ST7735_TFT.inc: 496: if(cursor_y > 160) cursor_y = 160;
 15104  003000  0EA0               	movlw	160
 15105  003002  0100               	movlb	0	; () banked
 15106  003004  65BF               	cpfsgt	drawtext@cursor_y& (0+255),b
 15107  003006  D004               	goto	l7980
 15108                           
 15109                           ; BSR set to: 0
 15110  003008  0EA0               	movlw	160
 15111  00300A  0100               	movlb	0	; () banked
 15112  00300C  6FBF               	movwf	drawtext@cursor_y& (0+255),b
 15113  00300E  D000               	goto	l7980
 15114  003010                     l7980:
 15115                           
 15116                           ; BSR set to: 0
 15117                           ;ST7735_TFT.inc: 497: if(_text[i] == 0x20) goto _skip; }
 15118  003010  0100               	movlb	0	; () banked
 15119  003012  51BD               	movf	drawtext@i& (0+255),w,b
 15120  003014  0100               	movlb	0	; () banked
 15121  003016  25B3               	addwf	drawtext@_text& (0+255),w,b
 15122  003018  6ED9               	movwf	fsr2l,c
 15123  00301A  0100               	movlb	0	; () banked
 15124  00301C  51BE               	movf	(drawtext@i+1)& (0+255),w,b
 15125  00301E  0100               	movlb	0	; () banked
 15126  003020  21B4               	addwfc	(drawtext@_text+1)& (0+255),w,b
 15127  003022  6EDA               	movwf	fsr2h,c
 15128  003024  0E20               	movlw	32
 15129  003026  18DE               	xorwf	postinc2,w,c
 15130  003028  B4D8               	btfsc	status,2,c
 15131  00302A  D02F               	goto	l7992
 15132  00302C  D002               	goto	l7984
 15133                           
 15134                           ; BSR set to: 0
 15135  00302E  D02D               	goto	l7992
 15136                           
 15137                           ; BSR set to: 0
 15138  003030  D000               	goto	l7984
 15139  003032                     l7984:
 15140                           
 15141                           ; BSR set to: 0
 15142                           ;ST7735_TFT.inc: 498: drawChar(cursor_x, cursor_y, _text[i], color, bg, size);
 15143  003032  C0BF  F039         	movff	drawtext@cursor_y,drawChar@y
 15144  003036  0100               	movlb	0	; () banked
 15145  003038  51BD               	movf	drawtext@i& (0+255),w,b
 15146  00303A  0100               	movlb	0	; () banked
 15147  00303C  25B3               	addwf	drawtext@_text& (0+255),w,b
 15148  00303E  6ED9               	movwf	fsr2l,c
 15149  003040  0100               	movlb	0	; () banked
 15150  003042  51BE               	movf	(drawtext@i+1)& (0+255),w,b
 15151  003044  0100               	movlb	0	; () banked
 15152  003046  21B4               	addwfc	(drawtext@_text+1)& (0+255),w,b
 15153  003048  6EDA               	movwf	fsr2h,c
 15154  00304A  50DF               	movf	indf2,w,c
 15155  00304C  6E3A               	movwf	drawChar@c,c
 15156  00304E  C0B5  F03B         	movff	drawtext@color,drawChar@color
 15157  003052  C0B6  F03C         	movff	drawtext@color+1,drawChar@color+1
 15158  003056  C0B7  F03D         	movff	drawtext@bg,drawChar@bg
 15159  00305A  C0B8  F03E         	movff	drawtext@bg+1,drawChar@bg+1
 15160  00305E  C0B9  F03F         	movff	drawtext@size,drawChar@size
 15161  003062  0100               	movlb	0	; () banked
 15162  003064  51C0               	movf	drawtext@cursor_x& (0+255),w,b
 15163  003066  ECEE  F015         	call	_drawChar
 15164                           
 15165                           ;ST7735_TFT.inc: 499: cursor_x = cursor_x + size * 6;
 15166  00306A  0100               	movlb	0	; () banked
 15167  00306C  51B9               	movf	drawtext@size& (0+255),w,b
 15168  00306E  0D06               	mullw	6
 15169  003070  50F3               	movf	prodl,w,c
 15170  003072  0100               	movlb	0	; () banked
 15171  003074  25C0               	addwf	drawtext@cursor_x& (0+255),w,b
 15172  003076  0100               	movlb	0	; () banked
 15173  003078  6FC0               	movwf	drawtext@cursor_x& (0+255),b
 15174                           
 15175                           ; BSR set to: 0
 15176                           ;ST7735_TFT.inc: 500: if(cursor_x > 128) cursor_x = 128;
 15177  00307A  0E80               	movlw	128
 15178  00307C  0100               	movlb	0	; () banked
 15179  00307E  65C0               	cpfsgt	drawtext@cursor_x& (0+255),b
 15180  003080  D004               	goto	l7992
 15181                           
 15182                           ; BSR set to: 0
 15183  003082  0E80               	movlw	128
 15184  003084  0100               	movlb	0	; () banked
 15185  003086  6FC0               	movwf	drawtext@cursor_x& (0+255),b
 15186                           
 15187                           ; BSR set to: 0
 15188  003088  D000               	goto	l7992
 15189  00308A                     l7992:
 15190                           
 15191                           ; BSR set to: 0
 15192  00308A  0100               	movlb	0	; () banked
 15193  00308C  4BBD               	infsnz	drawtext@i& (0+255),f,b
 15194  00308E  2BBE               	incf	(drawtext@i+1)& (0+255),f,b
 15195  003090  D000               	goto	l7994
 15196  003092                     l7994:
 15197                           
 15198                           ; BSR set to: 0
 15199  003092  0100               	movlb	0	; () banked
 15200  003094  51BB               	movf	drawtext@textsize& (0+255),w,b
 15201  003096  0100               	movlb	0	; () banked
 15202  003098  5DBD               	subwf	drawtext@i& (0+255),w,b
 15203  00309A  0100               	movlb	0	; () banked
 15204  00309C  51BC               	movf	(drawtext@textsize+1)& (0+255),w,b
 15205  00309E  0100               	movlb	0	; () banked
 15206  0030A0  59BE               	subwfb	(drawtext@i+1)& (0+255),w,b
 15207  0030A2  A0D8               	btfss	status,0,c
 15208  0030A4  D78B               	goto	l7968
 15209                           
 15210                           ; BSR set to: 0
 15211                           
 15212                           ; BSR set to: 0
 15213  0030A6  0012               	return		;funcret
 15214  0030A8                     __end_of_drawtext:
 15215                           	opt stack 0
 15216                           tblptru	equ	0xFF8
 15217                           tblptrh	equ	0xFF7
 15218                           tblptrl	equ	0xFF6
 15219                           tablat	equ	0xFF5
 15220                           prodh	equ	0xFF4
 15221                           prodl	equ	0xFF3
 15222                           intcon	equ	0xFF2
 15223                           intcon2	equ	0xFF1
 15224                           intcon3	equ	0xFF0
 15225                           postinc0	equ	0xFEE
 15226                           wreg	equ	0xFE8
 15227                           postdec1	equ	0xFE5
 15228                           fsr1l	equ	0xFE1
 15229                           indf2	equ	0xFDF
 15230                           postinc2	equ	0xFDE
 15231                           postdec2	equ	0xFDD
 15232                           fsr2h	equ	0xFDA
 15233                           fsr2l	equ	0xFD9
 15234                           status	equ	0xFD8
 15235                           
 15236 ;; *************** function _strlen *****************
 15237 ;; Defined at:
 15238 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strlen.c"
 15239 ;; Parameters:    Size  Location     Type
 15240 ;;  s               2   27[COMRAM] PTR const unsigned char 
 15241 ;;		 -> NULL(0), setup_heater_S_text(3), setup_alarm_time(9), setup_date(9), 
 15242 ;;		 -> setup_time(9), heater_S_text(3), heater_text(4), LED_Int_text(3), 
 15243 ;;		 -> alarm_text(4), date(9), time(9), tempF(3), 
 15244 ;;		 -> tempC(3), buffer(31), 
 15245 ;; Auto vars:     Size  Location     Type
 15246 ;;  cp              2   31[COMRAM] PTR const unsigned char 
 15247 ;;		 -> NULL(0), setup_heater_S_text(3), setup_alarm_time(9), setup_date(9), 
 15248 ;;		 -> setup_time(9), heater_S_text(3), heater_text(4), LED_Int_text(3), 
 15249 ;;		 -> alarm_text(4), date(9), time(9), tempF(3), 
 15250 ;;		 -> tempC(3), buffer(31), 
 15251 ;; Return value:  Size  Location     Type
 15252 ;;                  2   27[COMRAM] unsigned int 
 15253 ;; Registers used:
 15254 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 15255 ;; Tracked objects:
 15256 ;;		On entry : 0/0
 15257 ;;		On exit  : 0/0
 15258 ;;		Unchanged: 0/0
 15259 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15260 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15261 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15262 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15263 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15264 ;;Total ram usage:        6 bytes
 15265 ;; Hardware stack levels used:    1
 15266 ;; Hardware stack levels required when called:    5
 15267 ;; This function calls:
 15268 ;;		Nothing
 15269 ;; This function is called by:
 15270 ;;		_drawtext
 15271 ;; This function uses a non-reentrant model
 15272 ;;
 15273                           
 15274                           	psect	text53
 15275  004666                     __ptext53:
 15276                           	opt stack 0
 15277  004666                     _strlen:
 15278                           	opt stack 23
 15279                           
 15280                           ; BSR set to: 0
 15281                           ;incstack = 0
 15282  004666  C01C  F020         	movff	strlen@s,strlen@cp
 15283  00466A  C01D  F021         	movff	strlen@s+1,strlen@cp+1
 15284  00466E  D003               	goto	l7852
 15285  004670                     l7850:
 15286  004670  4A20               	infsnz	strlen@cp,f,c
 15287  004672  2A21               	incf	strlen@cp+1,f,c
 15288  004674  D000               	goto	l7852
 15289  004676                     l7852:
 15290  004676  C020  FFD9         	movff	strlen@cp,fsr2l
 15291  00467A  C021  FFDA         	movff	strlen@cp+1,fsr2h
 15292  00467E  50DF               	movf	indf2,w,c
 15293  004680  A4D8               	btfss	status,2,c
 15294  004682  D7F6               	goto	l7850
 15295  004684  C01C  F01E         	movff	strlen@s,??_strlen
 15296  004688  C01D  F01F         	movff	strlen@s+1,??_strlen+1
 15297  00468C  1E1E               	comf	??_strlen,f,c
 15298  00468E  1E1F               	comf	??_strlen+1,f,c
 15299  004690  4A1E               	infsnz	??_strlen,f,c
 15300  004692  2A1F               	incf	??_strlen+1,f,c
 15301  004694  5020               	movf	strlen@cp,w,c
 15302  004696  241E               	addwf	??_strlen,w,c
 15303  004698  6E1C               	movwf	?_strlen,c
 15304  00469A  5021               	movf	strlen@cp+1,w,c
 15305  00469C  201F               	addwfc	??_strlen+1,w,c
 15306  00469E  6E1D               	movwf	?_strlen+1,c
 15307  0046A0  D000               	goto	l1602
 15308  0046A2                     l1602:
 15309  0046A2  0012               	return		;funcret
 15310  0046A4                     __end_of_strlen:
 15311                           	opt stack 0
 15312                           tblptru	equ	0xFF8
 15313                           tblptrh	equ	0xFF7
 15314                           tblptrl	equ	0xFF6
 15315                           tablat	equ	0xFF5
 15316                           prodh	equ	0xFF4
 15317                           prodl	equ	0xFF3
 15318                           intcon	equ	0xFF2
 15319                           intcon2	equ	0xFF1
 15320                           intcon3	equ	0xFF0
 15321                           postinc0	equ	0xFEE
 15322                           wreg	equ	0xFE8
 15323                           postdec1	equ	0xFE5
 15324                           fsr1l	equ	0xFE1
 15325                           indf2	equ	0xFDF
 15326                           postinc2	equ	0xFDE
 15327                           postdec2	equ	0xFDD
 15328                           fsr2h	equ	0xFDA
 15329                           fsr2l	equ	0xFD9
 15330                           status	equ	0xFD8
 15331                           
 15332 ;; *************** function _drawChar *****************
 15333 ;; Defined at:
 15334 ;;		line 459 in file "ST7735_TFT.inc"
 15335 ;; Parameters:    Size  Location     Type
 15336 ;;  x               1    wreg     unsigned char 
 15337 ;;  y               1   56[COMRAM] unsigned char 
 15338 ;;  c               1   57[COMRAM] unsigned char 
 15339 ;;  color           2   58[COMRAM] unsigned int 
 15340 ;;  bg              2   60[COMRAM] unsigned int 
 15341 ;;  size            1   62[COMRAM] unsigned char 
 15342 ;; Auto vars:     Size  Location     Type
 15343 ;;  x               1   64[COMRAM] unsigned char 
 15344 ;;  line            1   63[COMRAM] unsigned char 
 15345 ;;  i               1   66[COMRAM] unsigned char 
 15346 ;;  j               1   65[COMRAM] unsigned char 
 15347 ;; Return value:  Size  Location     Type
 15348 ;;		None               void
 15349 ;; Registers used:
 15350 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15351 ;; Tracked objects:
 15352 ;;		On entry : 0/0
 15353 ;;		On exit  : 0/0
 15354 ;;		Unchanged: 0/0
 15355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15356 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15357 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15358 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15359 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15360 ;;Total ram usage:       11 bytes
 15361 ;; Hardware stack levels used:    1
 15362 ;; Hardware stack levels required when called:   10
 15363 ;; This function calls:
 15364 ;;		___wmul
 15365 ;;		_drawPixel
 15366 ;;		_fillRect
 15367 ;; This function is called by:
 15368 ;;		_drawtext
 15369 ;; This function uses a non-reentrant model
 15370 ;;
 15371                           
 15372                           	psect	text54
 15373  002BDC                     __ptext54:
 15374                           	opt stack 0
 15375  002BDC                     _drawChar:
 15376                           	opt stack 18
 15377                           
 15378                           ;incstack = 0
 15379                           ;drawChar@x stored from wreg
 15380  002BDC  6E41               	movwf	drawChar@x,c
 15381                           
 15382                           ;ST7735_TFT.inc: 461: char i, j;
 15383                           ;ST7735_TFT.inc: 462: if((x >= 128) || (y >= 160))
 15384  002BDE  0E80               	movlw	128
 15385  002BE0  6041               	cpfslt	drawChar@x,c
 15386  002BE2  D0A6               	goto	l397
 15387  002BE4  0E9F               	movlw	159
 15388  002BE6  6439               	cpfsgt	drawChar@y,c
 15389  002BE8  D001               	goto	l7798
 15390                           
 15391                           ;ST7735_TFT.inc: 463: return;
 15392  002BEA  D0A2               	goto	l397
 15393  002BEC                     l7798:
 15394                           
 15395                           ;ST7735_TFT.inc: 464: if(size < 1) size = 1;
 15396  002BEC  503F               	movf	drawChar@size,w,c
 15397  002BEE  A4D8               	btfss	status,2,c
 15398  002BF0  D003               	goto	l7802
 15399  002BF2  0E01               	movlw	1
 15400  002BF4  6E3F               	movwf	drawChar@size,c
 15401  002BF6  D000               	goto	l7802
 15402  002BF8                     l7802:
 15403                           
 15404                           ;ST7735_TFT.inc: 465: if((c < ' ') || (c > '~'))
 15405  002BF8  0E1F               	movlw	31
 15406  002BFA  643A               	cpfsgt	drawChar@c,c
 15407  002BFC  D004               	goto	l7806
 15408  002BFE  0E7E               	movlw	126
 15409  002C00  643A               	cpfsgt	drawChar@c,c
 15410  002C02  D003               	goto	l399
 15411  002C04  D000               	goto	l7806
 15412  002C06                     l7806:
 15413                           
 15414                           ;ST7735_TFT.inc: 466: c = '?';
 15415  002C06  0E3F               	movlw	63
 15416  002C08  6E3A               	movwf	drawChar@c,c
 15417  002C0A                     l399:
 15418                           
 15419                           ;ST7735_TFT.inc: 467: for(i=0; i<5; i++ ) {
 15420  002C0A  0E00               	movlw	0
 15421  002C0C  6E43               	movwf	drawChar@i,c
 15422  002C0E                     l7808:
 15423  002C0E  0E04               	movlw	4
 15424  002C10  6443               	cpfsgt	drawChar@i,c
 15425  002C12  D001               	goto	l7812
 15426  002C14  D08D               	goto	l397
 15427  002C16                     l7812:
 15428                           
 15429                           ;ST7735_TFT.inc: 468: unsigned char line;
 15430                           ;ST7735_TFT.inc: 469: if(c < 'S')
 15431  002C16  0E53               	movlw	83
 15432  002C18  603A               	cpfslt	drawChar@c,c
 15433  002C1A  D015               	goto	l7816
 15434                           
 15435                           ;ST7735_TFT.inc: 470: line = font[(c - 32)*5 + i];
 15436  002C1C  0EE0               	movlw	224
 15437  002C1E  243A               	addwf	drawChar@c,w,c
 15438  002C20  6E2A               	movwf	___wmul@multiplier,c
 15439  002C22  6A2B               	clrf	___wmul@multiplier+1,c
 15440  002C24  0EFF               	movlw	255
 15441  002C26  222B               	addwfc	___wmul@multiplier+1,f,c
 15442  002C28  0E00               	movlw	0
 15443  002C2A  6E2D               	movwf	___wmul@multiplicand+1,c
 15444  002C2C  0E05               	movlw	5
 15445  002C2E  6E2C               	movwf	___wmul@multiplicand,c
 15446  002C30  ECC3  F024         	call	___wmul	;wreg free
 15447  002C34  5043               	movf	drawChar@i,w,c
 15448  002C36  262A               	addwf	?___wmul,f,c
 15449  002C38  0E00               	movlw	0
 15450  002C3A  222B               	addwfc	?___wmul+1,f,c
 15451  002C3C  0EB9               	movlw	low _font
 15452  002C3E  242A               	addwf	?___wmul,w,c
 15453  002C40  6EF6               	movwf	tblptrl,c
 15454  002C42  0EFC               	movlw	high _font
 15455  002C44  D014               	goto	L9
 15456  002C46                     l7816:
 15457                           
 15458                           ;ST7735_TFT.inc: 471: else
 15459                           ;ST7735_TFT.inc: 472: line = font2[(c - 'S')*5 + i];
 15460  002C46  0EAD               	movlw	173
 15461  002C48  243A               	addwf	drawChar@c,w,c
 15462  002C4A  6E2A               	movwf	___wmul@multiplier,c
 15463  002C4C  6A2B               	clrf	___wmul@multiplier+1,c
 15464  002C4E  0EFF               	movlw	255
 15465  002C50  222B               	addwfc	___wmul@multiplier+1,f,c
 15466  002C52  0E00               	movlw	0
 15467  002C54  6E2D               	movwf	___wmul@multiplicand+1,c
 15468  002C56  0E05               	movlw	5
 15469  002C58  6E2C               	movwf	___wmul@multiplicand,c
 15470  002C5A  ECC3  F024         	call	___wmul	;wreg free
 15471  002C5E  5043               	movf	drawChar@i,w,c
 15472  002C60  262A               	addwf	?___wmul,f,c
 15473  002C62  0E00               	movlw	0
 15474  002C64  222B               	addwfc	?___wmul+1,f,c
 15475  002C66  0EB8               	movlw	low _font2
 15476  002C68  242A               	addwf	?___wmul,w,c
 15477  002C6A  6EF6               	movwf	tblptrl,c
 15478  002C6C  0EFD               	movlw	high _font2
 15479  002C6E                     L9:
 15480  002C6E  202B               	addwfc	?___wmul+1,w,c
 15481  002C70  6EF7               	movwf	tblptrh,c
 15482  002C72                     	if	0	;There are less than 3 active tblptr bytes
 15483  002C72                     	endif
 15484  002C72  0008               	tblrd		*
 15485  002C74  CFF5 F040          	movff	tablat,drawChar@line
 15486  002C78  D000               	goto	l7818
 15487  002C7A                     l7818:
 15488                           
 15489                           ;ST7735_TFT.inc: 473: for(j=0; j<7; j++, line >>= 1) {
 15490  002C7A  0E00               	movlw	0
 15491  002C7C  6E42               	movwf	drawChar@j,c
 15492  002C7E                     l7820:
 15493  002C7E  0E06               	movlw	6
 15494  002C80  6442               	cpfsgt	drawChar@j,c
 15495  002C82  D001               	goto	l406
 15496  002C84  D053               	goto	l7844
 15497  002C86                     l406:
 15498                           
 15499                           ;ST7735_TFT.inc: 474: if(line & 0x01) {
 15500  002C86  A040               	btfss	drawChar@line,0,c
 15501  002C88  D023               	goto	l7830
 15502                           
 15503                           ;ST7735_TFT.inc: 475: if(size == 1) drawPixel(x+i, y+j, color);
 15504  002C8A  043F               	decf	drawChar@size,w,c
 15505  002C8C  A4D8               	btfss	status,2,c
 15506  002C8E  D00C               	goto	l7828
 15507  002C90  5039               	movf	drawChar@y,w,c
 15508  002C92  2442               	addwf	drawChar@j,w,c
 15509  002C94  6E23               	movwf	drawPixel@y,c
 15510  002C96  C03B  F024         	movff	drawChar@color,drawPixel@color
 15511  002C9A  C03C  F025         	movff	drawChar@color+1,drawPixel@color+1
 15512  002C9E  5041               	movf	drawChar@x,w,c
 15513  002CA0  2443               	addwf	drawChar@i,w,c
 15514  002CA2  EC96  F024         	call	_drawPixel
 15515  002CA6  D03E               	goto	l7838
 15516  002CA8                     l7828:
 15517                           
 15518                           ;ST7735_TFT.inc: 476: else fillRect(x+(i*size), y+(j*size), size, size, color);
 15519  002CA8  5042               	movf	drawChar@j,w,c
 15520  002CAA  023F               	mulwf	drawChar@size,c
 15521  002CAC  50F3               	movf	prodl,w,c
 15522  002CAE  2439               	addwf	drawChar@y,w,c
 15523  002CB0  6E2E               	movwf	fillRect@y,c
 15524  002CB2  C03F  F02F         	movff	drawChar@size,fillRect@w
 15525  002CB6  C03F  F030         	movff	drawChar@size,fillRect@h
 15526  002CBA  C03B  F031         	movff	drawChar@color,fillRect@color
 15527  002CBE  C03C  F032         	movff	drawChar@color+1,fillRect@color+1
 15528  002CC2  5043               	movf	drawChar@i,w,c
 15529  002CC4  023F               	mulwf	drawChar@size,c
 15530  002CC6  50F3               	movf	prodl,w,c
 15531  002CC8  2441               	addwf	drawChar@x,w,c
 15532  002CCA  ECA6  F022         	call	_fillRect
 15533                           
 15534                           ;ST7735_TFT.inc: 477: }
 15535  002CCE  D02A               	goto	l7838
 15536  002CD0                     l7830:
 15537                           
 15538                           ;ST7735_TFT.inc: 478: else if(bg != color) {
 15539  002CD0  503B               	movf	drawChar@color,w,c
 15540  002CD2  183D               	xorwf	drawChar@bg,w,c
 15541  002CD4  E104               	bnz	u6910
 15542  002CD6  503C               	movf	drawChar@color+1,w,c
 15543  002CD8  183E               	xorwf	drawChar@bg+1,w,c
 15544  002CDA  B4D8               	btfsc	status,2,c
 15545  002CDC  D023               	goto	l7838
 15546  002CDE                     u6910:
 15547                           
 15548                           ;ST7735_TFT.inc: 479: if(size == 1) drawPixel(x+i, y+j, bg);
 15549  002CDE  043F               	decf	drawChar@size,w,c
 15550  002CE0  A4D8               	btfss	status,2,c
 15551  002CE2  D00C               	goto	l7836
 15552  002CE4  5039               	movf	drawChar@y,w,c
 15553  002CE6  2442               	addwf	drawChar@j,w,c
 15554  002CE8  6E23               	movwf	drawPixel@y,c
 15555  002CEA  C03D  F024         	movff	drawChar@bg,drawPixel@color
 15556  002CEE  C03E  F025         	movff	drawChar@bg+1,drawPixel@color+1
 15557  002CF2  5041               	movf	drawChar@x,w,c
 15558  002CF4  2443               	addwf	drawChar@i,w,c
 15559  002CF6  EC96  F024         	call	_drawPixel
 15560  002CFA  D014               	goto	l7838
 15561  002CFC                     l7836:
 15562                           
 15563                           ;ST7735_TFT.inc: 480: else fillRect(x+i*size, y+j*size, size, size, bg);
 15564  002CFC  5042               	movf	drawChar@j,w,c
 15565  002CFE  023F               	mulwf	drawChar@size,c
 15566  002D00  50F3               	movf	prodl,w,c
 15567  002D02  2439               	addwf	drawChar@y,w,c
 15568  002D04  6E2E               	movwf	fillRect@y,c
 15569  002D06  C03F  F02F         	movff	drawChar@size,fillRect@w
 15570  002D0A  C03F  F030         	movff	drawChar@size,fillRect@h
 15571  002D0E  C03D  F031         	movff	drawChar@bg,fillRect@color
 15572  002D12  C03E  F032         	movff	drawChar@bg+1,fillRect@color+1
 15573  002D16  5043               	movf	drawChar@i,w,c
 15574  002D18  023F               	mulwf	drawChar@size,c
 15575  002D1A  50F3               	movf	prodl,w,c
 15576  002D1C  2441               	addwf	drawChar@x,w,c
 15577  002D1E  ECA6  F022         	call	_fillRect
 15578  002D22  D000               	goto	l7838
 15579  002D24                     l7838:
 15580  002D24  2A42               	incf	drawChar@j,f,c
 15581  002D26  90D8               	bcf	status,0,c
 15582  002D28  3240               	rrcf	drawChar@line,f,c
 15583  002D2A  D7A9               	goto	l7820
 15584  002D2C                     l7844:
 15585  002D2C  2A43               	incf	drawChar@i,f,c
 15586  002D2E  D76F               	goto	l7808
 15587  002D30                     l397:
 15588  002D30  0012               	return		;funcret
 15589  002D32                     __end_of_drawChar:
 15590                           	opt stack 0
 15591                           tblptru	equ	0xFF8
 15592                           tblptrh	equ	0xFF7
 15593                           tblptrl	equ	0xFF6
 15594                           tablat	equ	0xFF5
 15595                           prodh	equ	0xFF4
 15596                           prodl	equ	0xFF3
 15597                           intcon	equ	0xFF2
 15598                           intcon2	equ	0xFF1
 15599                           intcon3	equ	0xFF0
 15600                           postinc0	equ	0xFEE
 15601                           wreg	equ	0xFE8
 15602                           postdec1	equ	0xFE5
 15603                           fsr1l	equ	0xFE1
 15604                           indf2	equ	0xFDF
 15605                           postinc2	equ	0xFDE
 15606                           postdec2	equ	0xFDD
 15607                           fsr2h	equ	0xFDA
 15608                           fsr2l	equ	0xFD9
 15609                           status	equ	0xFD8
 15610                           
 15611 ;; *************** function _fillRect *****************
 15612 ;; Defined at:
 15613 ;;		line 449 in file "ST7735_TFT.inc"
 15614 ;; Parameters:    Size  Location     Type
 15615 ;;  x               1    wreg     unsigned char 
 15616 ;;  y               1   45[COMRAM] unsigned char 
 15617 ;;  w               1   46[COMRAM] unsigned char 
 15618 ;;  h               1   47[COMRAM] unsigned char 
 15619 ;;  color           2   48[COMRAM] unsigned int 
 15620 ;; Auto vars:     Size  Location     Type
 15621 ;;  x               1   53[COMRAM] unsigned char 
 15622 ;;  i               2   54[COMRAM] int 
 15623 ;; Return value:  Size  Location     Type
 15624 ;;		None               void
 15625 ;; Registers used:
 15626 ;;		wreg, status,2, status,0, cstack
 15627 ;; Tracked objects:
 15628 ;;		On entry : 0/0
 15629 ;;		On exit  : 0/0
 15630 ;;		Unchanged: 0/0
 15631 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15632 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15633 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15634 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15635 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15636 ;;Total ram usage:       11 bytes
 15637 ;; Hardware stack levels used:    1
 15638 ;; Hardware stack levels required when called:    9
 15639 ;; This function calls:
 15640 ;;		_drawFastVLine
 15641 ;; This function is called by:
 15642 ;;		_drawChar
 15643 ;;		_Initialize_Setup_Time_Screen
 15644 ;;		_Update_Setup_Screen_Cursor
 15645 ;;		_Initialize_Setup_Alarm_Screen
 15646 ;; This function uses a non-reentrant model
 15647 ;;
 15648                           
 15649                           	psect	text55
 15650  00454C                     __ptext55:
 15651                           	opt stack 0
 15652  00454C                     _fillRect:
 15653                           	opt stack 18
 15654                           
 15655                           ;incstack = 0
 15656                           ;fillRect@x stored from wreg
 15657  00454C  6E36               	movwf	fillRect@x,c
 15658                           
 15659                           ;ST7735_TFT.inc: 451: signed int i;
 15660                           ;ST7735_TFT.inc: 453: for (i = x; i < x + w; i++)
 15661  00454E  C036  F037         	movff	fillRect@x,fillRect@i
 15662  004552  6A38               	clrf	fillRect@i+1,c
 15663  004554  D00E               	goto	l7776
 15664  004556                     l7772:
 15665                           
 15666                           ;ST7735_TFT.inc: 454: {
 15667                           ;ST7735_TFT.inc: 455: drawFastVLine(i, y, h, color);
 15668  004556  C02E  F023         	movff	fillRect@y,drawFastVLine@y
 15669  00455A  C030  F024         	movff	fillRect@h,drawFastVLine@h
 15670  00455E  C031  F025         	movff	fillRect@color,drawFastVLine@color
 15671  004562  C032  F026         	movff	fillRect@color+1,drawFastVLine@color+1
 15672  004566  5037               	movf	fillRect@i,w,c
 15673  004568  EC40  F01F         	call	_drawFastVLine
 15674  00456C  4A37               	infsnz	fillRect@i,f,c
 15675  00456E  2A38               	incf	fillRect@i+1,f,c
 15676  004570  D000               	goto	l7776
 15677  004572                     l7776:
 15678  004572  502F               	movf	fillRect@w,w,c
 15679  004574  C036  F033         	movff	fillRect@x,??_fillRect
 15680  004578  6A34               	clrf	(??_fillRect+1)& (0+255),c
 15681  00457A  2633               	addwf	??_fillRect,f,c
 15682  00457C  0E00               	movlw	0
 15683  00457E  2234               	addwfc	??_fillRect+1,f,c
 15684  004580  5033               	movf	??_fillRect,w,c
 15685  004582  5C37               	subwf	fillRect@i,w,c
 15686  004584  5038               	movf	fillRect@i+1,w,c
 15687  004586  0A80               	xorlw	128
 15688  004588  6E35               	movwf	(??_fillRect+2)& (0+255),c
 15689  00458A  5034               	movf	??_fillRect+1,w,c
 15690  00458C  0A80               	xorlw	128
 15691  00458E  5835               	subwfb	(??_fillRect+2)& (0+255),w,c
 15692  004590  A0D8               	btfss	status,0,c
 15693  004592  D7E1               	goto	l7772
 15694  004594  0012               	return		;funcret
 15695  004596                     __end_of_fillRect:
 15696                           	opt stack 0
 15697                           tblptru	equ	0xFF8
 15698                           tblptrh	equ	0xFF7
 15699                           tblptrl	equ	0xFF6
 15700                           tablat	equ	0xFF5
 15701                           prodh	equ	0xFF4
 15702                           prodl	equ	0xFF3
 15703                           intcon	equ	0xFF2
 15704                           intcon2	equ	0xFF1
 15705                           intcon3	equ	0xFF0
 15706                           postinc0	equ	0xFEE
 15707                           wreg	equ	0xFE8
 15708                           postdec1	equ	0xFE5
 15709                           fsr1l	equ	0xFE1
 15710                           indf2	equ	0xFDF
 15711                           postinc2	equ	0xFDE
 15712                           postdec2	equ	0xFDD
 15713                           fsr2h	equ	0xFDA
 15714                           fsr2l	equ	0xFD9
 15715                           status	equ	0xFD8
 15716                           
 15717 ;; *************** function _drawFastVLine *****************
 15718 ;; Defined at:
 15719 ;;		line 428 in file "ST7735_TFT.inc"
 15720 ;; Parameters:    Size  Location     Type
 15721 ;;  x               1    wreg     unsigned char 
 15722 ;;  y               1   34[COMRAM] unsigned char 
 15723 ;;  h               1   35[COMRAM] unsigned char 
 15724 ;;  color           2   36[COMRAM] unsigned int 
 15725 ;; Auto vars:     Size  Location     Type
 15726 ;;  x               1   44[COMRAM] unsigned char 
 15727 ;;  lo              1   43[COMRAM] unsigned char 
 15728 ;;  hi              1   42[COMRAM] unsigned char 
 15729 ;; Return value:  Size  Location     Type
 15730 ;;		None               void
 15731 ;; Registers used:
 15732 ;;		wreg, status,2, status,0, cstack
 15733 ;; Tracked objects:
 15734 ;;		On entry : 0/0
 15735 ;;		On exit  : 0/0
 15736 ;;		Unchanged: 0/0
 15737 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15738 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15739 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15740 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15741 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15742 ;;Total ram usage:       11 bytes
 15743 ;; Hardware stack levels used:    1
 15744 ;; Hardware stack levels required when called:    8
 15745 ;; This function calls:
 15746 ;;		_setAddrWindow
 15747 ;;		_spiwrite
 15748 ;; This function is called by:
 15749 ;;		_fillRect
 15750 ;;		_fillCircleHelper
 15751 ;;		_fillCircle
 15752 ;;		_drawRect
 15753 ;; This function uses a non-reentrant model
 15754 ;;
 15755                           
 15756                           	psect	text56
 15757  003E80                     __ptext56:
 15758                           	opt stack 0
 15759  003E80                     _drawFastVLine:
 15760                           	opt stack 18
 15761                           
 15762                           ;incstack = 0
 15763                           ;drawFastVLine@x stored from wreg
 15764  003E80  6E2D               	movwf	drawFastVLine@x,c
 15765                           
 15766                           ;ST7735_TFT.inc: 430: unsigned char hi, lo;
 15767                           ;ST7735_TFT.inc: 431: if((x >= 128) || (y >= 160))
 15768  003E82  0E80               	movlw	128
 15769  003E84  602D               	cpfslt	drawFastVLine@x,c
 15770  003E86  D03F               	goto	l381
 15771  003E88  0E9F               	movlw	159
 15772  003E8A  6423               	cpfsgt	drawFastVLine@y,c
 15773  003E8C  D001               	goto	l7742
 15774                           
 15775                           ;ST7735_TFT.inc: 432: return;
 15776  003E8E  D03B               	goto	l381
 15777  003E90                     l7742:
 15778                           
 15779                           ;ST7735_TFT.inc: 433: if((y + h - 1) >= 160)
 15780  003E90  0EFF               	movlw	255
 15781  003E92  6E27               	movwf	??_drawFastVLine& (0+255),c
 15782  003E94  0EFF               	movlw	255
 15783  003E96  6E28               	movwf	(??_drawFastVLine+1)& (0+255),c
 15784  003E98  5024               	movf	drawFastVLine@h,w,c
 15785  003E9A  C023  F029         	movff	drawFastVLine@y,??_drawFastVLine+2
 15786  003E9E  6A2A               	clrf	(??_drawFastVLine+3)& (0+255),c
 15787  003EA0  2629               	addwf	??_drawFastVLine+2,f,c
 15788  003EA2  0E00               	movlw	0
 15789  003EA4  222A               	addwfc	??_drawFastVLine+3,f,c
 15790  003EA6  5027               	movf	??_drawFastVLine,w,c
 15791  003EA8  2629               	addwf	??_drawFastVLine+2,f,c
 15792  003EAA  5028               	movf	??_drawFastVLine+1,w,c
 15793  003EAC  222A               	addwfc	??_drawFastVLine+3,f,c
 15794  003EAE  BE2A               	btfsc	??_drawFastVLine+3,7,c
 15795  003EB0  D00B               	goto	l7746
 15796  003EB2  502A               	movf	??_drawFastVLine+3,w,c
 15797  003EB4  E104               	bnz	u6760
 15798  003EB6  0EA0               	movlw	160
 15799  003EB8  5C29               	subwf	??_drawFastVLine+2,w,c
 15800  003EBA  A0D8               	btfss	status,0,c
 15801  003EBC  D005               	goto	l7746
 15802  003EBE                     u6760:
 15803                           
 15804                           ;ST7735_TFT.inc: 434: h = 160 - y;
 15805  003EBE  5023               	movf	drawFastVLine@y,w,c
 15806  003EC0  0800               	sublw	0
 15807  003EC2  0FA0               	addlw	160
 15808  003EC4  6E24               	movwf	drawFastVLine@h,c
 15809  003EC6  D000               	goto	l7746
 15810  003EC8                     l7746:
 15811                           
 15812                           ;ST7735_TFT.inc: 435: hi = color >> 8; lo = color;
 15813  003EC8  5026               	movf	drawFastVLine@color+1,w,c
 15814  003ECA  6E2B               	movwf	drawFastVLine@hi,c
 15815  003ECC  C025  F02C         	movff	drawFastVLine@color,drawFastVLine@lo
 15816                           
 15817                           ;ST7735_TFT.inc: 436: setAddrWindow(x, y, x, y + h - 1);
 15818  003ED0  C023  F01F         	movff	drawFastVLine@y,setAddrWindow@y0
 15819  003ED4  C02D  F020         	movff	drawFastVLine@x,setAddrWindow@x1
 15820  003ED8  5023               	movf	drawFastVLine@y,w,c
 15821  003EDA  2424               	addwf	drawFastVLine@h,w,c
 15822  003EDC  6E27               	movwf	??_drawFastVLine& (0+255),c
 15823  003EDE  0427               	decf	??_drawFastVLine,w,c
 15824  003EE0  6E21               	movwf	setAddrWindow@y1,c
 15825  003EE2  502D               	movf	drawFastVLine@x,w,c
 15826  003EE4  EC59  F022         	call	_setAddrWindow
 15827                           
 15828                           ;ST7735_TFT.inc: 437: PORTEbits.RE0 = 1;
 15829  003EE8  8084               	bsf	3972,0,c	;volatile
 15830                           
 15831                           ;ST7735_TFT.inc: 438: PORTEbits.RE1 = 0;
 15832  003EEA  9284               	bcf	3972,1,c	;volatile
 15833                           
 15834                           ;ST7735_TFT.inc: 440: while (h--) {
 15835  003EEC  D007               	goto	l7758
 15836  003EEE                     l7756:
 15837                           
 15838                           ;ST7735_TFT.inc: 441: spiwrite(hi);
 15839  003EEE  502B               	movf	drawFastVLine@hi,w,c
 15840  003EF0  ECB8  F025         	call	_spiwrite
 15841                           
 15842                           ;ST7735_TFT.inc: 442: spiwrite(lo);
 15843  003EF4  502C               	movf	drawFastVLine@lo,w,c
 15844  003EF6  ECB8  F025         	call	_spiwrite
 15845  003EFA  D000               	goto	l7758
 15846  003EFC                     l7758:
 15847  003EFC  0624               	decf	drawFastVLine@h,f,c
 15848  003EFE  2824               	incf	drawFastVLine@h,w,c
 15849  003F00  A4D8               	btfss	status,2,c
 15850  003F02  D7F5               	goto	l7756
 15851                           
 15852                           ;ST7735_TFT.inc: 443: }
 15853                           ;ST7735_TFT.inc: 444: PORTEbits.RE1 = 1;
 15854  003F04  8284               	bsf	3972,1,c	;volatile
 15855  003F06                     l381:
 15856  003F06  0012               	return		;funcret
 15857  003F08                     __end_of_drawFastVLine:
 15858                           	opt stack 0
 15859                           tblptru	equ	0xFF8
 15860                           tblptrh	equ	0xFF7
 15861                           tblptrl	equ	0xFF6
 15862                           tablat	equ	0xFF5
 15863                           prodh	equ	0xFF4
 15864                           prodl	equ	0xFF3
 15865                           intcon	equ	0xFF2
 15866                           intcon2	equ	0xFF1
 15867                           intcon3	equ	0xFF0
 15868                           postinc0	equ	0xFEE
 15869                           wreg	equ	0xFE8
 15870                           postdec1	equ	0xFE5
 15871                           fsr1l	equ	0xFE1
 15872                           indf2	equ	0xFDF
 15873                           postinc2	equ	0xFDE
 15874                           postdec2	equ	0xFDD
 15875                           fsr2h	equ	0xFDA
 15876                           fsr2l	equ	0xFD9
 15877                           status	equ	0xFD8
 15878                           
 15879 ;; *************** function _drawCircle *****************
 15880 ;; Defined at:
 15881 ;;		line 540 in file "ST7735_TFT.inc"
 15882 ;; Parameters:    Size  Location     Type
 15883 ;;  x0              2   38[COMRAM] int 
 15884 ;;  y0              2   40[COMRAM] int 
 15885 ;;  r               2   42[COMRAM] int 
 15886 ;;  color           2   44[COMRAM] unsigned int 
 15887 ;; Auto vars:     Size  Location     Type
 15888 ;;  y               2   56[COMRAM] int 
 15889 ;;  x               2   54[COMRAM] int 
 15890 ;;  f               2   52[COMRAM] int 
 15891 ;;  ddF_y           2   50[COMRAM] int 
 15892 ;;  ddF_x           2   48[COMRAM] int 
 15893 ;; Return value:  Size  Location     Type
 15894 ;;		None               void
 15895 ;; Registers used:
 15896 ;;		wreg, status,2, status,0, cstack
 15897 ;; Tracked objects:
 15898 ;;		On entry : 0/0
 15899 ;;		On exit  : 0/0
 15900 ;;		Unchanged: 0/0
 15901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15902 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15903 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15904 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15905 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15906 ;;Total ram usage:       20 bytes
 15907 ;; Hardware stack levels used:    1
 15908 ;; Hardware stack levels required when called:    9
 15909 ;; This function calls:
 15910 ;;		_drawPixel
 15911 ;; This function is called by:
 15912 ;;		_Initialize_Main_Screen
 15913 ;;		_Initialize_Setup_Heater_Screen
 15914 ;; This function uses a non-reentrant model
 15915 ;;
 15916                           
 15917                           	psect	text57
 15918  0025AA                     __ptext57:
 15919                           	opt stack 0
 15920  0025AA                     _drawCircle:
 15921                           	opt stack 20
 15922                           
 15923                           ;ST7735_TFT.inc: 542: signed int f, ddF_x, ddF_y, x, y;
 15924                           ;ST7735_TFT.inc: 543: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
 15925                           
 15926                           ;incstack = 0
 15927  0025AA  C02B  F02F         	movff	drawCircle@r,??_drawCircle
 15928  0025AE  C02C  F030         	movff	drawCircle@r+1,??_drawCircle+1
 15929  0025B2  1E2F               	comf	??_drawCircle,f,c
 15930  0025B4  1E30               	comf	??_drawCircle+1,f,c
 15931  0025B6  4A2F               	infsnz	??_drawCircle,f,c
 15932  0025B8  2A30               	incf	??_drawCircle+1,f,c
 15933  0025BA  0E01               	movlw	1
 15934  0025BC  242F               	addwf	??_drawCircle,w,c
 15935  0025BE  6E35               	movwf	drawCircle@f,c
 15936  0025C0  0E00               	movlw	0
 15937  0025C2  2030               	addwfc	??_drawCircle+1,w,c
 15938  0025C4  6E36               	movwf	drawCircle@f+1,c
 15939  0025C6  0E00               	movlw	0
 15940  0025C8  6E32               	movwf	drawCircle@ddF_x+1,c
 15941  0025CA  0E01               	movlw	1
 15942  0025CC  6E31               	movwf	drawCircle@ddF_x,c
 15943  0025CE  C02B  F02F         	movff	drawCircle@r,??_drawCircle
 15944  0025D2  C02C  F030         	movff	drawCircle@r+1,??_drawCircle+1
 15945  0025D6  90D8               	bcf	status,0,c
 15946  0025D8  362F               	rlcf	??_drawCircle,f,c
 15947  0025DA  3630               	rlcf	??_drawCircle+1,f,c
 15948  0025DC  1E2F               	comf	??_drawCircle,f,c
 15949  0025DE  1E30               	comf	??_drawCircle+1,f,c
 15950  0025E0  4A2F               	infsnz	??_drawCircle,f,c
 15951  0025E2  2A30               	incf	??_drawCircle+1,f,c
 15952  0025E4  C02F  F033         	movff	??_drawCircle,drawCircle@ddF_y
 15953  0025E8  C030  F034         	movff	??_drawCircle+1,drawCircle@ddF_y+1
 15954  0025EC  0E00               	movlw	0
 15955  0025EE  6E38               	movwf	drawCircle@x+1,c
 15956  0025F0  0E00               	movlw	0
 15957  0025F2  6E37               	movwf	drawCircle@x,c
 15958  0025F4  C02B  F039         	movff	drawCircle@r,drawCircle@y
 15959  0025F8  C02C  F03A         	movff	drawCircle@r+1,drawCircle@y+1
 15960                           
 15961                           ;ST7735_TFT.inc: 544: drawPixel(x0 , y0 + r, color);
 15962  0025FC  5029               	movf	drawCircle@y0,w,c
 15963  0025FE  242B               	addwf	drawCircle@r,w,c
 15964  002600  6E23               	movwf	drawPixel@y,c
 15965  002602  C02D  F024         	movff	drawCircle@color,drawPixel@color
 15966  002606  C02E  F025         	movff	drawCircle@color+1,drawPixel@color+1
 15967  00260A  5027               	movf	drawCircle@x0,w,c
 15968  00260C  EC96  F024         	call	_drawPixel
 15969                           
 15970                           ;ST7735_TFT.inc: 545: drawPixel(x0 , y0 - r, color);
 15971  002610  502B               	movf	drawCircle@r,w,c
 15972  002612  0800               	sublw	0
 15973  002614  2429               	addwf	drawCircle@y0,w,c
 15974  002616  6E23               	movwf	drawPixel@y,c
 15975  002618  C02D  F024         	movff	drawCircle@color,drawPixel@color
 15976  00261C  C02E  F025         	movff	drawCircle@color+1,drawPixel@color+1
 15977  002620  5027               	movf	drawCircle@x0,w,c
 15978  002622  EC96  F024         	call	_drawPixel
 15979                           
 15980                           ;ST7735_TFT.inc: 546: drawPixel(x0+r, y0 , color);
 15981  002626  C029  F023         	movff	drawCircle@y0,drawPixel@y
 15982  00262A  C02D  F024         	movff	drawCircle@color,drawPixel@color
 15983  00262E  C02E  F025         	movff	drawCircle@color+1,drawPixel@color+1
 15984  002632  5027               	movf	drawCircle@x0,w,c
 15985  002634  242B               	addwf	drawCircle@r,w,c
 15986  002636  EC96  F024         	call	_drawPixel
 15987                           
 15988                           ;ST7735_TFT.inc: 547: drawPixel(x0-r, y0 , color);
 15989  00263A  C029  F023         	movff	drawCircle@y0,drawPixel@y
 15990  00263E  C02D  F024         	movff	drawCircle@color,drawPixel@color
 15991  002642  C02E  F025         	movff	drawCircle@color+1,drawPixel@color+1
 15992  002646  502B               	movf	drawCircle@r,w,c
 15993  002648  0800               	sublw	0
 15994  00264A  2427               	addwf	drawCircle@x0,w,c
 15995  00264C  EC96  F024         	call	_drawPixel
 15996                           
 15997                           ;ST7735_TFT.inc: 548: while (x < y) {
 15998  002650  D078               	goto	l8042
 15999  002652                     l8014:
 16000                           
 16001                           ;ST7735_TFT.inc: 549: if (f >= 0) {
 16002  002652  BE36               	btfsc	drawCircle@f+1,7,c
 16003  002654  D00B               	goto	l445
 16004                           
 16005                           ;ST7735_TFT.inc: 550: y--;
 16006  002656  0639               	decf	drawCircle@y,f,c
 16007  002658  A0D8               	btfss	status,0,c
 16008  00265A  063A               	decf	drawCircle@y+1,f,c
 16009                           
 16010                           ;ST7735_TFT.inc: 551: ddF_y += 2;
 16011  00265C  0E02               	movlw	2
 16012  00265E  2633               	addwf	drawCircle@ddF_y,f,c
 16013  002660  0E00               	movlw	0
 16014  002662  2234               	addwfc	drawCircle@ddF_y+1,f,c
 16015                           
 16016                           ;ST7735_TFT.inc: 552: f += ddF_y;
 16017  002664  5033               	movf	drawCircle@ddF_y,w,c
 16018  002666  2635               	addwf	drawCircle@f,f,c
 16019  002668  5034               	movf	drawCircle@ddF_y+1,w,c
 16020  00266A  2236               	addwfc	drawCircle@f+1,f,c
 16021  00266C                     l445:
 16022                           
 16023                           ;ST7735_TFT.inc: 553: }
 16024                           ;ST7735_TFT.inc: 554: x++;
 16025  00266C  4A37               	infsnz	drawCircle@x,f,c
 16026  00266E  2A38               	incf	drawCircle@x+1,f,c
 16027                           
 16028                           ;ST7735_TFT.inc: 555: ddF_x += 2;
 16029  002670  0E02               	movlw	2
 16030  002672  2631               	addwf	drawCircle@ddF_x,f,c
 16031  002674  0E00               	movlw	0
 16032  002676  2232               	addwfc	drawCircle@ddF_x+1,f,c
 16033                           
 16034                           ;ST7735_TFT.inc: 556: f += ddF_x;
 16035  002678  5031               	movf	drawCircle@ddF_x,w,c
 16036  00267A  2635               	addwf	drawCircle@f,f,c
 16037  00267C  5032               	movf	drawCircle@ddF_x+1,w,c
 16038  00267E  2236               	addwfc	drawCircle@f+1,f,c
 16039                           
 16040                           ;ST7735_TFT.inc: 557: drawPixel(x0 + x, y0 + y, color);
 16041  002680  5029               	movf	drawCircle@y0,w,c
 16042  002682  2439               	addwf	drawCircle@y,w,c
 16043  002684  6E23               	movwf	drawPixel@y,c
 16044  002686  C02D  F024         	movff	drawCircle@color,drawPixel@color
 16045  00268A  C02E  F025         	movff	drawCircle@color+1,drawPixel@color+1
 16046  00268E  5027               	movf	drawCircle@x0,w,c
 16047  002690  2437               	addwf	drawCircle@x,w,c
 16048  002692  EC96  F024         	call	_drawPixel
 16049                           
 16050                           ;ST7735_TFT.inc: 558: drawPixel(x0 - x, y0 + y, color);
 16051  002696  5029               	movf	drawCircle@y0,w,c
 16052  002698  2439               	addwf	drawCircle@y,w,c
 16053  00269A  6E23               	movwf	drawPixel@y,c
 16054  00269C  C02D  F024         	movff	drawCircle@color,drawPixel@color
 16055  0026A0  C02E  F025         	movff	drawCircle@color+1,drawPixel@color+1
 16056  0026A4  5037               	movf	drawCircle@x,w,c
 16057  0026A6  0800               	sublw	0
 16058  0026A8  2427               	addwf	drawCircle@x0,w,c
 16059  0026AA  EC96  F024         	call	_drawPixel
 16060                           
 16061                           ;ST7735_TFT.inc: 559: drawPixel(x0 + x, y0 - y, color);
 16062  0026AE  5039               	movf	drawCircle@y,w,c
 16063  0026B0  0800               	sublw	0
 16064  0026B2  2429               	addwf	drawCircle@y0,w,c
 16065  0026B4  6E23               	movwf	drawPixel@y,c
 16066  0026B6  C02D  F024         	movff	drawCircle@color,drawPixel@color
 16067  0026BA  C02E  F025         	movff	drawCircle@color+1,drawPixel@color+1
 16068  0026BE  5027               	movf	drawCircle@x0,w,c
 16069  0026C0  2437               	addwf	drawCircle@x,w,c
 16070  0026C2  EC96  F024         	call	_drawPixel
 16071                           
 16072                           ;ST7735_TFT.inc: 560: drawPixel(x0 - x, y0 - y, color);
 16073  0026C6  5039               	movf	drawCircle@y,w,c
 16074  0026C8  0800               	sublw	0
 16075  0026CA  2429               	addwf	drawCircle@y0,w,c
 16076  0026CC  6E23               	movwf	drawPixel@y,c
 16077  0026CE  C02D  F024         	movff	drawCircle@color,drawPixel@color
 16078  0026D2  C02E  F025         	movff	drawCircle@color+1,drawPixel@color+1
 16079  0026D6  5037               	movf	drawCircle@x,w,c
 16080  0026D8  0800               	sublw	0
 16081  0026DA  2427               	addwf	drawCircle@x0,w,c
 16082  0026DC  EC96  F024         	call	_drawPixel
 16083                           
 16084                           ;ST7735_TFT.inc: 561: drawPixel(x0 + y, y0 + x, color);
 16085  0026E0  5029               	movf	drawCircle@y0,w,c
 16086  0026E2  2437               	addwf	drawCircle@x,w,c
 16087  0026E4  6E23               	movwf	drawPixel@y,c
 16088  0026E6  C02D  F024         	movff	drawCircle@color,drawPixel@color
 16089  0026EA  C02E  F025         	movff	drawCircle@color+1,drawPixel@color+1
 16090  0026EE  5027               	movf	drawCircle@x0,w,c
 16091  0026F0  2439               	addwf	drawCircle@y,w,c
 16092  0026F2  EC96  F024         	call	_drawPixel
 16093                           
 16094                           ;ST7735_TFT.inc: 562: drawPixel(x0 - y, y0 + x, color);
 16095  0026F6  5029               	movf	drawCircle@y0,w,c
 16096  0026F8  2437               	addwf	drawCircle@x,w,c
 16097  0026FA  6E23               	movwf	drawPixel@y,c
 16098  0026FC  C02D  F024         	movff	drawCircle@color,drawPixel@color
 16099  002700  C02E  F025         	movff	drawCircle@color+1,drawPixel@color+1
 16100  002704  5039               	movf	drawCircle@y,w,c
 16101  002706  0800               	sublw	0
 16102  002708  2427               	addwf	drawCircle@x0,w,c
 16103  00270A  EC96  F024         	call	_drawPixel
 16104                           
 16105                           ;ST7735_TFT.inc: 563: drawPixel(x0 + y, y0 - x, color);
 16106  00270E  5037               	movf	drawCircle@x,w,c
 16107  002710  0800               	sublw	0
 16108  002712  2429               	addwf	drawCircle@y0,w,c
 16109  002714  6E23               	movwf	drawPixel@y,c
 16110  002716  C02D  F024         	movff	drawCircle@color,drawPixel@color
 16111  00271A  C02E  F025         	movff	drawCircle@color+1,drawPixel@color+1
 16112  00271E  5027               	movf	drawCircle@x0,w,c
 16113  002720  2439               	addwf	drawCircle@y,w,c
 16114  002722  EC96  F024         	call	_drawPixel
 16115                           
 16116                           ;ST7735_TFT.inc: 564: drawPixel(x0 - y, y0 - x, color);
 16117  002726  5037               	movf	drawCircle@x,w,c
 16118  002728  0800               	sublw	0
 16119  00272A  2429               	addwf	drawCircle@y0,w,c
 16120  00272C  6E23               	movwf	drawPixel@y,c
 16121  00272E  C02D  F024         	movff	drawCircle@color,drawPixel@color
 16122  002732  C02E  F025         	movff	drawCircle@color+1,drawPixel@color+1
 16123  002736  5039               	movf	drawCircle@y,w,c
 16124  002738  0800               	sublw	0
 16125  00273A  2427               	addwf	drawCircle@x0,w,c
 16126  00273C  EC96  F024         	call	_drawPixel
 16127  002740  D000               	goto	l8042
 16128  002742                     l8042:
 16129  002742  5039               	movf	drawCircle@y,w,c
 16130  002744  5C37               	subwf	drawCircle@x,w,c
 16131  002746  5038               	movf	drawCircle@x+1,w,c
 16132  002748  0A80               	xorlw	128
 16133  00274A  6E2F               	movwf	??_drawCircle& (0+255),c
 16134  00274C  503A               	movf	drawCircle@y+1,w,c
 16135  00274E  0A80               	xorlw	128
 16136  002750  582F               	subwfb	??_drawCircle& (0+255),w,c
 16137  002752  A0D8               	btfss	status,0,c
 16138  002754  D77E               	goto	l8014
 16139  002756  0012               	return		;funcret
 16140  002758                     __end_of_drawCircle:
 16141                           	opt stack 0
 16142                           tblptru	equ	0xFF8
 16143                           tblptrh	equ	0xFF7
 16144                           tblptrl	equ	0xFF6
 16145                           tablat	equ	0xFF5
 16146                           prodh	equ	0xFF4
 16147                           prodl	equ	0xFF3
 16148                           intcon	equ	0xFF2
 16149                           intcon2	equ	0xFF1
 16150                           intcon3	equ	0xFF0
 16151                           postinc0	equ	0xFEE
 16152                           wreg	equ	0xFE8
 16153                           postdec1	equ	0xFE5
 16154                           fsr1l	equ	0xFE1
 16155                           indf2	equ	0xFDF
 16156                           postinc2	equ	0xFDE
 16157                           postdec2	equ	0xFDD
 16158                           fsr2h	equ	0xFDA
 16159                           fsr2l	equ	0xFD9
 16160                           status	equ	0xFD8
 16161                           
 16162 ;; *************** function _drawPixel *****************
 16163 ;; Defined at:
 16164 ;;		line 419 in file "ST7735_TFT.inc"
 16165 ;; Parameters:    Size  Location     Type
 16166 ;;  x               1    wreg     unsigned char 
 16167 ;;  y               1   34[COMRAM] unsigned char 
 16168 ;;  color           2   35[COMRAM] unsigned int 
 16169 ;; Auto vars:     Size  Location     Type
 16170 ;;  x               1   37[COMRAM] unsigned char 
 16171 ;; Return value:  Size  Location     Type
 16172 ;;		None               void
 16173 ;; Registers used:
 16174 ;;		wreg, status,2, status,0, cstack
 16175 ;; Tracked objects:
 16176 ;;		On entry : 0/0
 16177 ;;		On exit  : 0/0
 16178 ;;		Unchanged: 0/0
 16179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16180 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16181 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16182 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16183 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16184 ;;Total ram usage:        4 bytes
 16185 ;; Hardware stack levels used:    1
 16186 ;; Hardware stack levels required when called:    8
 16187 ;; This function calls:
 16188 ;;		_setAddrWindow
 16189 ;;		_write_data
 16190 ;; This function is called by:
 16191 ;;		_drawChar
 16192 ;;		_drawCircle
 16193 ;;		_drawCircleHelper
 16194 ;; This function uses a non-reentrant model
 16195 ;;
 16196                           
 16197                           	psect	text58
 16198  00492C                     __ptext58:
 16199                           	opt stack 0
 16200  00492C                     _drawPixel:
 16201                           	opt stack 19
 16202                           
 16203                           ;incstack = 0
 16204                           ;drawPixel@x stored from wreg
 16205  00492C  6E26               	movwf	drawPixel@x,c
 16206                           
 16207                           ;ST7735_TFT.inc: 421: if((x >= 128) || (y >= 160))
 16208  00492E  0E80               	movlw	128
 16209  004930  6026               	cpfslt	drawPixel@x,c
 16210  004932  D013               	goto	l375
 16211  004934  0E9F               	movlw	159
 16212  004936  6423               	cpfsgt	drawPixel@y,c
 16213  004938  D001               	goto	l7764
 16214                           
 16215                           ;ST7735_TFT.inc: 422: return;
 16216  00493A  D00F               	goto	l375
 16217  00493C                     l7764:
 16218                           
 16219                           ;ST7735_TFT.inc: 423: setAddrWindow(x,y,x+1,y+1);
 16220  00493C  C023  F01F         	movff	drawPixel@y,setAddrWindow@y0
 16221  004940  2826               	incf	drawPixel@x,w,c
 16222  004942  6E20               	movwf	setAddrWindow@x1,c
 16223  004944  2823               	incf	drawPixel@y,w,c
 16224  004946  6E21               	movwf	setAddrWindow@y1,c
 16225  004948  5026               	movf	drawPixel@x,w,c
 16226  00494A  EC59  F022         	call	_setAddrWindow
 16227                           
 16228                           ;ST7735_TFT.inc: 424: write_data(color >> 8);
 16229  00494E  5025               	movf	drawPixel@color+1,w,c
 16230  004950  EC01  F026         	call	_write_data
 16231                           
 16232                           ;ST7735_TFT.inc: 425: write_data(color & 0xFF);
 16233  004954  5024               	movf	drawPixel@color,w,c
 16234  004956  EC01  F026         	call	_write_data
 16235  00495A                     l375:
 16236  00495A  0012               	return		;funcret
 16237  00495C                     __end_of_drawPixel:
 16238                           	opt stack 0
 16239                           tblptru	equ	0xFF8
 16240                           tblptrh	equ	0xFF7
 16241                           tblptrl	equ	0xFF6
 16242                           tablat	equ	0xFF5
 16243                           prodh	equ	0xFF4
 16244                           prodl	equ	0xFF3
 16245                           intcon	equ	0xFF2
 16246                           intcon2	equ	0xFF1
 16247                           intcon3	equ	0xFF0
 16248                           postinc0	equ	0xFEE
 16249                           wreg	equ	0xFE8
 16250                           postdec1	equ	0xFE5
 16251                           fsr1l	equ	0xFE1
 16252                           indf2	equ	0xFDF
 16253                           postinc2	equ	0xFDE
 16254                           postdec2	equ	0xFDD
 16255                           fsr2h	equ	0xFDA
 16256                           fsr2l	equ	0xFD9
 16257                           status	equ	0xFD8
 16258                           
 16259 ;; *************** function _setAddrWindow *****************
 16260 ;; Defined at:
 16261 ;;		line 404 in file "ST7735_TFT.inc"
 16262 ;; Parameters:    Size  Location     Type
 16263 ;;  x0              1    wreg     unsigned char 
 16264 ;;  y0              1   30[COMRAM] unsigned char 
 16265 ;;  x1              1   31[COMRAM] unsigned char 
 16266 ;;  y1              1   32[COMRAM] unsigned char 
 16267 ;; Auto vars:     Size  Location     Type
 16268 ;;  x0              1   33[COMRAM] unsigned char 
 16269 ;; Return value:  Size  Location     Type
 16270 ;;		None               void
 16271 ;; Registers used:
 16272 ;;		wreg, status,2, status,0, cstack
 16273 ;; Tracked objects:
 16274 ;;		On entry : 0/0
 16275 ;;		On exit  : 0/0
 16276 ;;		Unchanged: 0/0
 16277 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16278 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16279 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16280 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16281 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16282 ;;Total ram usage:        4 bytes
 16283 ;; Hardware stack levels used:    1
 16284 ;; Hardware stack levels required when called:    7
 16285 ;; This function calls:
 16286 ;;		_write_command
 16287 ;;		_write_data
 16288 ;; This function is called by:
 16289 ;;		_drawPixel
 16290 ;;		_drawFastVLine
 16291 ;;		_fillRectangle
 16292 ;;		_drawFastHLine
 16293 ;; This function uses a non-reentrant model
 16294 ;;
 16295                           
 16296                           	psect	text59
 16297  0044B2                     __ptext59:
 16298                           	opt stack 0
 16299  0044B2                     _setAddrWindow:
 16300                           	opt stack 20
 16301                           
 16302                           ;incstack = 0
 16303                           ;setAddrWindow@x0 stored from wreg
 16304  0044B2  6E22               	movwf	setAddrWindow@x0,c
 16305                           
 16306                           ;ST7735_TFT.inc: 406: write_command(0x2A);
 16307  0044B4  0E2A               	movlw	42
 16308  0044B6  EC09  F026         	call	_write_command
 16309                           
 16310                           ;ST7735_TFT.inc: 407: write_data(0);
 16311  0044BA  0E00               	movlw	0
 16312  0044BC  EC01  F026         	call	_write_data
 16313                           
 16314                           ;ST7735_TFT.inc: 408: write_data(x0 + colstart);
 16315  0044C0  5022               	movf	setAddrWindow@x0,w,c
 16316  0044C2  2456               	addwf	_colstart,w,c
 16317  0044C4  EC01  F026         	call	_write_data
 16318                           
 16319                           ;ST7735_TFT.inc: 409: write_data(0);
 16320  0044C8  0E00               	movlw	0
 16321  0044CA  EC01  F026         	call	_write_data
 16322                           
 16323                           ;ST7735_TFT.inc: 410: write_data(x1 + colstart);
 16324  0044CE  5020               	movf	setAddrWindow@x1,w,c
 16325  0044D0  2456               	addwf	_colstart,w,c
 16326  0044D2  EC01  F026         	call	_write_data
 16327                           
 16328                           ;ST7735_TFT.inc: 411: write_command(0x2B);
 16329  0044D6  0E2B               	movlw	43
 16330  0044D8  EC09  F026         	call	_write_command
 16331                           
 16332                           ;ST7735_TFT.inc: 412: write_data(0);
 16333  0044DC  0E00               	movlw	0
 16334  0044DE  EC01  F026         	call	_write_data
 16335                           
 16336                           ;ST7735_TFT.inc: 413: write_data(y0 + rowstart);
 16337  0044E2  501F               	movf	setAddrWindow@y0,w,c
 16338  0044E4  2459               	addwf	_rowstart,w,c
 16339  0044E6  EC01  F026         	call	_write_data
 16340                           
 16341                           ;ST7735_TFT.inc: 414: write_data(0);
 16342  0044EA  0E00               	movlw	0
 16343  0044EC  EC01  F026         	call	_write_data
 16344                           
 16345                           ;ST7735_TFT.inc: 415: write_data(y1 + rowstart);
 16346  0044F0  5021               	movf	setAddrWindow@y1,w,c
 16347  0044F2  2459               	addwf	_rowstart,w,c
 16348  0044F4  EC01  F026         	call	_write_data
 16349                           
 16350                           ;ST7735_TFT.inc: 416: write_command(0x2C);
 16351  0044F8  0E2C               	movlw	44
 16352  0044FA  EC09  F026         	call	_write_command
 16353  0044FE  0012               	return		;funcret
 16354  004500                     __end_of_setAddrWindow:
 16355                           	opt stack 0
 16356                           tblptru	equ	0xFF8
 16357                           tblptrh	equ	0xFF7
 16358                           tblptrl	equ	0xFF6
 16359                           tablat	equ	0xFF5
 16360                           prodh	equ	0xFF4
 16361                           prodl	equ	0xFF3
 16362                           intcon	equ	0xFF2
 16363                           intcon2	equ	0xFF1
 16364                           intcon3	equ	0xFF0
 16365                           postinc0	equ	0xFEE
 16366                           wreg	equ	0xFE8
 16367                           postdec1	equ	0xFE5
 16368                           fsr1l	equ	0xFE1
 16369                           indf2	equ	0xFDF
 16370                           postinc2	equ	0xFDE
 16371                           postdec2	equ	0xFDD
 16372                           fsr2h	equ	0xFDA
 16373                           fsr2l	equ	0xFD9
 16374                           status	equ	0xFD8
 16375                           
 16376 ;; *************** function _write_data *****************
 16377 ;; Defined at:
 16378 ;;		line 221 in file "ST7735_TFT.inc"
 16379 ;; Parameters:    Size  Location     Type
 16380 ;;  data_           1    wreg     unsigned char 
 16381 ;; Auto vars:     Size  Location     Type
 16382 ;;  data_           1   29[COMRAM] unsigned char 
 16383 ;; Return value:  Size  Location     Type
 16384 ;;		None               void
 16385 ;; Registers used:
 16386 ;;		wreg, status,2, cstack
 16387 ;; Tracked objects:
 16388 ;;		On entry : 0/0
 16389 ;;		On exit  : 0/0
 16390 ;;		Unchanged: 0/0
 16391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16392 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16393 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16394 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16395 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16396 ;;Total ram usage:        1 bytes
 16397 ;; Hardware stack levels used:    1
 16398 ;; Hardware stack levels required when called:    6
 16399 ;; This function calls:
 16400 ;;		_spiwrite
 16401 ;; This function is called by:
 16402 ;;		_Rcmd1
 16403 ;;		_Rcmd2red
 16404 ;;		_Rcmd3
 16405 ;;		_setAddrWindow
 16406 ;;		_drawPixel
 16407 ;;		_TFT_GreenTab_Initialize
 16408 ;;		_Bcmd
 16409 ;;		_setScrollDefinition
 16410 ;;		_Rcmd2green
 16411 ;;		_VerticalScroll
 16412 ;; This function uses a non-reentrant model
 16413 ;;
 16414                           
 16415                           	psect	text60
 16416  004C02                     __ptext60:
 16417                           	opt stack 0
 16418  004C02                     _write_data:
 16419                           	opt stack 23
 16420                           
 16421                           ;incstack = 0
 16422                           ;write_data@data_ stored from wreg
 16423  004C02  6E1E               	movwf	write_data@data_,c
 16424                           
 16425                           ;ST7735_TFT.inc: 223: PORTEbits.RE1 = 0;
 16426  004C04  9284               	bcf	3972,1,c	;volatile
 16427                           
 16428                           ;ST7735_TFT.inc: 224: PORTEbits.RE0 = 1;
 16429  004C06  8084               	bsf	3972,0,c	;volatile
 16430                           
 16431                           ;ST7735_TFT.inc: 225: spiwrite(data_);
 16432  004C08  501E               	movf	write_data@data_,w,c
 16433  004C0A  ECB8  F025         	call	_spiwrite
 16434                           
 16435                           ;ST7735_TFT.inc: 226: PORTEbits.RE1 = 1;
 16436  004C0E  8284               	bsf	3972,1,c	;volatile
 16437  004C10  0012               	return		;funcret
 16438  004C12                     __end_of_write_data:
 16439                           	opt stack 0
 16440                           tblptru	equ	0xFF8
 16441                           tblptrh	equ	0xFF7
 16442                           tblptrl	equ	0xFF6
 16443                           tablat	equ	0xFF5
 16444                           prodh	equ	0xFF4
 16445                           prodl	equ	0xFF3
 16446                           intcon	equ	0xFF2
 16447                           intcon2	equ	0xFF1
 16448                           intcon3	equ	0xFF0
 16449                           postinc0	equ	0xFEE
 16450                           wreg	equ	0xFE8
 16451                           postdec1	equ	0xFE5
 16452                           fsr1l	equ	0xFE1
 16453                           indf2	equ	0xFDF
 16454                           postinc2	equ	0xFDE
 16455                           postdec2	equ	0xFDD
 16456                           fsr2h	equ	0xFDA
 16457                           fsr2l	equ	0xFD9
 16458                           status	equ	0xFD8
 16459                           
 16460 ;; *************** function _write_command *****************
 16461 ;; Defined at:
 16462 ;;		line 210 in file "ST7735_TFT.inc"
 16463 ;; Parameters:    Size  Location     Type
 16464 ;;  cmd_            1    wreg     unsigned char 
 16465 ;; Auto vars:     Size  Location     Type
 16466 ;;  cmd_            1   29[COMRAM] unsigned char 
 16467 ;; Return value:  Size  Location     Type
 16468 ;;		None               void
 16469 ;; Registers used:
 16470 ;;		wreg, status,2, cstack
 16471 ;; Tracked objects:
 16472 ;;		On entry : 0/0
 16473 ;;		On exit  : 0/0
 16474 ;;		Unchanged: 0/0
 16475 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16476 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16477 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16478 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16479 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16480 ;;Total ram usage:        1 bytes
 16481 ;; Hardware stack levels used:    1
 16482 ;; Hardware stack levels required when called:    6
 16483 ;; This function calls:
 16484 ;;		_spiwrite
 16485 ;; This function is called by:
 16486 ;;		_Rcmd1
 16487 ;;		_Rcmd2red
 16488 ;;		_Rcmd3
 16489 ;;		_setAddrWindow
 16490 ;;		_TFT_GreenTab_Initialize
 16491 ;;		_Bcmd
 16492 ;;		_setScrollDefinition
 16493 ;;		_Rcmd2green
 16494 ;;		_VerticalScroll
 16495 ;; This function uses a non-reentrant model
 16496 ;;
 16497                           
 16498                           	psect	text61
 16499  004C12                     __ptext61:
 16500                           	opt stack 0
 16501  004C12                     _write_command:
 16502                           	opt stack 23
 16503                           
 16504                           ;incstack = 0
 16505                           ;write_command@cmd_ stored from wreg
 16506  004C12  6E1E               	movwf	write_command@cmd_,c
 16507                           
 16508                           ;ST7735_TFT.inc: 212: PORTEbits.RE1 = 0;
 16509  004C14  9284               	bcf	3972,1,c	;volatile
 16510                           
 16511                           ;ST7735_TFT.inc: 214: PORTEbits.RE0 = 0;
 16512  004C16  9084               	bcf	3972,0,c	;volatile
 16513                           
 16514                           ;ST7735_TFT.inc: 215: spiwrite(cmd_);
 16515  004C18  501E               	movf	write_command@cmd_,w,c
 16516  004C1A  ECB8  F025         	call	_spiwrite
 16517                           
 16518                           ;ST7735_TFT.inc: 217: PORTEbits.RE1 = 1;
 16519  004C1E  8284               	bsf	3972,1,c	;volatile
 16520  004C20  0012               	return		;funcret
 16521  004C22                     __end_of_write_command:
 16522                           	opt stack 0
 16523                           tblptru	equ	0xFF8
 16524                           tblptrh	equ	0xFF7
 16525                           tblptrl	equ	0xFF6
 16526                           tablat	equ	0xFF5
 16527                           prodh	equ	0xFF4
 16528                           prodl	equ	0xFF3
 16529                           intcon	equ	0xFF2
 16530                           intcon2	equ	0xFF1
 16531                           intcon3	equ	0xFF0
 16532                           postinc0	equ	0xFEE
 16533                           wreg	equ	0xFE8
 16534                           postdec1	equ	0xFE5
 16535                           fsr1l	equ	0xFE1
 16536                           indf2	equ	0xFDF
 16537                           postinc2	equ	0xFDE
 16538                           postdec2	equ	0xFDD
 16539                           fsr2h	equ	0xFDA
 16540                           fsr2l	equ	0xFD9
 16541                           status	equ	0xFD8
 16542                           
 16543 ;; *************** function _spiwrite *****************
 16544 ;; Defined at:
 16545 ;;		line 200 in file "ST7735_TFT.inc"
 16546 ;; Parameters:    Size  Location     Type
 16547 ;;  spidata         1    wreg     unsigned char 
 16548 ;; Auto vars:     Size  Location     Type
 16549 ;;  spidata         1   28[COMRAM] unsigned char 
 16550 ;;  x               1   27[COMRAM] unsigned char 
 16551 ;; Return value:  Size  Location     Type
 16552 ;;		None               void
 16553 ;; Registers used:
 16554 ;;		wreg
 16555 ;; Tracked objects:
 16556 ;;		On entry : 0/0
 16557 ;;		On exit  : 0/0
 16558 ;;		Unchanged: 0/0
 16559 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16560 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16561 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16562 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16563 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16564 ;;Total ram usage:        2 bytes
 16565 ;; Hardware stack levels used:    1
 16566 ;; Hardware stack levels required when called:    5
 16567 ;; This function calls:
 16568 ;;		Nothing
 16569 ;; This function is called by:
 16570 ;;		_write_command
 16571 ;;		_write_data
 16572 ;;		_drawFastVLine
 16573 ;;		_fillRectangle
 16574 ;;		_drawFastHLine
 16575 ;; This function uses a non-reentrant model
 16576 ;;
 16577                           
 16578                           	psect	text62
 16579  004B70                     __ptext62:
 16580                           	opt stack 0
 16581  004B70                     _spiwrite:
 16582                           	opt stack 23
 16583                           
 16584                           ;incstack = 0
 16585                           ;spiwrite@spidata stored from wreg
 16586  004B70  6E1D               	movwf	spiwrite@spidata,c
 16587                           
 16588                           ;ST7735_TFT.inc: 202: char x;
 16589                           ;ST7735_TFT.inc: 203: PIR1bits.SSPIF = 0;
 16590  004B72  969E               	bcf	3998,3,c	;volatile
 16591                           
 16592                           ;ST7735_TFT.inc: 204: x=SSPBUF;
 16593  004B74  CFC9 F01C          	movff	4041,spiwrite@x	;volatile
 16594                           
 16595                           ;ST7735_TFT.inc: 205: SSPBUF=spidata;
 16596  004B78  C01D  FFC9         	movff	spiwrite@spidata,4041	;volatile
 16597                           
 16598                           ;ST7735_TFT.inc: 206: while (!SSPSTATbits.BF);
 16599  004B7C  D000               	goto	l331
 16600  004B7E                     l331:
 16601  004B7E  A0C7               	btfss	4039,0,c	;volatile
 16602  004B80  D7FE               	goto	l331
 16603  004B82  0012               	return		;funcret
 16604  004B84                     __end_of_spiwrite:
 16605                           	opt stack 0
 16606                           tblptru	equ	0xFF8
 16607                           tblptrh	equ	0xFF7
 16608                           tblptrl	equ	0xFF6
 16609                           tablat	equ	0xFF5
 16610                           prodh	equ	0xFF4
 16611                           prodl	equ	0xFF3
 16612                           intcon	equ	0xFF2
 16613                           intcon2	equ	0xFF1
 16614                           intcon3	equ	0xFF0
 16615                           postinc0	equ	0xFEE
 16616                           wreg	equ	0xFE8
 16617                           postdec1	equ	0xFE5
 16618                           fsr1l	equ	0xFE1
 16619                           indf2	equ	0xFDF
 16620                           postinc2	equ	0xFDE
 16621                           postdec2	equ	0xFDD
 16622                           fsr2h	equ	0xFDA
 16623                           fsr2l	equ	0xFD9
 16624                           status	equ	0xFD8
 16625                           
 16626 ;; *************** function _DS3231_Read_Time *****************
 16627 ;; Defined at:
 16628 ;;		line 2283 in file "lab_final_alt.c"
 16629 ;; Parameters:    Size  Location     Type
 16630 ;;  Device          1    wreg     unsigned char 
 16631 ;; Auto vars:     Size  Location     Type
 16632 ;;  Device          1   53[COMRAM] unsigned char 
 16633 ;; Return value:  Size  Location     Type
 16634 ;;		None               void
 16635 ;; Registers used:
 16636 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 16637 ;; Tracked objects:
 16638 ;;		On entry : 0/0
 16639 ;;		On exit  : 0/0
 16640 ;;		Unchanged: 0/0
 16641 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16642 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16643 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16644 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16645 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16646 ;;Total ram usage:        1 bytes
 16647 ;; Hardware stack levels used:    1
 16648 ;; Hardware stack levels required when called:    8
 16649 ;; This function calls:
 16650 ;;		_I2C_ReStart
 16651 ;;		_I2C_Read
 16652 ;;		_I2C_Start
 16653 ;;		_I2C_Stop
 16654 ;;		_I2C_Write
 16655 ;;		_delay_ms
 16656 ;; This function is called by:
 16657 ;;		_main
 16658 ;;		_Do_Setup_Time
 16659 ;;		_Do_Setup_Alarm_Time
 16660 ;; This function uses a non-reentrant model
 16661 ;;
 16662                           
 16663                           	psect	text63
 16664  004012                     __ptext63:
 16665                           	opt stack 0
 16666  004012                     _DS3231_Read_Time:
 16667                           	opt stack 21
 16668                           
 16669                           ;incstack = 0
 16670                           ;DS3231_Read_Time@Device stored from wreg
 16671  004012  6E36               	movwf	DS3231_Read_Time@Device,c
 16672                           
 16673                           ;lab_final_alt.c: 2285: I2C_Start();
 16674  004014  ECDD  F025         	call	_I2C_Start	;wreg free
 16675                           
 16676                           ;lab_final_alt.c: 2286: I2C_Write((Device << 1) | 0);
 16677  004018  5036               	movf	DS3231_Read_Time@Device,w,c
 16678  00401A  2436               	addwf	DS3231_Read_Time@Device,w,c
 16679  00401C  EC52  F023         	call	_I2C_Write
 16680                           
 16681                           ;lab_final_alt.c: 2287: I2C_Write(0x00);
 16682  004020  0E00               	movlw	0
 16683  004022  EC52  F023         	call	_I2C_Write
 16684                           
 16685                           ;lab_final_alt.c: 2288: I2C_ReStart();
 16686  004026  ECA3  F025         	call	_I2C_ReStart	;wreg free
 16687                           
 16688                           ;lab_final_alt.c: 2289: I2C_Write((Device << 1) | 1);
 16689  00402A  80D8               	bsf	status,0,c
 16690  00402C  3436               	rlcf	DS3231_Read_Time@Device,w,c
 16691  00402E  EC52  F023         	call	_I2C_Write
 16692                           
 16693                           ;lab_final_alt.c: 2290: second = I2C_Read(1);
 16694  004032  0E01               	movlw	1
 16695  004034  ECF0  F022         	call	_I2C_Read
 16696  004038  0100               	movlb	0	; () banked
 16697  00403A  6FF6               	movwf	_second& (0+255),b
 16698                           
 16699                           ; BSR set to: 0
 16700                           ;lab_final_alt.c: 2291: minute = I2C_Read(1);
 16701  00403C  0E01               	movlw	1
 16702  00403E  ECF0  F022         	call	_I2C_Read
 16703  004042  0100               	movlb	0	; () banked
 16704  004044  6FF2               	movwf	_minute& (0+255),b
 16705                           
 16706                           ; BSR set to: 0
 16707                           ;lab_final_alt.c: 2292: hour = I2C_Read(1);
 16708  004046  0E01               	movlw	1
 16709  004048  ECF0  F022         	call	_I2C_Read
 16710  00404C  0100               	movlb	0	; () banked
 16711  00404E  6FF1               	movwf	_hour& (0+255),b
 16712                           
 16713                           ; BSR set to: 0
 16714                           ;lab_final_alt.c: 2293: dow = I2C_Read(1);
 16715  004050  0E01               	movlw	1
 16716  004052  ECF0  F022         	call	_I2C_Read
 16717  004056  6E57               	movwf	_dow,c
 16718                           
 16719                           ;lab_final_alt.c: 2294: day = I2C_Read(1);
 16720  004058  0E01               	movlw	1
 16721  00405A  ECF0  F022         	call	_I2C_Read
 16722  00405E  0100               	movlb	0	; () banked
 16723  004060  6FEF               	movwf	_day& (0+255),b
 16724                           
 16725                           ; BSR set to: 0
 16726                           ;lab_final_alt.c: 2295: month = I2C_Read(1);
 16727  004062  0E01               	movlw	1
 16728  004064  ECF0  F022         	call	_I2C_Read
 16729  004068  0100               	movlb	0	; () banked
 16730  00406A  6FF3               	movwf	_month& (0+255),b
 16731                           
 16732                           ; BSR set to: 0
 16733                           ;lab_final_alt.c: 2296: year = I2C_Read(0);
 16734  00406C  0E00               	movlw	0
 16735  00406E  ECF0  F022         	call	_I2C_Read
 16736  004072  0100               	movlb	0	; () banked
 16737  004074  6FF8               	movwf	_year& (0+255),b
 16738                           
 16739                           ;lab_final_alt.c: 2297: I2C_Stop();
 16740  004076  ECD4  F025         	call	_I2C_Stop	;wreg free
 16741                           
 16742                           ;lab_final_alt.c: 2298: delay_ms(50);
 16743  00407A  0E00               	movlw	0
 16744  00407C  6E31               	movwf	delay_ms@ms+1,c
 16745  00407E  0E32               	movlw	50
 16746  004080  6E30               	movwf	delay_ms@ms,c
 16747  004082  ECDF  F021         	call	_delay_ms	;wreg free
 16748  004086  0012               	return		;funcret
 16749  004088                     __end_of_DS3231_Read_Time:
 16750                           	opt stack 0
 16751                           tblptru	equ	0xFF8
 16752                           tblptrh	equ	0xFF7
 16753                           tblptrl	equ	0xFF6
 16754                           tablat	equ	0xFF5
 16755                           prodh	equ	0xFF4
 16756                           prodl	equ	0xFF3
 16757                           intcon	equ	0xFF2
 16758                           intcon2	equ	0xFF1
 16759                           intcon3	equ	0xFF0
 16760                           postinc0	equ	0xFEE
 16761                           wreg	equ	0xFE8
 16762                           postdec1	equ	0xFE5
 16763                           fsr1l	equ	0xFE1
 16764                           indf2	equ	0xFDF
 16765                           postinc2	equ	0xFDE
 16766                           postdec2	equ	0xFDD
 16767                           fsr2h	equ	0xFDA
 16768                           fsr2l	equ	0xFD9
 16769                           status	equ	0xFD8
 16770                           
 16771 ;; *************** function _Do_LED_Up *****************
 16772 ;; Defined at:
 16773 ;;		line 2427 in file "lab_final_alt.c"
 16774 ;; Parameters:    Size  Location     Type
 16775 ;;		None
 16776 ;; Auto vars:     Size  Location     Type
 16777 ;;		None
 16778 ;; Return value:  Size  Location     Type
 16779 ;;		None               void
 16780 ;; Registers used:
 16781 ;;		wreg, status,2, status,0, cstack
 16782 ;; Tracked objects:
 16783 ;;		On entry : 0/0
 16784 ;;		On exit  : 0/0
 16785 ;;		Unchanged: 0/0
 16786 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16787 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16788 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16789 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16790 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16791 ;;Total ram usage:        0 bytes
 16792 ;; Hardware stack levels used:    1
 16793 ;; Hardware stack levels required when called:    6
 16794 ;; This function calls:
 16795 ;;		_SPI_out
 16796 ;; This function is called by:
 16797 ;;		_main
 16798 ;; This function uses a non-reentrant model
 16799 ;;
 16800                           
 16801                           	psect	text64
 16802  004A22                     __ptext64:
 16803                           	opt stack 0
 16804  004A22                     _Do_LED_Up:
 16805                           	opt stack 24
 16806                           
 16807                           ;lab_final_alt.c: 2429: if(LED_Intensity == 90) LED_Intensity = 0;
 16808                           
 16809                           ;incstack = 0
 16810  004A22  0E5A               	movlw	90
 16811  004A24  0100               	movlb	0	; () banked
 16812  004A26  19E8               	xorwf	_LED_Intensity& (0+255),w,b
 16813  004A28  A4D8               	btfss	status,2,c
 16814  004A2A  D002               	goto	l7256
 16815                           
 16816                           ; BSR set to: 0
 16817  004A2C  0E00               	movlw	0
 16818  004A2E  D003               	goto	L10
 16819  004A30                     l7256:
 16820                           
 16821                           ; BSR set to: 0
 16822                           ;lab_final_alt.c: 2430: else LED_Intensity = LED_Intensity + 10;
 16823  004A30  0100               	movlb	0	; () banked
 16824  004A32  51E8               	movf	_LED_Intensity& (0+255),w,b
 16825  004A34  0F0A               	addlw	10
 16826  004A36                     L10:
 16827  004A36  0100               	movlb	0	; () banked
 16828  004A38  6FE8               	movwf	_LED_Intensity& (0+255),b
 16829  004A3A  D000               	goto	l7258
 16830  004A3C                     l7258:
 16831                           
 16832                           ; BSR set to: 0
 16833                           ;lab_final_alt.c: 2431: SPI_out(LED_Intensity + 100);
 16834  004A3C  0100               	movlb	0	; () banked
 16835  004A3E  51E8               	movf	_LED_Intensity& (0+255),w,b
 16836  004A40  0F64               	addlw	100
 16837  004A42  EC84  F01F         	call	_SPI_out
 16838  004A46  0012               	return		;funcret
 16839  004A48                     __end_of_Do_LED_Up:
 16840                           	opt stack 0
 16841                           tblptru	equ	0xFF8
 16842                           tblptrh	equ	0xFF7
 16843                           tblptrl	equ	0xFF6
 16844                           tablat	equ	0xFF5
 16845                           prodh	equ	0xFF4
 16846                           prodl	equ	0xFF3
 16847                           intcon	equ	0xFF2
 16848                           intcon2	equ	0xFF1
 16849                           intcon3	equ	0xFF0
 16850                           postinc0	equ	0xFEE
 16851                           wreg	equ	0xFE8
 16852                           postdec1	equ	0xFE5
 16853                           fsr1l	equ	0xFE1
 16854                           indf2	equ	0xFDF
 16855                           postinc2	equ	0xFDE
 16856                           postdec2	equ	0xFDD
 16857                           fsr2h	equ	0xFDA
 16858                           fsr2l	equ	0xFD9
 16859                           status	equ	0xFD8
 16860                           
 16861 ;; *************** function _Do_LED_Out *****************
 16862 ;; Defined at:
 16863 ;;		line 2410 in file "lab_final_alt.c"
 16864 ;; Parameters:    Size  Location     Type
 16865 ;;  Volt            1    wreg     unsigned char 
 16866 ;; Auto vars:     Size  Location     Type
 16867 ;;  Volt            1   48[COMRAM] unsigned char 
 16868 ;; Return value:  Size  Location     Type
 16869 ;;		None               void
 16870 ;; Registers used:
 16871 ;;		wreg, status,2, status,0, cstack
 16872 ;; Tracked objects:
 16873 ;;		On entry : 0/0
 16874 ;;		On exit  : 0/0
 16875 ;;		Unchanged: 0/0
 16876 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16877 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16878 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16879 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16880 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16881 ;;Total ram usage:        1 bytes
 16882 ;; Hardware stack levels used:    1
 16883 ;; Hardware stack levels required when called:    7
 16884 ;; This function calls:
 16885 ;;		___ftge
 16886 ;;		___lbtoft
 16887 ;; This function is called by:
 16888 ;;		_main
 16889 ;; This function uses a non-reentrant model
 16890 ;;
 16891                           
 16892                           	psect	text65
 16893  004720                     __ptext65:
 16894                           	opt stack 0
 16895  004720                     _Do_LED_Out:
 16896                           	opt stack 23
 16897                           
 16898                           ;incstack = 0
 16899                           ;Do_LED_Out@Volt stored from wreg
 16900  004720  6E31               	movwf	Do_LED_Out@Volt,c
 16901                           
 16902                           ;lab_final_alt.c: 2412: if (Volt > 2.5)
 16903  004722  0E00               	movlw	0
 16904  004724  6E28               	movwf	___ftge@ff1,c
 16905  004726  0E20               	movlw	32
 16906  004728  6E29               	movwf	___ftge@ff1+1,c
 16907  00472A  0E40               	movlw	64
 16908  00472C  6E2A               	movwf	___ftge@ff1+2,c
 16909  00472E  5031               	movf	Do_LED_Out@Volt,w,c
 16910  004730  EC24  F025         	call	___lbtoft
 16911  004734  C024  F02B         	movff	?___lbtoft,___ftge@ff2
 16912  004738  C025  F02C         	movff	?___lbtoft+1,___ftge@ff2+1
 16913  00473C  C026  F02D         	movff	?___lbtoft+2,___ftge@ff2+2
 16914  004740  ECDD  F01D         	call	___ftge	;wreg free
 16915  004744  B0D8               	btfsc	status,0,c
 16916  004746  D004               	goto	l786
 16917                           
 16918                           ;lab_final_alt.c: 2413: {
 16919                           ;lab_final_alt.c: 2415: PORTDbits.RD3 = 1;
 16920  004748  8683               	bsf	3971,3,c	;volatile
 16921                           
 16922                           ;lab_final_alt.c: 2416: PORTDbits.RD4 = 1;
 16923  00474A  8883               	bsf	3971,4,c	;volatile
 16924                           
 16925                           ;lab_final_alt.c: 2417: PORTDbits.RD5 = 1;
 16926  00474C  8A83               	bsf	3971,5,c	;volatile
 16927                           
 16928                           ;lab_final_alt.c: 2419: }
 16929  00474E  D004               	goto	l788
 16930  004750                     l786:
 16931                           
 16932                           ;lab_final_alt.c: 2420: else
 16933                           ;lab_final_alt.c: 2421: {
 16934                           ;lab_final_alt.c: 2422: PORTDbits.RD3 = 0;
 16935  004750  9683               	bcf	3971,3,c	;volatile
 16936                           
 16937                           ;lab_final_alt.c: 2423: PORTDbits.RD4 = 0;
 16938  004752  9883               	bcf	3971,4,c	;volatile
 16939                           
 16940                           ;lab_final_alt.c: 2424: PORTDbits.RD5 = 0;
 16941  004754  9A83               	bcf	3971,5,c	;volatile
 16942  004756  D000               	goto	l788
 16943  004758                     l788:
 16944  004758  0012               	return		;funcret
 16945  00475A                     __end_of_Do_LED_Out:
 16946                           	opt stack 0
 16947                           tblptru	equ	0xFF8
 16948                           tblptrh	equ	0xFF7
 16949                           tblptrl	equ	0xFF6
 16950                           tablat	equ	0xFF5
 16951                           prodh	equ	0xFF4
 16952                           prodl	equ	0xFF3
 16953                           intcon	equ	0xFF2
 16954                           intcon2	equ	0xFF1
 16955                           intcon3	equ	0xFF0
 16956                           postinc0	equ	0xFEE
 16957                           wreg	equ	0xFE8
 16958                           postdec1	equ	0xFE5
 16959                           fsr1l	equ	0xFE1
 16960                           indf2	equ	0xFDF
 16961                           postinc2	equ	0xFDE
 16962                           postdec2	equ	0xFDD
 16963                           fsr2h	equ	0xFDA
 16964                           fsr2l	equ	0xFD9
 16965                           status	equ	0xFD8
 16966                           
 16967 ;; *************** function ___lbtoft *****************
 16968 ;; Defined at:
 16969 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lbtoft.c"
 16970 ;; Parameters:    Size  Location     Type
 16971 ;;  c               1    wreg     unsigned char 
 16972 ;; Auto vars:     Size  Location     Type
 16973 ;;  c               1   38[COMRAM] unsigned char 
 16974 ;; Return value:  Size  Location     Type
 16975 ;;                  3   35[COMRAM] float 
 16976 ;; Registers used:
 16977 ;;		wreg, status,2, status,0, cstack
 16978 ;; Tracked objects:
 16979 ;;		On entry : 0/0
 16980 ;;		On exit  : 0/0
 16981 ;;		Unchanged: 0/0
 16982 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16983 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16984 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16985 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16986 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16987 ;;Total ram usage:        4 bytes
 16988 ;; Hardware stack levels used:    1
 16989 ;; Hardware stack levels required when called:    6
 16990 ;; This function calls:
 16991 ;;		___ftpack
 16992 ;; This function is called by:
 16993 ;;		_Do_LED_Out
 16994 ;; This function uses a non-reentrant model
 16995 ;;
 16996                           
 16997                           	psect	text66
 16998  004A48                     __ptext66:
 16999                           	opt stack 0
 17000  004A48                     ___lbtoft:
 17001                           	opt stack 23
 17002                           
 17003                           ;incstack = 0
 17004                           ;___lbtoft@c stored from wreg
 17005  004A48  6E27               	movwf	___lbtoft@c,c
 17006  004A4A  5027               	movf	___lbtoft@c,w,c
 17007  004A4C  6E1C               	movwf	___ftpack@arg,c
 17008  004A4E  6A1D               	clrf	___ftpack@arg+1,c
 17009  004A50  6A1E               	clrf	___ftpack@arg+2,c
 17010  004A52  0E8E               	movlw	142
 17011  004A54  6E1F               	movwf	___ftpack@exp,c
 17012  004A56  0E00               	movlw	0
 17013  004A58  6E20               	movwf	___ftpack@sign,c
 17014  004A5A  EC2F  F01D         	call	___ftpack	;wreg free
 17015  004A5E  C01C  F024         	movff	?___ftpack,?___lbtoft
 17016  004A62  C01D  F025         	movff	?___ftpack+1,?___lbtoft+1
 17017  004A66  C01E  F026         	movff	?___ftpack+2,?___lbtoft+2
 17018  004A6A  D000               	goto	l1493
 17019  004A6C                     l1493:
 17020  004A6C  0012               	return		;funcret
 17021  004A6E                     __end_of___lbtoft:
 17022                           	opt stack 0
 17023                           tblptru	equ	0xFF8
 17024                           tblptrh	equ	0xFF7
 17025                           tblptrl	equ	0xFF6
 17026                           tablat	equ	0xFF5
 17027                           prodh	equ	0xFF4
 17028                           prodl	equ	0xFF3
 17029                           intcon	equ	0xFF2
 17030                           intcon2	equ	0xFF1
 17031                           intcon3	equ	0xFF0
 17032                           postinc0	equ	0xFEE
 17033                           wreg	equ	0xFE8
 17034                           postdec1	equ	0xFE5
 17035                           fsr1l	equ	0xFE1
 17036                           indf2	equ	0xFDF
 17037                           postinc2	equ	0xFDE
 17038                           postdec2	equ	0xFDD
 17039                           fsr2h	equ	0xFDA
 17040                           fsr2l	equ	0xFD9
 17041                           status	equ	0xFD8
 17042                           
 17043 ;; *************** function ___ftpack *****************
 17044 ;; Defined at:
 17045 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\float.c"
 17046 ;; Parameters:    Size  Location     Type
 17047 ;;  arg             3   27[COMRAM] unsigned um
 17048 ;;  exp             1   30[COMRAM] unsigned char 
 17049 ;;  sign            1   31[COMRAM] unsigned char 
 17050 ;; Auto vars:     Size  Location     Type
 17051 ;;		None
 17052 ;; Return value:  Size  Location     Type
 17053 ;;                  3   27[COMRAM] float 
 17054 ;; Registers used:
 17055 ;;		wreg, status,2, status,0
 17056 ;; Tracked objects:
 17057 ;;		On entry : 0/0
 17058 ;;		On exit  : 0/0
 17059 ;;		Unchanged: 0/0
 17060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17061 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17062 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17063 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17064 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17065 ;;Total ram usage:        8 bytes
 17066 ;; Hardware stack levels used:    1
 17067 ;; Hardware stack levels required when called:    5
 17068 ;; This function calls:
 17069 ;;		Nothing
 17070 ;; This function is called by:
 17071 ;;		___ftadd
 17072 ;;		___ftdiv
 17073 ;;		___ftmul
 17074 ;;		___lbtoft
 17075 ;;		___lltoft
 17076 ;;		___lwtoft
 17077 ;; This function uses a non-reentrant model
 17078 ;;
 17079                           
 17080                           	psect	text67
 17081  003A5E                     __ptext67:
 17082                           	opt stack 0
 17083  003A5E                     ___ftpack:
 17084                           	opt stack 22
 17085                           
 17086                           ;incstack = 0
 17087  003A5E  501F               	movf	___ftpack@exp,w,c
 17088  003A60  B4D8               	btfsc	status,2,c
 17089  003A62  D005               	goto	l7914
 17090  003A64  501C               	movf	___ftpack@arg,w,c
 17091  003A66  101D               	iorwf	___ftpack@arg+1,w,c
 17092  003A68  101E               	iorwf	___ftpack@arg+2,w,c
 17093  003A6A  A4D8               	btfss	status,2,c
 17094  003A6C  D00E               	goto	l7920
 17095  003A6E                     l7914:
 17096  003A6E  0E00               	movlw	0
 17097  003A70  6E1C               	movwf	?___ftpack,c
 17098  003A72  0E00               	movlw	0
 17099  003A74  6E1D               	movwf	?___ftpack+1,c
 17100  003A76  0E00               	movlw	0
 17101  003A78  6E1E               	movwf	?___ftpack+2,c
 17102  003A7A  D053               	goto	l1327
 17103  003A7C  D006               	goto	l7920
 17104  003A7E                     l7918:
 17105  003A7E  2A1F               	incf	___ftpack@exp,f,c
 17106  003A80  90D8               	bcf	status,0,c
 17107  003A82  321E               	rrcf	___ftpack@arg+2,f,c
 17108  003A84  321D               	rrcf	___ftpack@arg+1,f,c
 17109  003A86  321C               	rrcf	___ftpack@arg,f,c
 17110  003A88  D000               	goto	l7920
 17111  003A8A                     l7920:
 17112  003A8A  0E00               	movlw	0
 17113  003A8C  141C               	andwf	___ftpack@arg,w,c
 17114  003A8E  6E21               	movwf	??___ftpack& (0+255),c
 17115  003A90  0E00               	movlw	0
 17116  003A92  141D               	andwf	___ftpack@arg+1,w,c
 17117  003A94  6E22               	movwf	(??___ftpack+1)& (0+255),c
 17118  003A96  0EFE               	movlw	254
 17119  003A98  141E               	andwf	___ftpack@arg+2,w,c
 17120  003A9A  6E23               	movwf	(??___ftpack+2)& (0+255),c
 17121  003A9C  5021               	movf	??___ftpack,w,c
 17122  003A9E  1022               	iorwf	??___ftpack+1,w,c
 17123  003AA0  1023               	iorwf	??___ftpack+2,w,c
 17124  003AA2  B4D8               	btfsc	status,2,c
 17125  003AA4  D00E               	goto	l7926
 17126  003AA6  D7EB               	goto	l7918
 17127  003AA8  D00C               	goto	l7926
 17128  003AAA                     l7922:
 17129  003AAA  2A1F               	incf	___ftpack@exp,f,c
 17130  003AAC  0E01               	movlw	1
 17131  003AAE  261C               	addwf	___ftpack@arg,f,c
 17132  003AB0  0E00               	movlw	0
 17133  003AB2  221D               	addwfc	___ftpack@arg+1,f,c
 17134  003AB4  0E00               	movlw	0
 17135  003AB6  221E               	addwfc	___ftpack@arg+2,f,c
 17136  003AB8  90D8               	bcf	status,0,c
 17137  003ABA  321E               	rrcf	___ftpack@arg+2,f,c
 17138  003ABC  321D               	rrcf	___ftpack@arg+1,f,c
 17139  003ABE  321C               	rrcf	___ftpack@arg,f,c
 17140  003AC0  D000               	goto	l7926
 17141  003AC2                     l7926:
 17142  003AC2  0E00               	movlw	0
 17143  003AC4  141C               	andwf	___ftpack@arg,w,c
 17144  003AC6  6E21               	movwf	??___ftpack& (0+255),c
 17145  003AC8  0E00               	movlw	0
 17146  003ACA  141D               	andwf	___ftpack@arg+1,w,c
 17147  003ACC  6E22               	movwf	(??___ftpack+1)& (0+255),c
 17148  003ACE  0EFF               	movlw	255
 17149  003AD0  141E               	andwf	___ftpack@arg+2,w,c
 17150  003AD2  6E23               	movwf	(??___ftpack+2)& (0+255),c
 17151  003AD4  5021               	movf	??___ftpack,w,c
 17152  003AD6  1022               	iorwf	??___ftpack+1,w,c
 17153  003AD8  1023               	iorwf	??___ftpack+2,w,c
 17154  003ADA  B4D8               	btfsc	status,2,c
 17155  003ADC  D008               	goto	l7930
 17156  003ADE  D7E5               	goto	l7922
 17157  003AE0  D006               	goto	l7930
 17158  003AE2                     l7928:
 17159  003AE2  061F               	decf	___ftpack@exp,f,c
 17160  003AE4  90D8               	bcf	status,0,c
 17161  003AE6  361C               	rlcf	___ftpack@arg,f,c
 17162  003AE8  361D               	rlcf	___ftpack@arg+1,f,c
 17163  003AEA  361E               	rlcf	___ftpack@arg+2,f,c
 17164  003AEC  D000               	goto	l7930
 17165  003AEE                     l7930:
 17166  003AEE  BE1D               	btfsc	___ftpack@arg+1,7,c
 17167  003AF0  D004               	goto	l1338
 17168  003AF2  0E02               	movlw	2
 17169  003AF4  601F               	cpfslt	___ftpack@exp,c
 17170  003AF6  D7F5               	goto	l7928
 17171  003AF8  D000               	goto	l1338
 17172  003AFA                     l1338:
 17173  003AFA  B01F               	btfsc	___ftpack@exp,0,c
 17174  003AFC  D002               	goto	l7936
 17175  003AFE  9E1D               	bcf	___ftpack@arg+1,7,c
 17176  003B00  D000               	goto	l7936
 17177  003B02                     l7936:
 17178  003B02  90D8               	bcf	status,0,c
 17179  003B04  321F               	rrcf	___ftpack@exp,f,c
 17180  003B06  501F               	movf	___ftpack@exp,w,c
 17181  003B08  121E               	iorwf	___ftpack@arg+2,f,c
 17182  003B0A  5020               	movf	___ftpack@sign,w,c
 17183  003B0C  B4D8               	btfsc	status,2,c
 17184  003B0E  D002               	goto	l7942
 17185  003B10  8E1E               	bsf	___ftpack@arg+2,7,c
 17186  003B12  D000               	goto	l7942
 17187  003B14                     l7942:
 17188  003B14  C01C  F01C         	movff	___ftpack@arg,?___ftpack
 17189  003B18  C01D  F01D         	movff	___ftpack@arg+1,?___ftpack+1
 17190  003B1C  C01E  F01E         	movff	___ftpack@arg+2,?___ftpack+2
 17191  003B20  D000               	goto	l1327
 17192  003B22                     l1327:
 17193  003B22  0012               	return		;funcret
 17194  003B24                     __end_of___ftpack:
 17195                           	opt stack 0
 17196                           tblptru	equ	0xFF8
 17197                           tblptrh	equ	0xFF7
 17198                           tblptrl	equ	0xFF6
 17199                           tablat	equ	0xFF5
 17200                           prodh	equ	0xFF4
 17201                           prodl	equ	0xFF3
 17202                           intcon	equ	0xFF2
 17203                           intcon2	equ	0xFF1
 17204                           intcon3	equ	0xFF0
 17205                           postinc0	equ	0xFEE
 17206                           wreg	equ	0xFE8
 17207                           postdec1	equ	0xFE5
 17208                           fsr1l	equ	0xFE1
 17209                           indf2	equ	0xFDF
 17210                           postinc2	equ	0xFDE
 17211                           postdec2	equ	0xFDD
 17212                           fsr2h	equ	0xFDA
 17213                           fsr2l	equ	0xFD9
 17214                           status	equ	0xFD8
 17215                           
 17216 ;; *************** function ___ftge *****************
 17217 ;; Defined at:
 17218 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftge.c"
 17219 ;; Parameters:    Size  Location     Type
 17220 ;;  ff1             3   39[COMRAM] float 
 17221 ;;  ff2             3   42[COMRAM] float 
 17222 ;; Auto vars:     Size  Location     Type
 17223 ;;		None
 17224 ;; Return value:  Size  Location     Type
 17225 ;;		None               void
 17226 ;; Registers used:
 17227 ;;		wreg, status,2, status,0
 17228 ;; Tracked objects:
 17229 ;;		On entry : 0/0
 17230 ;;		On exit  : 0/0
 17231 ;;		Unchanged: 0/0
 17232 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17233 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17234 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17235 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17236 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17237 ;;Total ram usage:        9 bytes
 17238 ;; Hardware stack levels used:    1
 17239 ;; Hardware stack levels required when called:    5
 17240 ;; This function calls:
 17241 ;;		Nothing
 17242 ;; This function is called by:
 17243 ;;		_Do_LED_Out
 17244 ;;		_printf
 17245 ;; This function uses a non-reentrant model
 17246 ;;
 17247                           
 17248                           	psect	text68
 17249  003BBA                     __ptext68:
 17250                           	opt stack 0
 17251  003BBA                     ___ftge:
 17252                           	opt stack 24
 17253                           
 17254                           ;incstack = 0
 17255  003BBA  AE2A               	btfss	___ftge@ff1+2,7,c
 17256  003BBC  D017               	goto	l8958
 17257  003BBE  C028  F02E         	movff	___ftge@ff1,??___ftge
 17258  003BC2  C029  F02F         	movff	___ftge@ff1+1,??___ftge+1
 17259  003BC6  C02A  F030         	movff	___ftge@ff1+2,??___ftge+2
 17260  003BCA  1E2E               	comf	??___ftge,f,c
 17261  003BCC  1E2F               	comf	??___ftge+1,f,c
 17262  003BCE  1E30               	comf	??___ftge+2,f,c
 17263  003BD0  2A2E               	incf	??___ftge,f,c
 17264  003BD2  0E00               	movlw	0
 17265  003BD4  222F               	addwfc	??___ftge+1,f,c
 17266  003BD6  2230               	addwfc	??___ftge+2,f,c
 17267  003BD8  0E00               	movlw	0
 17268  003BDA  242E               	addwf	??___ftge,w,c
 17269  003BDC  6E28               	movwf	___ftge@ff1,c
 17270  003BDE  0E00               	movlw	0
 17271  003BE0  202F               	addwfc	??___ftge+1,w,c
 17272  003BE2  6E29               	movwf	___ftge@ff1+1,c
 17273  003BE4  0E80               	movlw	128
 17274  003BE6  2030               	addwfc	??___ftge+2,w,c
 17275  003BE8  6E2A               	movwf	___ftge@ff1+2,c
 17276  003BEA  D000               	goto	l8958
 17277  003BEC                     l8958:
 17278  003BEC  AE2D               	btfss	___ftge@ff2+2,7,c
 17279  003BEE  D017               	goto	l8962
 17280  003BF0  C02B  F02E         	movff	___ftge@ff2,??___ftge
 17281  003BF4  C02C  F02F         	movff	___ftge@ff2+1,??___ftge+1
 17282  003BF8  C02D  F030         	movff	___ftge@ff2+2,??___ftge+2
 17283  003BFC  1E2E               	comf	??___ftge,f,c
 17284  003BFE  1E2F               	comf	??___ftge+1,f,c
 17285  003C00  1E30               	comf	??___ftge+2,f,c
 17286  003C02  2A2E               	incf	??___ftge,f,c
 17287  003C04  0E00               	movlw	0
 17288  003C06  222F               	addwfc	??___ftge+1,f,c
 17289  003C08  2230               	addwfc	??___ftge+2,f,c
 17290  003C0A  0E00               	movlw	0
 17291  003C0C  242E               	addwf	??___ftge,w,c
 17292  003C0E  6E2B               	movwf	___ftge@ff2,c
 17293  003C10  0E00               	movlw	0
 17294  003C12  202F               	addwfc	??___ftge+1,w,c
 17295  003C14  6E2C               	movwf	___ftge@ff2+1,c
 17296  003C16  0E80               	movlw	128
 17297  003C18  2030               	addwfc	??___ftge+2,w,c
 17298  003C1A  6E2D               	movwf	___ftge@ff2+2,c
 17299  003C1C  D000               	goto	l8962
 17300  003C1E                     l8962:
 17301  003C1E  0E00               	movlw	0
 17302  003C20  1A28               	xorwf	___ftge@ff1,f,c
 17303  003C22  0E00               	movlw	0
 17304  003C24  1A29               	xorwf	___ftge@ff1+1,f,c
 17305  003C26  0E80               	movlw	128
 17306  003C28  1A2A               	xorwf	___ftge@ff1+2,f,c
 17307  003C2A  0E00               	movlw	0
 17308  003C2C  1A2B               	xorwf	___ftge@ff2,f,c
 17309  003C2E  0E00               	movlw	0
 17310  003C30  1A2C               	xorwf	___ftge@ff2+1,f,c
 17311  003C32  0E80               	movlw	128
 17312  003C34  1A2D               	xorwf	___ftge@ff2+2,f,c
 17313  003C36  502B               	movf	___ftge@ff2,w,c
 17314  003C38  5C28               	subwf	___ftge@ff1,w,c
 17315  003C3A  502C               	movf	___ftge@ff2+1,w,c
 17316  003C3C  5829               	subwfb	___ftge@ff1+1,w,c
 17317  003C3E  502D               	movf	___ftge@ff2+2,w,c
 17318  003C40  582A               	subwfb	___ftge@ff1+2,w,c
 17319  003C42  B0D8               	btfsc	status,0,c
 17320  003C44  D002               	goto	l8968
 17321  003C46  90D8               	bcf	status,0,c
 17322  003C48  D002               	goto	l1425
 17323  003C4A                     l8968:
 17324  003C4A  80D8               	bsf	status,0,c
 17325  003C4C  D000               	goto	l1425
 17326  003C4E                     l1425:
 17327  003C4E  0012               	return		;funcret
 17328  003C50                     __end_of___ftge:
 17329                           	opt stack 0
 17330                           tblptru	equ	0xFF8
 17331                           tblptrh	equ	0xFF7
 17332                           tblptrl	equ	0xFF6
 17333                           tablat	equ	0xFF5
 17334                           prodh	equ	0xFF4
 17335                           prodl	equ	0xFF3
 17336                           intcon	equ	0xFF2
 17337                           intcon2	equ	0xFF1
 17338                           intcon3	equ	0xFF0
 17339                           postinc0	equ	0xFEE
 17340                           wreg	equ	0xFE8
 17341                           postdec1	equ	0xFE5
 17342                           fsr1l	equ	0xFE1
 17343                           indf2	equ	0xFDF
 17344                           postinc2	equ	0xFDE
 17345                           postdec2	equ	0xFDD
 17346                           fsr2h	equ	0xFDA
 17347                           fsr2l	equ	0xFD9
 17348                           status	equ	0xFD8
 17349                           
 17350 ;; *************** function _Do_LED_Down *****************
 17351 ;; Defined at:
 17352 ;;		line 2433 in file "lab_final_alt.c"
 17353 ;; Parameters:    Size  Location     Type
 17354 ;;		None
 17355 ;; Auto vars:     Size  Location     Type
 17356 ;;		None
 17357 ;; Return value:  Size  Location     Type
 17358 ;;		None               void
 17359 ;; Registers used:
 17360 ;;		wreg, status,2, status,0, cstack
 17361 ;; Tracked objects:
 17362 ;;		On entry : 0/0
 17363 ;;		On exit  : 0/0
 17364 ;;		Unchanged: 0/0
 17365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17366 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17367 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17368 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17369 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17370 ;;Total ram usage:        0 bytes
 17371 ;; Hardware stack levels used:    1
 17372 ;; Hardware stack levels required when called:    6
 17373 ;; This function calls:
 17374 ;;		_SPI_out
 17375 ;; This function is called by:
 17376 ;;		_main
 17377 ;; This function uses a non-reentrant model
 17378 ;;
 17379                           
 17380                           	psect	text69
 17381  004A92                     __ptext69:
 17382                           	opt stack 0
 17383  004A92                     _Do_LED_Down:
 17384                           	opt stack 24
 17385                           
 17386                           ;lab_final_alt.c: 2435: if(LED_Intensity == 0) LED_Intensity = 0;
 17387                           
 17388                           ;incstack = 0
 17389  004A92  0100               	movlb	0	; () banked
 17390  004A94  51E8               	movf	_LED_Intensity& (0+255),w,b
 17391  004A96  A4D8               	btfss	status,2,c
 17392  004A98  D002               	goto	l7264
 17393                           
 17394                           ; BSR set to: 0
 17395  004A9A  0E00               	movlw	0
 17396  004A9C  D003               	goto	L11
 17397  004A9E                     l7264:
 17398                           
 17399                           ; BSR set to: 0
 17400                           ;lab_final_alt.c: 2436: else LED_Intensity = LED_Intensity - 10;
 17401  004A9E  0100               	movlb	0	; () banked
 17402  004AA0  51E8               	movf	_LED_Intensity& (0+255),w,b
 17403  004AA2  0FF6               	addlw	246
 17404  004AA4                     L11:
 17405  004AA4  0100               	movlb	0	; () banked
 17406  004AA6  6FE8               	movwf	_LED_Intensity& (0+255),b
 17407  004AA8  D000               	goto	l7266
 17408  004AAA                     l7266:
 17409                           
 17410                           ; BSR set to: 0
 17411                           ;lab_final_alt.c: 2437: SPI_out(LED_Intensity + 100);
 17412  004AAA  0100               	movlb	0	; () banked
 17413  004AAC  51E8               	movf	_LED_Intensity& (0+255),w,b
 17414  004AAE  0F64               	addlw	100
 17415  004AB0  EC84  F01F         	call	_SPI_out
 17416  004AB4  0012               	return		;funcret
 17417  004AB6                     __end_of_Do_LED_Down:
 17418                           	opt stack 0
 17419                           tblptru	equ	0xFF8
 17420                           tblptrh	equ	0xFF7
 17421                           tblptrl	equ	0xFF6
 17422                           tablat	equ	0xFF5
 17423                           prodh	equ	0xFF4
 17424                           prodl	equ	0xFF3
 17425                           intcon	equ	0xFF2
 17426                           intcon2	equ	0xFF1
 17427                           intcon3	equ	0xFF0
 17428                           postinc0	equ	0xFEE
 17429                           wreg	equ	0xFE8
 17430                           postdec1	equ	0xFE5
 17431                           fsr1l	equ	0xFE1
 17432                           indf2	equ	0xFDF
 17433                           postinc2	equ	0xFDE
 17434                           postdec2	equ	0xFDD
 17435                           fsr2h	equ	0xFDA
 17436                           fsr2l	equ	0xFD9
 17437                           status	equ	0xFD8
 17438                           
 17439 ;; *************** function _SPI_out *****************
 17440 ;; Defined at:
 17441 ;;		line 2439 in file "lab_final_alt.c"
 17442 ;; Parameters:    Size  Location     Type
 17443 ;;  SPI_data        1    wreg     unsigned char 
 17444 ;; Auto vars:     Size  Location     Type
 17445 ;;  SPI_data        1   29[COMRAM] unsigned char 
 17446 ;;  i               2   31[COMRAM] int 
 17447 ;;  First_byte      1   30[COMRAM] unsigned char 
 17448 ;;  Second_byte     1   28[COMRAM] unsigned char 
 17449 ;; Return value:  Size  Location     Type
 17450 ;;		None               void
 17451 ;; Registers used:
 17452 ;;		wreg, status,2, status,0
 17453 ;; Tracked objects:
 17454 ;;		On entry : 0/0
 17455 ;;		On exit  : 0/0
 17456 ;;		Unchanged: 0/0
 17457 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17458 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17459 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17460 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17461 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17462 ;;Total ram usage:        6 bytes
 17463 ;; Hardware stack levels used:    1
 17464 ;; Hardware stack levels required when called:    5
 17465 ;; This function calls:
 17466 ;;		Nothing
 17467 ;; This function is called by:
 17468 ;;		_main
 17469 ;;		_Do_LED_Up
 17470 ;;		_Do_LED_Down
 17471 ;; This function uses a non-reentrant model
 17472 ;;
 17473                           
 17474                           	psect	text70
 17475  003F08                     __ptext70:
 17476                           	opt stack 0
 17477  003F08                     _SPI_out:
 17478                           	opt stack 25
 17479                           
 17480                           ;incstack = 0
 17481                           ;SPI_out@SPI_data stored from wreg
 17482  003F08  6E1E               	movwf	SPI_out@SPI_data,c
 17483                           
 17484                           ;lab_final_alt.c: 2441: int i;
 17485                           ;lab_final_alt.c: 2442: char First_byte, Second_byte;
 17486                           ;lab_final_alt.c: 2443: First_byte = (SPI_data & 0xf0) >> 4;
 17487  003F0A  381E               	swapf	SPI_out@SPI_data,w,c
 17488  003F0C  0B0F               	andlw	15
 17489  003F0E  0B0F               	andlw	15
 17490  003F10  6E1F               	movwf	SPI_out@First_byte,c
 17491                           
 17492                           ;lab_final_alt.c: 2445: First_byte = 0x30 | First_byte;
 17493  003F12  501F               	movf	SPI_out@First_byte,w,c
 17494  003F14  0930               	iorlw	48
 17495  003F16  6E1F               	movwf	SPI_out@First_byte,c
 17496                           
 17497                           ;lab_final_alt.c: 2446: Second_byte = (SPI_data & 0x0f) <<4;
 17498  003F18  C01E  F01C         	movff	SPI_out@SPI_data,??_SPI_out
 17499  003F1C  0E0F               	movlw	15
 17500  003F1E  161C               	andwf	??_SPI_out,f,c
 17501  003F20  381C               	swapf	??_SPI_out,w,c
 17502  003F22  0BF0               	andlw	240
 17503  003F24  6E1D               	movwf	SPI_out@Second_byte,c
 17504                           
 17505                           ;lab_final_alt.c: 2447: PORTCbits.RC1 = 0;
 17506  003F26  9282               	bcf	3970,1,c	;volatile
 17507                           
 17508                           ;lab_final_alt.c: 2448: SSPBUF = First_byte;
 17509  003F28  C01F  FFC9         	movff	SPI_out@First_byte,4041	;volatile
 17510                           
 17511                           ;lab_final_alt.c: 2449: while (SSPSTATbits.BF == 0);
 17512  003F2C  D000               	goto	l801
 17513  003F2E                     l801:
 17514  003F2E  A0C7               	btfss	4039,0,c	;volatile
 17515  003F30  D7FE               	goto	l801
 17516                           
 17517                           ;lab_final_alt.c: 2450: for ( i=0;i<1;i++);
 17518  003F32  0E00               	movlw	0
 17519  003F34  6E21               	movwf	SPI_out@i+1,c
 17520  003F36  0E00               	movlw	0
 17521  003F38  6E20               	movwf	SPI_out@i,c
 17522  003F3A  BE21               	btfsc	SPI_out@i+1,7,c
 17523  003F3C  D007               	goto	l5604
 17524  003F3E  5021               	movf	SPI_out@i+1,w,c
 17525  003F40  E10C               	bnz	l805
 17526  003F42  0420               	decf	SPI_out@i,w,c
 17527  003F44  B0D8               	btfsc	status,0,c
 17528  003F46  D009               	goto	l805
 17529  003F48  D001               	goto	l5604
 17530  003F4A  D007               	goto	l805
 17531  003F4C                     l5604:
 17532  003F4C  4A20               	infsnz	SPI_out@i,f,c
 17533  003F4E  2A21               	incf	SPI_out@i+1,f,c
 17534  003F50  BE21               	btfsc	SPI_out@i+1,7,c
 17535  003F52  D7FC               	goto	l5604
 17536  003F54  5021               	movf	SPI_out@i+1,w,c
 17537  003F56  E101               	bnz	u4490
 17538  003F58  D7F4               	goto	L12
 17539  003F5A                     u4490:
 17540  003F5A                     l805:
 17541                           
 17542                           ;lab_final_alt.c: 2451: SSPBUF = Second_byte;
 17543  003F5A  C01D  FFC9         	movff	SPI_out@Second_byte,4041	;volatile
 17544                           
 17545                           ;lab_final_alt.c: 2452: while(SSPSTATbits.BF == 0);
 17546  003F5E  D000               	goto	l806
 17547  003F60                     l806:
 17548  003F60  A0C7               	btfss	4039,0,c	;volatile
 17549  003F62  D7FE               	goto	l806
 17550                           
 17551                           ;lab_final_alt.c: 2453: for ( i=0;i<1;i++);
 17552  003F64  0E00               	movlw	0
 17553  003F66  6E21               	movwf	SPI_out@i+1,c
 17554  003F68  0E00               	movlw	0
 17555  003F6A  6E20               	movwf	SPI_out@i,c
 17556  003F6C  BE21               	btfsc	SPI_out@i+1,7,c
 17557  003F6E  D007               	goto	l5614
 17558  003F70  5021               	movf	SPI_out@i+1,w,c
 17559  003F72  E10C               	bnz	l810
 17560  003F74  0420               	decf	SPI_out@i,w,c
 17561  003F76  B0D8               	btfsc	status,0,c
 17562  003F78  D009               	goto	l810
 17563  003F7A  D001               	goto	l5614
 17564  003F7C  D007               	goto	l810
 17565  003F7E                     l5614:
 17566  003F7E  4A20               	infsnz	SPI_out@i,f,c
 17567  003F80  2A21               	incf	SPI_out@i+1,f,c
 17568  003F82  BE21               	btfsc	SPI_out@i+1,7,c
 17569  003F84  D7FC               	goto	l5614
 17570  003F86  5021               	movf	SPI_out@i+1,w,c
 17571  003F88  E101               	bnz	u4520
 17572  003F8A  D7F4               	goto	L13
 17573  003F8C                     u4520:
 17574  003F8C                     l810:
 17575                           
 17576                           ;lab_final_alt.c: 2454: PORTCbits.RC1 = 1;
 17577  003F8C  8282               	bsf	3970,1,c	;volatile
 17578  003F8E  0012               	return		;funcret
 17579  003F90                     __end_of_SPI_out:
 17580                           	opt stack 0
 17581                           tblptru	equ	0xFF8
 17582                           tblptrh	equ	0xFF7
 17583                           tblptrl	equ	0xFF6
 17584                           tablat	equ	0xFF5
 17585                           prodh	equ	0xFF4
 17586                           prodl	equ	0xFF3
 17587                           intcon	equ	0xFF2
 17588                           intcon2	equ	0xFF1
 17589                           intcon3	equ	0xFF0
 17590                           postinc0	equ	0xFEE
 17591                           wreg	equ	0xFE8
 17592                           postdec1	equ	0xFE5
 17593                           fsr1l	equ	0xFE1
 17594                           indf2	equ	0xFDF
 17595                           postinc2	equ	0xFDE
 17596                           postdec2	equ	0xFDD
 17597                           fsr2h	equ	0xFDA
 17598                           fsr2l	equ	0xFD9
 17599                           status	equ	0xFD8
 17600                           
 17601 ;; *************** function _DS3231_Turn_On_Alarm *****************
 17602 ;; Defined at:
 17603 ;;		line 2256 in file "lab_final_alt.c"
 17604 ;; Parameters:    Size  Location     Type
 17605 ;;  device          1    wreg     unsigned char 
 17606 ;; Auto vars:     Size  Location     Type
 17607 ;;  device          1   53[COMRAM] unsigned char 
 17608 ;; Return value:  Size  Location     Type
 17609 ;;		None               void
 17610 ;; Registers used:
 17611 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 17612 ;; Tracked objects:
 17613 ;;		On entry : 0/0
 17614 ;;		On exit  : 0/0
 17615 ;;		Unchanged: 0/0
 17616 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17617 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17618 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17619 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17620 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17621 ;;Total ram usage:        1 bytes
 17622 ;; Hardware stack levels used:    1
 17623 ;; Hardware stack levels required when called:    7
 17624 ;; This function calls:
 17625 ;;		_I2C_Start
 17626 ;;		_I2C_Stop
 17627 ;;		_I2C_Write
 17628 ;;		_delay_ms
 17629 ;; This function is called by:
 17630 ;;		_main
 17631 ;; This function uses a non-reentrant model
 17632 ;;
 17633                           
 17634                           	psect	text71
 17635  004800                     __ptext71:
 17636                           	opt stack 0
 17637  004800                     _DS3231_Turn_On_Alarm:
 17638                           	opt stack 23
 17639                           
 17640                           ;incstack = 0
 17641                           ;DS3231_Turn_On_Alarm@device stored from wreg
 17642  004800  6E36               	movwf	DS3231_Turn_On_Alarm@device,c
 17643                           
 17644                           ;lab_final_alt.c: 2258: INTCON3bits.INT1IE = 1;
 17645  004802  86F0               	bsf	intcon3,3,c	;volatile
 17646                           
 17647                           ;lab_final_alt.c: 2259: I2C_Start();
 17648  004804  ECDD  F025         	call	_I2C_Start	;wreg free
 17649                           
 17650                           ;lab_final_alt.c: 2260: I2C_Write((device << 1) | 0);
 17651  004808  5036               	movf	DS3231_Turn_On_Alarm@device,w,c
 17652  00480A  2436               	addwf	DS3231_Turn_On_Alarm@device,w,c
 17653  00480C  EC52  F023         	call	_I2C_Write
 17654                           
 17655                           ;lab_final_alt.c: 2261: I2C_Write(0x0E);
 17656  004810  0E0E               	movlw	14
 17657  004812  EC52  F023         	call	_I2C_Write
 17658                           
 17659                           ;lab_final_alt.c: 2263: I2C_Write(0x07);
 17660  004816  0E07               	movlw	7
 17661  004818  EC52  F023         	call	_I2C_Write
 17662                           
 17663                           ;lab_final_alt.c: 2264: I2C_Write(0x80);
 17664  00481C  0E80               	movlw	128
 17665  00481E  EC52  F023         	call	_I2C_Write
 17666                           
 17667                           ;lab_final_alt.c: 2265: I2C_Stop();
 17668  004822  ECD4  F025         	call	_I2C_Stop	;wreg free
 17669                           
 17670                           ;lab_final_alt.c: 2266: delay_ms(20);
 17671  004826  0E00               	movlw	0
 17672  004828  6E31               	movwf	delay_ms@ms+1,c
 17673  00482A  0E14               	movlw	20
 17674  00482C  6E30               	movwf	delay_ms@ms,c
 17675  00482E  ECDF  F021         	call	_delay_ms	;wreg free
 17676  004832  0012               	return		;funcret
 17677  004834                     __end_of_DS3231_Turn_On_Alarm:
 17678                           	opt stack 0
 17679                           tblptru	equ	0xFF8
 17680                           tblptrh	equ	0xFF7
 17681                           tblptrl	equ	0xFF6
 17682                           tablat	equ	0xFF5
 17683                           prodh	equ	0xFF4
 17684                           prodl	equ	0xFF3
 17685                           intcon	equ	0xFF2
 17686                           intcon2	equ	0xFF1
 17687                           intcon3	equ	0xFF0
 17688                           postinc0	equ	0xFEE
 17689                           wreg	equ	0xFE8
 17690                           postdec1	equ	0xFE5
 17691                           fsr1l	equ	0xFE1
 17692                           indf2	equ	0xFDF
 17693                           postinc2	equ	0xFDE
 17694                           postdec2	equ	0xFDD
 17695                           fsr2h	equ	0xFDA
 17696                           fsr2l	equ	0xFD9
 17697                           status	equ	0xFD8
 17698                           
 17699 ;; *************** function _DS3231_Turn_Off_Alarm *****************
 17700 ;; Defined at:
 17701 ;;		line 2270 in file "lab_final_alt.c"
 17702 ;; Parameters:    Size  Location     Type
 17703 ;;  device          1    wreg     unsigned char 
 17704 ;; Auto vars:     Size  Location     Type
 17705 ;;  device          1   53[COMRAM] unsigned char 
 17706 ;; Return value:  Size  Location     Type
 17707 ;;		None               void
 17708 ;; Registers used:
 17709 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 17710 ;; Tracked objects:
 17711 ;;		On entry : 0/0
 17712 ;;		On exit  : 0/0
 17713 ;;		Unchanged: 0/0
 17714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17715 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17716 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17717 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17718 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17719 ;;Total ram usage:        1 bytes
 17720 ;; Hardware stack levels used:    1
 17721 ;; Hardware stack levels required when called:    7
 17722 ;; This function calls:
 17723 ;;		_I2C_Start
 17724 ;;		_I2C_Stop
 17725 ;;		_I2C_Write
 17726 ;;		_delay_ms
 17727 ;; This function is called by:
 17728 ;;		_main
 17729 ;; This function uses a non-reentrant model
 17730 ;;
 17731                           
 17732                           	psect	text72
 17733  004794                     __ptext72:
 17734                           	opt stack 0
 17735  004794                     _DS3231_Turn_Off_Alarm:
 17736                           	opt stack 23
 17737                           
 17738                           ;incstack = 0
 17739                           ;DS3231_Turn_Off_Alarm@device stored from wreg
 17740  004794  6E36               	movwf	DS3231_Turn_Off_Alarm@device,c
 17741                           
 17742                           ;lab_final_alt.c: 2272: INTCONbits.INT0IF = 0;
 17743  004796  92F2               	bcf	intcon,1,c	;volatile
 17744                           
 17745                           ;lab_final_alt.c: 2273: INTCON3bits.INT1IE = 0;
 17746  004798  96F0               	bcf	intcon3,3,c	;volatile
 17747                           
 17748                           ;lab_final_alt.c: 2274: I2C_Start();
 17749  00479A  ECDD  F025         	call	_I2C_Start	;wreg free
 17750                           
 17751                           ;lab_final_alt.c: 2275: I2C_Write((device << 1) | 0);
 17752  00479E  5036               	movf	DS3231_Turn_Off_Alarm@device,w,c
 17753  0047A0  2436               	addwf	DS3231_Turn_Off_Alarm@device,w,c
 17754  0047A2  EC52  F023         	call	_I2C_Write
 17755                           
 17756                           ;lab_final_alt.c: 2276: I2C_Write(0x0E);
 17757  0047A6  0E0E               	movlw	14
 17758  0047A8  EC52  F023         	call	_I2C_Write
 17759                           
 17760                           ;lab_final_alt.c: 2277: I2C_Write(0x06);
 17761  0047AC  0E06               	movlw	6
 17762  0047AE  EC52  F023         	call	_I2C_Write
 17763                           
 17764                           ;lab_final_alt.c: 2278: I2C_Write(0x80);
 17765  0047B2  0E80               	movlw	128
 17766  0047B4  EC52  F023         	call	_I2C_Write
 17767                           
 17768                           ;lab_final_alt.c: 2279: I2C_Stop();
 17769  0047B8  ECD4  F025         	call	_I2C_Stop	;wreg free
 17770                           
 17771                           ;lab_final_alt.c: 2280: delay_ms(20);
 17772  0047BC  0E00               	movlw	0
 17773  0047BE  6E31               	movwf	delay_ms@ms+1,c
 17774  0047C0  0E14               	movlw	20
 17775  0047C2  6E30               	movwf	delay_ms@ms,c
 17776  0047C4  ECDF  F021         	call	_delay_ms	;wreg free
 17777  0047C8  0012               	return		;funcret
 17778  0047CA                     __end_of_DS3231_Turn_Off_Alarm:
 17779                           	opt stack 0
 17780                           tblptru	equ	0xFF8
 17781                           tblptrh	equ	0xFF7
 17782                           tblptrl	equ	0xFF6
 17783                           tablat	equ	0xFF5
 17784                           prodh	equ	0xFF4
 17785                           prodl	equ	0xFF3
 17786                           intcon	equ	0xFF2
 17787                           intcon2	equ	0xFF1
 17788                           intcon3	equ	0xFF0
 17789                           postinc0	equ	0xFEE
 17790                           wreg	equ	0xFE8
 17791                           postdec1	equ	0xFE5
 17792                           fsr1l	equ	0xFE1
 17793                           indf2	equ	0xFDF
 17794                           postinc2	equ	0xFDE
 17795                           postdec2	equ	0xFDD
 17796                           fsr2h	equ	0xFDA
 17797                           fsr2l	equ	0xFD9
 17798                           status	equ	0xFD8
 17799                           
 17800 ;; *************** function _DS3231_Init *****************
 17801 ;; Defined at:
 17802 ;;		line 2242 in file "lab_final_alt.c"
 17803 ;; Parameters:    Size  Location     Type
 17804 ;;  device          1    wreg     unsigned char 
 17805 ;; Auto vars:     Size  Location     Type
 17806 ;;  device          1   54[COMRAM] unsigned char 
 17807 ;;  control         1   55[COMRAM] unsigned char 
 17808 ;; Return value:  Size  Location     Type
 17809 ;;		None               void
 17810 ;; Registers used:
 17811 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 17812 ;; Tracked objects:
 17813 ;;		On entry : 0/0
 17814 ;;		On exit  : 0/0
 17815 ;;		Unchanged: 0/0
 17816 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17817 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17818 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17819 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17820 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17821 ;;Total ram usage:        2 bytes
 17822 ;; Hardware stack levels used:    1
 17823 ;; Hardware stack levels required when called:    9
 17824 ;; This function calls:
 17825 ;;		_DS3231_Read_Alarm_1_Time
 17826 ;;		_DS3231_Write_Alarm_1_Time
 17827 ;;		_I2C_Write_Address_Read_One_Byte
 17828 ;;		_I2C_Write_Address_Write_One_Byte
 17829 ;; This function is called by:
 17830 ;;		_main
 17831 ;; This function uses a non-reentrant model
 17832 ;;
 17833                           
 17834                           	psect	text73
 17835  004500                     __ptext73:
 17836                           	opt stack 0
 17837  004500                     _DS3231_Init:
 17838                           	opt stack 21
 17839                           
 17840                           ;incstack = 0
 17841                           ;DS3231_Init@device stored from wreg
 17842  004500  6E37               	movwf	DS3231_Init@device,c
 17843                           
 17844                           ;lab_final_alt.c: 2244: char control;
 17845                           ;lab_final_alt.c: 2245: control = I2C_Write_Address_Read_One_Byte(device, 0x0E);
 17846  004502  0E0E               	movlw	14
 17847  004504  6E1F               	movwf	I2C_Write_Address_Read_One_Byte@Address,c
 17848  004506  5037               	movf	DS3231_Init@device,w,c
 17849  004508  EC4C  F024         	call	_I2C_Write_Address_Read_One_Byte
 17850  00450C  6E38               	movwf	DS3231_Init@control,c
 17851                           
 17852                           ;lab_final_alt.c: 2246: control = control & 0x01;
 17853  00450E  5038               	movf	DS3231_Init@control,w,c
 17854  004510  0B01               	andlw	1
 17855  004512  6E38               	movwf	DS3231_Init@control,c
 17856                           
 17857                           ;lab_final_alt.c: 2247: control = control | 0x25;
 17858  004514  5038               	movf	DS3231_Init@control,w,c
 17859  004516  0925               	iorlw	37
 17860  004518  6E38               	movwf	DS3231_Init@control,c
 17861                           
 17862                           ;lab_final_alt.c: 2248: I2C_Write_Address_Write_One_Byte(device, 0x0E, control);
 17863  00451A  0E0E               	movlw	14
 17864  00451C  6E1E               	movwf	I2C_Write_Address_Write_One_Byte@Address,c
 17865  00451E  C038  F01F         	movff	DS3231_Init@control,I2C_Write_Address_Write_One_Byte@Data_Out
 17866  004522  5037               	movf	DS3231_Init@device,w,c
 17867  004524  EC6C  F025         	call	_I2C_Write_Address_Write_One_Byte
 17868                           
 17869                           ;lab_final_alt.c: 2249: DS3231_Read_Alarm_1_Time(0x68);
 17870  004528  0E68               	movlw	104
 17871  00452A  ECCB  F022         	call	_DS3231_Read_Alarm_1_Time
 17872                           
 17873                           ;lab_final_alt.c: 2250: alarm_second = alarm_second &0x7f;
 17874  00452E  5055               	movf	_alarm_second,w,c
 17875  004530  0B7F               	andlw	127
 17876  004532  6E55               	movwf	_alarm_second,c
 17877                           
 17878                           ;lab_final_alt.c: 2251: alarm_minute = alarm_minute &0x7f;
 17879  004534  5054               	movf	_alarm_minute,w,c
 17880  004536  0B7F               	andlw	127
 17881  004538  6E54               	movwf	_alarm_minute,c
 17882                           
 17883                           ;lab_final_alt.c: 2252: alarm_hour = alarm_hour &0x7f;
 17884  00453A  5053               	movf	_alarm_hour,w,c
 17885  00453C  0B7F               	andlw	127
 17886  00453E  6E53               	movwf	_alarm_hour,c
 17887                           
 17888                           ;lab_final_alt.c: 2253: alarm_date = 0x80;
 17889  004540  0E80               	movlw	128
 17890  004542  6E52               	movwf	_alarm_date,c
 17891                           
 17892                           ;lab_final_alt.c: 2254: DS3231_Write_Alarm_1_Time(0x68);
 17893  004544  0E68               	movlw	104
 17894  004546  ECAD  F023         	call	_DS3231_Write_Alarm_1_Time
 17895  00454A  0012               	return		;funcret
 17896  00454C                     __end_of_DS3231_Init:
 17897                           	opt stack 0
 17898                           tblptru	equ	0xFF8
 17899                           tblptrh	equ	0xFF7
 17900                           tblptrl	equ	0xFF6
 17901                           tablat	equ	0xFF5
 17902                           prodh	equ	0xFF4
 17903                           prodl	equ	0xFF3
 17904                           intcon	equ	0xFF2
 17905                           intcon2	equ	0xFF1
 17906                           intcon3	equ	0xFF0
 17907                           postinc0	equ	0xFEE
 17908                           wreg	equ	0xFE8
 17909                           postdec1	equ	0xFE5
 17910                           fsr1l	equ	0xFE1
 17911                           indf2	equ	0xFDF
 17912                           postinc2	equ	0xFDE
 17913                           postdec2	equ	0xFDD
 17914                           fsr2h	equ	0xFDA
 17915                           fsr2l	equ	0xFD9
 17916                           status	equ	0xFD8
 17917                           
 17918 ;; *************** function _I2C_Write_Address_Write_One_Byte *****************
 17919 ;; Defined at:
 17920 ;;		line 140 in file "softi2c.inc"
 17921 ;; Parameters:    Size  Location     Type
 17922 ;;  Device          1    wreg     unsigned char 
 17923 ;;  Address         1   29[COMRAM] unsigned char 
 17924 ;;  Data_Out        1   30[COMRAM] unsigned char 
 17925 ;; Auto vars:     Size  Location     Type
 17926 ;;  Device          1   31[COMRAM] unsigned char 
 17927 ;; Return value:  Size  Location     Type
 17928 ;;		None               void
 17929 ;; Registers used:
 17930 ;;		wreg, status,2, status,0, cstack
 17931 ;; Tracked objects:
 17932 ;;		On entry : 0/0
 17933 ;;		On exit  : 0/0
 17934 ;;		Unchanged: 0/0
 17935 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17936 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17937 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17938 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17939 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17940 ;;Total ram usage:        3 bytes
 17941 ;; Hardware stack levels used:    1
 17942 ;; Hardware stack levels required when called:    7
 17943 ;; This function calls:
 17944 ;;		_I2C_Start
 17945 ;;		_I2C_Stop
 17946 ;;		_I2C_Write
 17947 ;; This function is called by:
 17948 ;;		_DS3231_Init
 17949 ;; This function uses a non-reentrant model
 17950 ;;
 17951                           
 17952                           	psect	text74
 17953  004AD8                     __ptext74:
 17954                           	opt stack 0
 17955  004AD8                     _I2C_Write_Address_Write_One_Byte:
 17956                           	opt stack 22
 17957                           
 17958                           ;incstack = 0
 17959                           ;I2C_Write_Address_Write_One_Byte@Device stored from wreg
 17960  004AD8  6E20               	movwf	I2C_Write_Address_Write_One_Byte@Device,c
 17961                           
 17962                           ;softi2c.inc: 142: I2C_Start();
 17963  004ADA  ECDD  F025         	call	_I2C_Start	;wreg free
 17964                           
 17965                           ;softi2c.inc: 143: I2C_Write((Device << 1) | 0);
 17966  004ADE  5020               	movf	I2C_Write_Address_Write_One_Byte@Device,w,c
 17967  004AE0  2420               	addwf	I2C_Write_Address_Write_One_Byte@Device,w,c
 17968  004AE2  EC52  F023         	call	_I2C_Write
 17969                           
 17970                           ;softi2c.inc: 144: I2C_Write(Address);
 17971  004AE6  501E               	movf	I2C_Write_Address_Write_One_Byte@Address,w,c
 17972  004AE8  EC52  F023         	call	_I2C_Write
 17973                           
 17974                           ;softi2c.inc: 145: I2C_Write(Data_Out);
 17975  004AEC  501F               	movf	I2C_Write_Address_Write_One_Byte@Data_Out,w,c
 17976  004AEE  EC52  F023         	call	_I2C_Write
 17977                           
 17978                           ;softi2c.inc: 146: I2C_Stop();
 17979  004AF2  ECD4  F025         	call	_I2C_Stop	;wreg free
 17980  004AF6  0012               	return		;funcret
 17981  004AF8                     __end_of_I2C_Write_Address_Write_One_Byte:
 17982                           	opt stack 0
 17983                           tblptru	equ	0xFF8
 17984                           tblptrh	equ	0xFF7
 17985                           tblptrl	equ	0xFF6
 17986                           tablat	equ	0xFF5
 17987                           prodh	equ	0xFF4
 17988                           prodl	equ	0xFF3
 17989                           intcon	equ	0xFF2
 17990                           intcon2	equ	0xFF1
 17991                           intcon3	equ	0xFF0
 17992                           postinc0	equ	0xFEE
 17993                           wreg	equ	0xFE8
 17994                           postdec1	equ	0xFE5
 17995                           fsr1l	equ	0xFE1
 17996                           indf2	equ	0xFDF
 17997                           postinc2	equ	0xFDE
 17998                           postdec2	equ	0xFDD
 17999                           fsr2h	equ	0xFDA
 18000                           fsr2l	equ	0xFD9
 18001                           status	equ	0xFD8
 18002                           
 18003 ;; *************** function _I2C_Write_Address_Read_One_Byte *****************
 18004 ;; Defined at:
 18005 ;;		line 127 in file "softi2c.inc"
 18006 ;; Parameters:    Size  Location     Type
 18007 ;;  Device          1    wreg     unsigned char 
 18008 ;;  Address         1   30[COMRAM] unsigned char 
 18009 ;; Auto vars:     Size  Location     Type
 18010 ;;  Device          1   32[COMRAM] unsigned char 
 18011 ;;  Data_Ret        1   31[COMRAM] unsigned char 
 18012 ;; Return value:  Size  Location     Type
 18013 ;;                  1    wreg      unsigned char 
 18014 ;; Registers used:
 18015 ;;		wreg, status,2, status,0, cstack
 18016 ;; Tracked objects:
 18017 ;;		On entry : 0/0
 18018 ;;		On exit  : 0/0
 18019 ;;		Unchanged: 0/0
 18020 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18021 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18022 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18023 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18024 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18025 ;;Total ram usage:        3 bytes
 18026 ;; Hardware stack levels used:    1
 18027 ;; Hardware stack levels required when called:    8
 18028 ;; This function calls:
 18029 ;;		_I2C_ReStart
 18030 ;;		_I2C_Read
 18031 ;;		_I2C_Start
 18032 ;;		_I2C_Stop
 18033 ;;		_I2C_Write
 18034 ;; This function is called by:
 18035 ;;		_DS3231_Init
 18036 ;; This function uses a non-reentrant model
 18037 ;;
 18038                           
 18039                           	psect	text75
 18040  004898                     __ptext75:
 18041                           	opt stack 0
 18042  004898                     _I2C_Write_Address_Read_One_Byte:
 18043                           	opt stack 21
 18044                           
 18045                           ;incstack = 0
 18046                           ;I2C_Write_Address_Read_One_Byte@Device stored from wreg
 18047  004898  6E21               	movwf	I2C_Write_Address_Read_One_Byte@Device,c
 18048                           
 18049                           ;softi2c.inc: 129: char Data_Ret;
 18050                           ;softi2c.inc: 130: I2C_Start();
 18051  00489A  ECDD  F025         	call	_I2C_Start	;wreg free
 18052                           
 18053                           ;softi2c.inc: 131: I2C_Write((Device << 1) | 0);
 18054  00489E  5021               	movf	I2C_Write_Address_Read_One_Byte@Device,w,c
 18055  0048A0  2421               	addwf	I2C_Write_Address_Read_One_Byte@Device,w,c
 18056  0048A2  EC52  F023         	call	_I2C_Write
 18057                           
 18058                           ;softi2c.inc: 132: I2C_Write(Address);
 18059  0048A6  501F               	movf	I2C_Write_Address_Read_One_Byte@Address,w,c
 18060  0048A8  EC52  F023         	call	_I2C_Write
 18061                           
 18062                           ;softi2c.inc: 133: I2C_ReStart();
 18063  0048AC  ECA3  F025         	call	_I2C_ReStart	;wreg free
 18064                           
 18065                           ;softi2c.inc: 134: I2C_Write((Device << 1) | 1);
 18066  0048B0  80D8               	bsf	status,0,c
 18067  0048B2  3421               	rlcf	I2C_Write_Address_Read_One_Byte@Device,w,c
 18068  0048B4  EC52  F023         	call	_I2C_Write
 18069                           
 18070                           ;softi2c.inc: 135: Data_Ret = I2C_Read(0);
 18071  0048B8  0E00               	movlw	0
 18072  0048BA  ECF0  F022         	call	_I2C_Read
 18073  0048BE  6E20               	movwf	I2C_Write_Address_Read_One_Byte@Data_Ret,c
 18074                           
 18075                           ;softi2c.inc: 136: I2C_Stop();
 18076  0048C0  ECD4  F025         	call	_I2C_Stop	;wreg free
 18077                           
 18078                           ;softi2c.inc: 137: return Data_Ret;
 18079  0048C4  5020               	movf	I2C_Write_Address_Read_One_Byte@Data_Ret,w,c
 18080  0048C6  D000               	goto	l544
 18081  0048C8                     l544:
 18082  0048C8  0012               	return		;funcret
 18083  0048CA                     __end_of_I2C_Write_Address_Read_One_Byte:
 18084                           	opt stack 0
 18085                           tblptru	equ	0xFF8
 18086                           tblptrh	equ	0xFF7
 18087                           tblptrl	equ	0xFF6
 18088                           tablat	equ	0xFF5
 18089                           prodh	equ	0xFF4
 18090                           prodl	equ	0xFF3
 18091                           intcon	equ	0xFF2
 18092                           intcon2	equ	0xFF1
 18093                           intcon3	equ	0xFF0
 18094                           postinc0	equ	0xFEE
 18095                           wreg	equ	0xFE8
 18096                           postdec1	equ	0xFE5
 18097                           fsr1l	equ	0xFE1
 18098                           indf2	equ	0xFDF
 18099                           postinc2	equ	0xFDE
 18100                           postdec2	equ	0xFDD
 18101                           fsr2h	equ	0xFDA
 18102                           fsr2l	equ	0xFD9
 18103                           status	equ	0xFD8
 18104                           
 18105 ;; *************** function _DS3231_Write_Alarm_1_Time *****************
 18106 ;; Defined at:
 18107 ;;		line 2344 in file "lab_final_alt.c"
 18108 ;; Parameters:    Size  Location     Type
 18109 ;;  Device          1    wreg     unsigned char 
 18110 ;; Auto vars:     Size  Location     Type
 18111 ;;  Device          1   53[COMRAM] unsigned char 
 18112 ;; Return value:  Size  Location     Type
 18113 ;;		None               void
 18114 ;; Registers used:
 18115 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 18116 ;; Tracked objects:
 18117 ;;		On entry : 0/0
 18118 ;;		On exit  : 0/0
 18119 ;;		Unchanged: 0/0
 18120 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18121 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18122 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18123 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18124 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18125 ;;Total ram usage:        1 bytes
 18126 ;; Hardware stack levels used:    1
 18127 ;; Hardware stack levels required when called:    7
 18128 ;; This function calls:
 18129 ;;		_I2C_Start
 18130 ;;		_I2C_Write
 18131 ;;		_delay_ms
 18132 ;; This function is called by:
 18133 ;;		_Do_Setup_Alarm_Time
 18134 ;;		_DS3231_Init
 18135 ;; This function uses a non-reentrant model
 18136 ;;
 18137                           
 18138                           	psect	text76
 18139  00475A                     __ptext76:
 18140                           	opt stack 0
 18141  00475A                     _DS3231_Write_Alarm_1_Time:
 18142                           	opt stack 22
 18143                           
 18144                           ;incstack = 0
 18145                           ;DS3231_Write_Alarm_1_Time@Device stored from wreg
 18146  00475A  6E36               	movwf	DS3231_Write_Alarm_1_Time@Device,c
 18147                           
 18148                           ;lab_final_alt.c: 2346: I2C_Start();
 18149  00475C  ECDD  F025         	call	_I2C_Start	;wreg free
 18150                           
 18151                           ;lab_final_alt.c: 2347: I2C_Write((Device << 1) | 0);
 18152  004760  5036               	movf	DS3231_Write_Alarm_1_Time@Device,w,c
 18153  004762  2436               	addwf	DS3231_Write_Alarm_1_Time@Device,w,c
 18154  004764  EC52  F023         	call	_I2C_Write
 18155                           
 18156                           ;lab_final_alt.c: 2348: I2C_Write(0x07);
 18157  004768  0E07               	movlw	7
 18158  00476A  EC52  F023         	call	_I2C_Write
 18159                           
 18160                           ;lab_final_alt.c: 2349: I2C_Write(alarm_second);
 18161  00476E  5055               	movf	_alarm_second,w,c
 18162  004770  EC52  F023         	call	_I2C_Write
 18163                           
 18164                           ;lab_final_alt.c: 2350: I2C_Write(alarm_minute);
 18165  004774  5054               	movf	_alarm_minute,w,c
 18166  004776  EC52  F023         	call	_I2C_Write
 18167                           
 18168                           ;lab_final_alt.c: 2351: I2C_Write(alarm_hour);
 18169  00477A  5053               	movf	_alarm_hour,w,c
 18170  00477C  EC52  F023         	call	_I2C_Write
 18171                           
 18172                           ;lab_final_alt.c: 2352: I2C_Write(alarm_date);
 18173  004780  5052               	movf	_alarm_date,w,c
 18174  004782  EC52  F023         	call	_I2C_Write
 18175                           
 18176                           ;lab_final_alt.c: 2353: delay_ms(20);
 18177  004786  0E00               	movlw	0
 18178  004788  6E31               	movwf	delay_ms@ms+1,c
 18179  00478A  0E14               	movlw	20
 18180  00478C  6E30               	movwf	delay_ms@ms,c
 18181  00478E  ECDF  F021         	call	_delay_ms	;wreg free
 18182  004792  0012               	return		;funcret
 18183  004794                     __end_of_DS3231_Write_Alarm_1_Time:
 18184                           	opt stack 0
 18185                           tblptru	equ	0xFF8
 18186                           tblptrh	equ	0xFF7
 18187                           tblptrl	equ	0xFF6
 18188                           tablat	equ	0xFF5
 18189                           prodh	equ	0xFF4
 18190                           prodl	equ	0xFF3
 18191                           intcon	equ	0xFF2
 18192                           intcon2	equ	0xFF1
 18193                           intcon3	equ	0xFF0
 18194                           postinc0	equ	0xFEE
 18195                           wreg	equ	0xFE8
 18196                           postdec1	equ	0xFE5
 18197                           fsr1l	equ	0xFE1
 18198                           indf2	equ	0xFDF
 18199                           postinc2	equ	0xFDE
 18200                           postdec2	equ	0xFDD
 18201                           fsr2h	equ	0xFDA
 18202                           fsr2l	equ	0xFD9
 18203                           status	equ	0xFD8
 18204                           
 18205 ;; *************** function _DS3231_Read_Alarm_1_Time *****************
 18206 ;; Defined at:
 18207 ;;		line 2300 in file "lab_final_alt.c"
 18208 ;; Parameters:    Size  Location     Type
 18209 ;;  Device          1    wreg     unsigned char 
 18210 ;; Auto vars:     Size  Location     Type
 18211 ;;  Device          1   53[COMRAM] unsigned char 
 18212 ;; Return value:  Size  Location     Type
 18213 ;;		None               void
 18214 ;; Registers used:
 18215 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 18216 ;; Tracked objects:
 18217 ;;		On entry : 0/0
 18218 ;;		On exit  : 0/0
 18219 ;;		Unchanged: 0/0
 18220 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18221 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18222 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18223 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18224 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18225 ;;Total ram usage:        1 bytes
 18226 ;; Hardware stack levels used:    1
 18227 ;; Hardware stack levels required when called:    8
 18228 ;; This function calls:
 18229 ;;		_I2C_ReStart
 18230 ;;		_I2C_Read
 18231 ;;		_I2C_Start
 18232 ;;		_I2C_Stop
 18233 ;;		_I2C_Write
 18234 ;;		_delay_ms
 18235 ;; This function is called by:
 18236 ;;		_Do_Setup_Alarm_Time
 18237 ;;		_DS3231_Init
 18238 ;; This function uses a non-reentrant model
 18239 ;;
 18240                           
 18241                           	psect	text77
 18242  004596                     __ptext77:
 18243                           	opt stack 0
 18244  004596                     _DS3231_Read_Alarm_1_Time:
 18245                           	opt stack 21
 18246                           
 18247                           ;incstack = 0
 18248                           ;DS3231_Read_Alarm_1_Time@Device stored from wreg
 18249  004596  6E36               	movwf	DS3231_Read_Alarm_1_Time@Device,c
 18250                           
 18251                           ;lab_final_alt.c: 2302: I2C_Start();
 18252  004598  ECDD  F025         	call	_I2C_Start	;wreg free
 18253                           
 18254                           ;lab_final_alt.c: 2303: I2C_Write((Device << 1) | 0);
 18255  00459C  5036               	movf	DS3231_Read_Alarm_1_Time@Device,w,c
 18256  00459E  2436               	addwf	DS3231_Read_Alarm_1_Time@Device,w,c
 18257  0045A0  EC52  F023         	call	_I2C_Write
 18258                           
 18259                           ;lab_final_alt.c: 2304: I2C_Write(0x07);
 18260  0045A4  0E07               	movlw	7
 18261  0045A6  EC52  F023         	call	_I2C_Write
 18262                           
 18263                           ;lab_final_alt.c: 2305: I2C_ReStart();
 18264  0045AA  ECA3  F025         	call	_I2C_ReStart	;wreg free
 18265                           
 18266                           ;lab_final_alt.c: 2306: I2C_Write((Device << 1) | 1);
 18267  0045AE  80D8               	bsf	status,0,c
 18268  0045B0  3436               	rlcf	DS3231_Read_Alarm_1_Time@Device,w,c
 18269  0045B2  EC52  F023         	call	_I2C_Write
 18270                           
 18271                           ;lab_final_alt.c: 2307: alarm_second = I2C_Read(1);
 18272  0045B6  0E01               	movlw	1
 18273  0045B8  ECF0  F022         	call	_I2C_Read
 18274  0045BC  6E55               	movwf	_alarm_second,c
 18275                           
 18276                           ;lab_final_alt.c: 2308: alarm_minute = I2C_Read(1);
 18277  0045BE  0E01               	movlw	1
 18278  0045C0  ECF0  F022         	call	_I2C_Read
 18279  0045C4  6E54               	movwf	_alarm_minute,c
 18280                           
 18281                           ;lab_final_alt.c: 2309: alarm_hour = I2C_Read(0);
 18282  0045C6  0E00               	movlw	0
 18283  0045C8  ECF0  F022         	call	_I2C_Read
 18284  0045CC  6E53               	movwf	_alarm_hour,c
 18285                           
 18286                           ;lab_final_alt.c: 2310: I2C_Stop();
 18287  0045CE  ECD4  F025         	call	_I2C_Stop	;wreg free
 18288                           
 18289                           ;lab_final_alt.c: 2311: delay_ms(50);
 18290  0045D2  0E00               	movlw	0
 18291  0045D4  6E31               	movwf	delay_ms@ms+1,c
 18292  0045D6  0E32               	movlw	50
 18293  0045D8  6E30               	movwf	delay_ms@ms,c
 18294  0045DA  ECDF  F021         	call	_delay_ms	;wreg free
 18295  0045DE  0012               	return		;funcret
 18296  0045E0                     __end_of_DS3231_Read_Alarm_1_Time:
 18297                           	opt stack 0
 18298                           tblptru	equ	0xFF8
 18299                           tblptrh	equ	0xFF7
 18300                           tblptrl	equ	0xFF6
 18301                           tablat	equ	0xFF5
 18302                           prodh	equ	0xFF4
 18303                           prodl	equ	0xFF3
 18304                           intcon	equ	0xFF2
 18305                           intcon2	equ	0xFF1
 18306                           intcon3	equ	0xFF0
 18307                           postinc0	equ	0xFEE
 18308                           wreg	equ	0xFE8
 18309                           postdec1	equ	0xFE5
 18310                           fsr1l	equ	0xFE1
 18311                           indf2	equ	0xFDF
 18312                           postinc2	equ	0xFDE
 18313                           postdec2	equ	0xFDD
 18314                           fsr2h	equ	0xFDA
 18315                           fsr2l	equ	0xFD9
 18316                           status	equ	0xFD8
 18317                           
 18318 ;; *************** function _delay_ms *****************
 18319 ;; Defined at:
 18320 ;;		line 2355 in file "lab_final_alt.c"
 18321 ;; Parameters:    Size  Location     Type
 18322 ;;  ms              2   47[COMRAM] int 
 18323 ;; Auto vars:     Size  Location     Type
 18324 ;;  count           2   51[COMRAM] int 
 18325 ;; Return value:  Size  Location     Type
 18326 ;;		None               void
 18327 ;; Registers used:
 18328 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 18329 ;; Tracked objects:
 18330 ;;		On entry : 0/0
 18331 ;;		On exit  : 0/0
 18332 ;;		Unchanged: 0/0
 18333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18334 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18335 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18336 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18337 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18338 ;;Total ram usage:        6 bytes
 18339 ;; Hardware stack levels used:    1
 18340 ;; Hardware stack levels required when called:    6
 18341 ;; This function calls:
 18342 ;;		___wmul
 18343 ;; This function is called by:
 18344 ;;		_LCD_Reset
 18345 ;;		_Rcmd1
 18346 ;;		_Rcmd3
 18347 ;;		_DS3231_Turn_On_Alarm
 18348 ;;		_DS3231_Turn_Off_Alarm
 18349 ;;		_DS3231_Read_Time
 18350 ;;		_DS3231_Read_Alarm_1_Time
 18351 ;;		_DS3231_Read_Temp
 18352 ;;		_DS3231_Write_Time
 18353 ;;		_DS3231_Write_Alarm_1_Time
 18354 ;;		_Bcmd
 18355 ;; This function uses a non-reentrant model
 18356 ;;
 18357                           
 18358                           	psect	text78
 18359  0043BE                     __ptext78:
 18360                           	opt stack 0
 18361  0043BE                     _delay_ms:
 18362                           	opt stack 22
 18363                           
 18364                           ;lab_final_alt.c: 2359: int count;
 18365                           ;lab_final_alt.c: 2360: count = 8000000/4000/32 * ms;
 18366                           
 18367                           ;incstack = 0
 18368  0043BE  C030  F02A         	movff	delay_ms@ms,___wmul@multiplier
 18369  0043C2  C031  F02B         	movff	delay_ms@ms+1,___wmul@multiplier+1
 18370  0043C6  0E00               	movlw	0
 18371  0043C8  6E2D               	movwf	___wmul@multiplicand+1,c
 18372  0043CA  0E3E               	movlw	62
 18373  0043CC  6E2C               	movwf	___wmul@multiplicand,c
 18374  0043CE  ECC3  F024         	call	___wmul	;wreg free
 18375  0043D2  C02A  F034         	movff	?___wmul,delay_ms@count
 18376  0043D6  C02B  F035         	movff	?___wmul+1,delay_ms@count+1
 18377                           
 18378                           ;lab_final_alt.c: 2361: count = (0xffff - count);
 18379  0043DA  C034  F032         	movff	delay_ms@count,??_delay_ms
 18380  0043DE  C035  F033         	movff	delay_ms@count+1,??_delay_ms+1
 18381  0043E2  1E32               	comf	??_delay_ms,f,c
 18382  0043E4  1E33               	comf	??_delay_ms+1,f,c
 18383  0043E6  4A32               	infsnz	??_delay_ms,f,c
 18384  0043E8  2A33               	incf	??_delay_ms+1,f,c
 18385  0043EA  0EFF               	movlw	255
 18386  0043EC  2432               	addwf	??_delay_ms,w,c
 18387  0043EE  6E34               	movwf	delay_ms@count,c
 18388  0043F0  0EFF               	movlw	255
 18389  0043F2  2033               	addwfc	??_delay_ms+1,w,c
 18390  0043F4  6E35               	movwf	delay_ms@count+1,c
 18391                           
 18392                           ;lab_final_alt.c: 2362: T0CON = 0x04;
 18393  0043F6  0E04               	movlw	4
 18394  0043F8  6ED5               	movwf	4053,c	;volatile
 18395                           
 18396                           ;lab_final_alt.c: 2364: TMR0L = count & 0x00ff;
 18397  0043FA  C034  FFD6         	movff	delay_ms@count,4054	;volatile
 18398                           
 18399                           ;lab_final_alt.c: 2365: TMR0H = count >> 8;
 18400  0043FE  5035               	movf	delay_ms@count+1,w,c
 18401  004400  6ED7               	movwf	4055,c	;volatile
 18402                           
 18403                           ;lab_final_alt.c: 2366: INTCONbits.TMR0IF = 0;
 18404  004402  94F2               	bcf	intcon,2,c	;volatile
 18405                           
 18406                           ;lab_final_alt.c: 2367: T0CONbits.TMR0ON = 1;
 18407  004404  8ED5               	bsf	4053,7,c	;volatile
 18408                           
 18409                           ;lab_final_alt.c: 2368: while (INTCONbits.TMR0IF == 0);
 18410  004406  D000               	goto	l759
 18411  004408                     l759:
 18412  004408  A4F2               	btfss	intcon,2,c	;volatile
 18413  00440A  D7FE               	goto	l759
 18414                           
 18415                           ;lab_final_alt.c: 2370: T0CONbits.TMR0ON = 0;
 18416  00440C  9ED5               	bcf	4053,7,c	;volatile
 18417  00440E  0012               	return		;funcret
 18418  004410                     __end_of_delay_ms:
 18419                           	opt stack 0
 18420                           tblptru	equ	0xFF8
 18421                           tblptrh	equ	0xFF7
 18422                           tblptrl	equ	0xFF6
 18423                           tablat	equ	0xFF5
 18424                           prodh	equ	0xFF4
 18425                           prodl	equ	0xFF3
 18426                           intcon	equ	0xFF2
 18427                           intcon2	equ	0xFF1
 18428                           intcon3	equ	0xFF0
 18429                           postinc0	equ	0xFEE
 18430                           wreg	equ	0xFE8
 18431                           postdec1	equ	0xFE5
 18432                           fsr1l	equ	0xFE1
 18433                           indf2	equ	0xFDF
 18434                           postinc2	equ	0xFDE
 18435                           postdec2	equ	0xFDD
 18436                           fsr2h	equ	0xFDA
 18437                           fsr2l	equ	0xFD9
 18438                           status	equ	0xFD8
 18439                           
 18440 ;; *************** function ___wmul *****************
 18441 ;; Defined at:
 18442 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
 18443 ;; Parameters:    Size  Location     Type
 18444 ;;  multiplier      2   41[COMRAM] unsigned int 
 18445 ;;  multiplicand    2   43[COMRAM] unsigned int 
 18446 ;; Auto vars:     Size  Location     Type
 18447 ;;  product         2   45[COMRAM] unsigned int 
 18448 ;; Return value:  Size  Location     Type
 18449 ;;                  2   41[COMRAM] unsigned int 
 18450 ;; Registers used:
 18451 ;;		wreg, status,2, status,0, prodl, prodh
 18452 ;; Tracked objects:
 18453 ;;		On entry : 0/0
 18454 ;;		On exit  : 0/0
 18455 ;;		Unchanged: 0/0
 18456 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18457 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18458 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18459 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18460 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18461 ;;Total ram usage:        6 bytes
 18462 ;; Hardware stack levels used:    1
 18463 ;; Hardware stack levels required when called:    5
 18464 ;; This function calls:
 18465 ;;		Nothing
 18466 ;; This function is called by:
 18467 ;;		_drawChar
 18468 ;;		_Do_Update_Main_Screen
 18469 ;;		_delay_ms
 18470 ;;		_fround
 18471 ;;		_scale
 18472 ;;		_printf
 18473 ;; This function uses a non-reentrant model
 18474 ;;
 18475                           
 18476                           	psect	text79
 18477  004986                     __ptext79:
 18478                           	opt stack 0
 18479  004986                     ___wmul:
 18480                           	opt stack 23
 18481                           
 18482                           ;incstack = 0
 18483  004986  502A               	movf	___wmul@multiplier,w,c
 18484  004988  022C               	mulwf	___wmul@multiplicand,c
 18485  00498A  CFF3 F02E          	movff	prodl,___wmul@product
 18486  00498E  CFF4 F02F          	movff	prodh,___wmul@product+1
 18487  004992  502A               	movf	___wmul@multiplier,w,c
 18488  004994  022D               	mulwf	___wmul@multiplicand+1,c
 18489  004996  50F3               	movf	prodl,w,c
 18490  004998  262F               	addwf	___wmul@product+1,f,c
 18491  00499A  502B               	movf	___wmul@multiplier+1,w,c
 18492  00499C  022C               	mulwf	___wmul@multiplicand,c
 18493  00499E  50F3               	movf	prodl,w,c
 18494  0049A0  262F               	addwf	___wmul@product+1,f,c
 18495  0049A2  C02E  F02A         	movff	___wmul@product,?___wmul
 18496  0049A6  C02F  F02B         	movff	___wmul@product+1,?___wmul+1
 18497  0049AA  D000               	goto	l1002
 18498  0049AC                     l1002:
 18499  0049AC  0012               	return		;funcret
 18500  0049AE                     __end_of___wmul:
 18501                           	opt stack 0
 18502                           tblptru	equ	0xFF8
 18503                           tblptrh	equ	0xFF7
 18504                           tblptrl	equ	0xFF6
 18505                           tablat	equ	0xFF5
 18506                           prodh	equ	0xFF4
 18507                           prodl	equ	0xFF3
 18508                           intcon	equ	0xFF2
 18509                           intcon2	equ	0xFF1
 18510                           intcon3	equ	0xFF0
 18511                           postinc0	equ	0xFEE
 18512                           wreg	equ	0xFE8
 18513                           postdec1	equ	0xFE5
 18514                           fsr1l	equ	0xFE1
 18515                           indf2	equ	0xFDF
 18516                           postinc2	equ	0xFDE
 18517                           postdec2	equ	0xFDD
 18518                           fsr2h	equ	0xFDA
 18519                           fsr2l	equ	0xFD9
 18520                           status	equ	0xFD8
 18521                           
 18522 ;; *************** function _I2C_Write *****************
 18523 ;; Defined at:
 18524 ;;		line 46 in file "softi2c.inc"
 18525 ;; Parameters:    Size  Location     Type
 18526 ;;  outByte         1    wreg     unsigned char 
 18527 ;; Auto vars:     Size  Location     Type
 18528 ;;  outByte         1   27[COMRAM] unsigned char 
 18529 ;;  n               1   28[COMRAM] unsigned char 
 18530 ;; Return value:  Size  Location     Type
 18531 ;;		None               void
 18532 ;; Registers used:
 18533 ;;		wreg, status,2, status,0, cstack
 18534 ;; Tracked objects:
 18535 ;;		On entry : 0/0
 18536 ;;		On exit  : 0/0
 18537 ;;		Unchanged: 0/0
 18538 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18539 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18540 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18541 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18542 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18543 ;;Total ram usage:        2 bytes
 18544 ;; Hardware stack levels used:    1
 18545 ;; Hardware stack levels required when called:    6
 18546 ;; This function calls:
 18547 ;;		_i2cHighScl
 18548 ;;		_i2cHighSda
 18549 ;;		_i2cLowScl
 18550 ;;		_i2cLowSda
 18551 ;; This function is called by:
 18552 ;;		_I2C_Write_Address_Read_One_Byte
 18553 ;;		_I2C_Write_Address_Write_One_Byte
 18554 ;;		_DS3231_Turn_On_Alarm
 18555 ;;		_DS3231_Turn_Off_Alarm
 18556 ;;		_DS3231_Read_Time
 18557 ;;		_DS3231_Read_Alarm_1_Time
 18558 ;;		_DS3231_Read_Temp
 18559 ;;		_DS3231_Write_Time
 18560 ;;		_DS3231_Write_Alarm_1_Time
 18561 ;;		_I2C_Write_Cmd_Only
 18562 ;;		_I2C_Write_Cmd_Write_Data
 18563 ;;		_I2C_Write_Cmd_Read_One_Byte
 18564 ;; This function uses a non-reentrant model
 18565 ;;
 18566                           
 18567                           	psect	text80
 18568  0046A4                     __ptext80:
 18569                           	opt stack 0
 18570  0046A4                     _I2C_Write:
 18571                           	opt stack 22
 18572                           
 18573                           ;incstack = 0
 18574                           ;I2C_Write@outByte stored from wreg
 18575  0046A4  6E1C               	movwf	I2C_Write@outByte,c
 18576                           
 18577                           ;softi2c.inc: 48: unsigned char n;
 18578                           ;softi2c.inc: 49: for(n=0; n<8; n++)
 18579  0046A6  0E00               	movlw	0
 18580  0046A8  6E1D               	movwf	I2C_Write@n,c
 18581  0046AA                     l8080:
 18582  0046AA  0E07               	movlw	7
 18583  0046AC  641D               	cpfsgt	I2C_Write@n,c
 18584  0046AE  D001               	goto	l510
 18585  0046B0  D011               	goto	l8098
 18586  0046B2                     l510:
 18587                           
 18588                           ;softi2c.inc: 50: {
 18589                           ;softi2c.inc: 51: if(outByte&0x80) i2cHighSda();
 18590  0046B2  AE1C               	btfss	I2C_Write@outByte,7,c
 18591  0046B4  D003               	goto	l8086
 18592  0046B6  EC48  F026         	call	_i2cHighSda	;wreg free
 18593  0046BA  D003               	goto	l8088
 18594  0046BC                     l8086:
 18595                           
 18596                           ;softi2c.inc: 52: else i2cLowSda();
 18597  0046BC  EC3A  F026         	call	_i2cLowSda	;wreg free
 18598  0046C0  D000               	goto	l8088
 18599  0046C2                     l8088:
 18600                           
 18601                           ;softi2c.inc: 53: i2cHighScl();
 18602  0046C2  EC1E  F026         	call	_i2cHighScl	;wreg free
 18603                           
 18604                           ;softi2c.inc: 54: i2cLowScl();
 18605  0046C6  EC44  F026         	call	_i2cLowScl	;wreg free
 18606                           
 18607                           ;softi2c.inc: 55: outByte = outByte << 1;
 18608  0046CA  501C               	movf	I2C_Write@outByte,w,c
 18609  0046CC  241C               	addwf	I2C_Write@outByte,w,c
 18610  0046CE  6E1C               	movwf	I2C_Write@outByte,c
 18611  0046D0  2A1D               	incf	I2C_Write@n,f,c
 18612  0046D2  D7EB               	goto	l8080
 18613  0046D4                     l8098:
 18614                           
 18615                           ;softi2c.inc: 56: }
 18616                           ;softi2c.inc: 57: i2cHighSda();
 18617  0046D4  EC48  F026         	call	_i2cHighSda	;wreg free
 18618                           
 18619                           ;softi2c.inc: 58: i2cHighScl();
 18620  0046D8  EC1E  F026         	call	_i2cHighScl	;wreg free
 18621                           
 18622                           ;softi2c.inc: 59: i2cLowScl();
 18623  0046DC  EC44  F026         	call	_i2cLowScl	;wreg free
 18624  0046E0  0012               	return		;funcret
 18625  0046E2                     __end_of_I2C_Write:
 18626                           	opt stack 0
 18627                           tblptru	equ	0xFF8
 18628                           tblptrh	equ	0xFF7
 18629                           tblptrl	equ	0xFF6
 18630                           tablat	equ	0xFF5
 18631                           prodh	equ	0xFF4
 18632                           prodl	equ	0xFF3
 18633                           intcon	equ	0xFF2
 18634                           intcon2	equ	0xFF1
 18635                           intcon3	equ	0xFF0
 18636                           postinc0	equ	0xFEE
 18637                           wreg	equ	0xFE8
 18638                           postdec1	equ	0xFE5
 18639                           fsr1l	equ	0xFE1
 18640                           indf2	equ	0xFDF
 18641                           postinc2	equ	0xFDE
 18642                           postdec2	equ	0xFDD
 18643                           fsr2h	equ	0xFDA
 18644                           fsr2l	equ	0xFD9
 18645                           status	equ	0xFD8
 18646                           
 18647 ;; *************** function _I2C_Stop *****************
 18648 ;; Defined at:
 18649 ;;		line 93 in file "softi2c.inc"
 18650 ;; Parameters:    Size  Location     Type
 18651 ;;		None
 18652 ;; Auto vars:     Size  Location     Type
 18653 ;;		None
 18654 ;; Return value:  Size  Location     Type
 18655 ;;		None               void
 18656 ;; Registers used:
 18657 ;;		wreg, cstack
 18658 ;; Tracked objects:
 18659 ;;		On entry : 0/0
 18660 ;;		On exit  : 0/0
 18661 ;;		Unchanged: 0/0
 18662 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18663 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18664 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18665 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18666 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18667 ;;Total ram usage:        0 bytes
 18668 ;; Hardware stack levels used:    1
 18669 ;; Hardware stack levels required when called:    6
 18670 ;; This function calls:
 18671 ;;		_i2cHighScl
 18672 ;;		_i2cHighSda
 18673 ;;		_i2cLowScl
 18674 ;;		_i2cLowSda
 18675 ;; This function is called by:
 18676 ;;		_I2C_Write_Address_Read_One_Byte
 18677 ;;		_I2C_Write_Address_Write_One_Byte
 18678 ;;		_DS3231_Turn_On_Alarm
 18679 ;;		_DS3231_Turn_Off_Alarm
 18680 ;;		_DS3231_Read_Time
 18681 ;;		_DS3231_Read_Alarm_1_Time
 18682 ;;		_DS3231_Read_Temp
 18683 ;;		_I2C_Write_Cmd_Only
 18684 ;;		_I2C_Write_Cmd_Write_Data
 18685 ;;		_I2C_Write_Cmd_Read_One_Byte
 18686 ;; This function uses a non-reentrant model
 18687 ;;
 18688                           
 18689                           	psect	text81
 18690  004BA8                     __ptext81:
 18691                           	opt stack 0
 18692  004BA8                     _I2C_Stop:
 18693                           	opt stack 22
 18694                           
 18695                           ;softi2c.inc: 95: i2cLowScl();
 18696                           
 18697                           ;incstack = 0
 18698  004BA8  EC44  F026         	call	_i2cLowScl	;wreg free
 18699                           
 18700                           ;softi2c.inc: 96: i2cLowSda();
 18701  004BAC  EC3A  F026         	call	_i2cLowSda	;wreg free
 18702                           
 18703                           ;softi2c.inc: 97: i2cHighScl();
 18704  004BB0  EC1E  F026         	call	_i2cHighScl	;wreg free
 18705                           
 18706                           ;softi2c.inc: 98: i2cHighSda();
 18707  004BB4  EC48  F026         	call	_i2cHighSda	;wreg free
 18708  004BB8  0012               	return		;funcret
 18709  004BBA                     __end_of_I2C_Stop:
 18710                           	opt stack 0
 18711                           tblptru	equ	0xFF8
 18712                           tblptrh	equ	0xFF7
 18713                           tblptrl	equ	0xFF6
 18714                           tablat	equ	0xFF5
 18715                           prodh	equ	0xFF4
 18716                           prodl	equ	0xFF3
 18717                           intcon	equ	0xFF2
 18718                           intcon2	equ	0xFF1
 18719                           intcon3	equ	0xFF0
 18720                           postinc0	equ	0xFEE
 18721                           wreg	equ	0xFE8
 18722                           postdec1	equ	0xFE5
 18723                           fsr1l	equ	0xFE1
 18724                           indf2	equ	0xFDF
 18725                           postinc2	equ	0xFDE
 18726                           postdec2	equ	0xFDD
 18727                           fsr2h	equ	0xFDA
 18728                           fsr2l	equ	0xFD9
 18729                           status	equ	0xFD8
 18730                           
 18731 ;; *************** function _I2C_Start *****************
 18732 ;; Defined at:
 18733 ;;		line 76 in file "softi2c.inc"
 18734 ;; Parameters:    Size  Location     Type
 18735 ;;		None
 18736 ;; Auto vars:     Size  Location     Type
 18737 ;;		None
 18738 ;; Return value:  Size  Location     Type
 18739 ;;		None               void
 18740 ;; Registers used:
 18741 ;;		wreg, cstack
 18742 ;; Tracked objects:
 18743 ;;		On entry : 0/0
 18744 ;;		On exit  : 0/0
 18745 ;;		Unchanged: 0/0
 18746 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18747 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18748 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18749 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18750 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18751 ;;Total ram usage:        0 bytes
 18752 ;; Hardware stack levels used:    1
 18753 ;; Hardware stack levels required when called:    6
 18754 ;; This function calls:
 18755 ;;		_i2cHighScl
 18756 ;;		_i2cHighSda
 18757 ;;		_i2cLowScl
 18758 ;;		_i2cLowSda
 18759 ;; This function is called by:
 18760 ;;		_I2C_Write_Address_Read_One_Byte
 18761 ;;		_I2C_Write_Address_Write_One_Byte
 18762 ;;		_DS3231_Turn_On_Alarm
 18763 ;;		_DS3231_Turn_Off_Alarm
 18764 ;;		_DS3231_Read_Time
 18765 ;;		_DS3231_Read_Alarm_1_Time
 18766 ;;		_DS3231_Read_Temp
 18767 ;;		_DS3231_Write_Time
 18768 ;;		_DS3231_Write_Alarm_1_Time
 18769 ;;		_I2C_Write_Cmd_Only
 18770 ;;		_I2C_Write_Cmd_Write_Data
 18771 ;;		_I2C_Write_Cmd_Read_One_Byte
 18772 ;; This function uses a non-reentrant model
 18773 ;;
 18774                           
 18775                           	psect	text82
 18776  004BBA                     __ptext82:
 18777                           	opt stack 0
 18778  004BBA                     _I2C_Start:
 18779                           	opt stack 22
 18780                           
 18781                           ;softi2c.inc: 78: i2cHighSda();
 18782                           
 18783                           ;incstack = 0
 18784  004BBA  EC48  F026         	call	_i2cHighSda	;wreg free
 18785                           
 18786                           ;softi2c.inc: 79: i2cHighScl();
 18787  004BBE  EC1E  F026         	call	_i2cHighScl	;wreg free
 18788                           
 18789                           ;softi2c.inc: 80: i2cLowSda();
 18790  004BC2  EC3A  F026         	call	_i2cLowSda	;wreg free
 18791                           
 18792                           ;softi2c.inc: 81: i2cLowScl();
 18793  004BC6  EC44  F026         	call	_i2cLowScl	;wreg free
 18794  004BCA  0012               	return		;funcret
 18795  004BCC                     __end_of_I2C_Start:
 18796                           	opt stack 0
 18797                           tblptru	equ	0xFF8
 18798                           tblptrh	equ	0xFF7
 18799                           tblptrl	equ	0xFF6
 18800                           tablat	equ	0xFF5
 18801                           prodh	equ	0xFF4
 18802                           prodl	equ	0xFF3
 18803                           intcon	equ	0xFF2
 18804                           intcon2	equ	0xFF1
 18805                           intcon3	equ	0xFF0
 18806                           postinc0	equ	0xFEE
 18807                           wreg	equ	0xFE8
 18808                           postdec1	equ	0xFE5
 18809                           fsr1l	equ	0xFE1
 18810                           indf2	equ	0xFDF
 18811                           postinc2	equ	0xFDE
 18812                           postdec2	equ	0xFDD
 18813                           fsr2h	equ	0xFDA
 18814                           fsr2l	equ	0xFD9
 18815                           status	equ	0xFD8
 18816                           
 18817 ;; *************** function _I2C_Read *****************
 18818 ;; Defined at:
 18819 ;;		line 25 in file "softi2c.inc"
 18820 ;; Parameters:    Size  Location     Type
 18821 ;;  ack             1    wreg     unsigned char 
 18822 ;; Auto vars:     Size  Location     Type
 18823 ;;  ack             1   27[COMRAM] unsigned char 
 18824 ;;  inByte          1   29[COMRAM] unsigned char 
 18825 ;;  n               1   28[COMRAM] unsigned char 
 18826 ;; Return value:  Size  Location     Type
 18827 ;;                  1    wreg      unsigned char 
 18828 ;; Registers used:
 18829 ;;		wreg, status,2, status,0, cstack
 18830 ;; Tracked objects:
 18831 ;;		On entry : 0/0
 18832 ;;		On exit  : 0/0
 18833 ;;		Unchanged: 0/0
 18834 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18835 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18836 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18837 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18838 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18839 ;;Total ram usage:        3 bytes
 18840 ;; Hardware stack levels used:    1
 18841 ;; Hardware stack levels required when called:    7
 18842 ;; This function calls:
 18843 ;;		_i2cAck
 18844 ;;		_i2cHighScl
 18845 ;;		_i2cHighSda
 18846 ;;		_i2cLowScl
 18847 ;;		_i2cNack
 18848 ;; This function is called by:
 18849 ;;		_I2C_Write_Address_Read_One_Byte
 18850 ;;		_DS3231_Read_Time
 18851 ;;		_DS3231_Read_Alarm_1_Time
 18852 ;;		_DS3231_Read_Temp
 18853 ;;		_I2C_Write_Cmd_Read_One_Byte
 18854 ;; This function uses a non-reentrant model
 18855 ;;
 18856                           
 18857                           	psect	text83
 18858  0045E0                     __ptext83:
 18859                           	opt stack 0
 18860  0045E0                     _I2C_Read:
 18861                           	opt stack 21
 18862                           
 18863                           ;incstack = 0
 18864                           ;I2C_Read@ack stored from wreg
 18865  0045E0  6E1C               	movwf	I2C_Read@ack,c
 18866                           
 18867                           ;softi2c.inc: 27: unsigned char inByte, n;
 18868                           ;softi2c.inc: 28: i2cHighSda();
 18869  0045E2  EC48  F026         	call	_i2cHighSda	;wreg free
 18870                           
 18871                           ;softi2c.inc: 29: for (n=0; n<8; n++)
 18872  0045E6  0E00               	movlw	0
 18873  0045E8  6E1D               	movwf	I2C_Read@n,c
 18874  0045EA                     l8050:
 18875  0045EA  0E07               	movlw	7
 18876  0045EC  641D               	cpfsgt	I2C_Read@n,c
 18877  0045EE  D001               	goto	l8054
 18878  0045F0  D00F               	goto	l8068
 18879  0045F2                     l8054:
 18880                           
 18881                           ;softi2c.inc: 30: {
 18882                           ;softi2c.inc: 31: i2cHighScl();
 18883  0045F2  EC1E  F026         	call	_i2cHighScl	;wreg free
 18884                           
 18885                           ;softi2c.inc: 33: if (PORTBbits.RB4)
 18886  0045F6  A881               	btfss	3969,4,c	;volatile
 18887  0045F8  D003               	goto	l8060
 18888                           
 18889                           ;softi2c.inc: 34: inByte = (inByte << 1) | 0x01;
 18890  0045FA  80D8               	bsf	status,0,c
 18891  0045FC  361E               	rlcf	I2C_Read@inByte,f,c
 18892  0045FE  D004               	goto	l8062
 18893  004600                     l8060:
 18894                           
 18895                           ;softi2c.inc: 35: else
 18896                           ;softi2c.inc: 36: inByte = inByte << 1;
 18897  004600  501E               	movf	I2C_Read@inByte,w,c
 18898  004602  241E               	addwf	I2C_Read@inByte,w,c
 18899  004604  6E1E               	movwf	I2C_Read@inByte,c
 18900  004606  D000               	goto	l8062
 18901  004608                     l8062:
 18902                           
 18903                           ;softi2c.inc: 37: i2cLowScl();
 18904  004608  EC44  F026         	call	_i2cLowScl	;wreg free
 18905  00460C  2A1D               	incf	I2C_Read@n,f,c
 18906  00460E  D7ED               	goto	l8050
 18907  004610                     l8068:
 18908                           
 18909                           ;softi2c.inc: 38: }
 18910                           ;softi2c.inc: 39: if (ack) i2cAck();
 18911  004610  501C               	movf	I2C_Read@ack,w,c
 18912  004612  B4D8               	btfsc	status,2,c
 18913  004614  D003               	goto	l8072
 18914  004616  ECE6  F025         	call	_i2cAck	;wreg free
 18915  00461A  D003               	goto	l8074
 18916  00461C                     l8072:
 18917                           
 18918                           ;softi2c.inc: 40: else i2cNack();
 18919  00461C  EC35  F026         	call	_i2cNack	;wreg free
 18920  004620  D000               	goto	l8074
 18921  004622                     l8074:
 18922                           
 18923                           ;softi2c.inc: 43: return(inByte);
 18924  004622  501E               	movf	I2C_Read@inByte,w,c
 18925  004624  D000               	goto	l507
 18926  004626                     l507:
 18927  004626  0012               	return		;funcret
 18928  004628                     __end_of_I2C_Read:
 18929                           	opt stack 0
 18930                           tblptru	equ	0xFF8
 18931                           tblptrh	equ	0xFF7
 18932                           tblptrl	equ	0xFF6
 18933                           tablat	equ	0xFF5
 18934                           prodh	equ	0xFF4
 18935                           prodl	equ	0xFF3
 18936                           intcon	equ	0xFF2
 18937                           intcon2	equ	0xFF1
 18938                           intcon3	equ	0xFF0
 18939                           postinc0	equ	0xFEE
 18940                           wreg	equ	0xFE8
 18941                           postdec1	equ	0xFE5
 18942                           fsr1l	equ	0xFE1
 18943                           indf2	equ	0xFDF
 18944                           postinc2	equ	0xFDE
 18945                           postdec2	equ	0xFDD
 18946                           fsr2h	equ	0xFDA
 18947                           fsr2l	equ	0xFD9
 18948                           status	equ	0xFD8
 18949                           
 18950 ;; *************** function _i2cNack *****************
 18951 ;; Defined at:
 18952 ;;		line 62 in file "softi2c.inc"
 18953 ;; Parameters:    Size  Location     Type
 18954 ;;		None
 18955 ;; Auto vars:     Size  Location     Type
 18956 ;;		None
 18957 ;; Return value:  Size  Location     Type
 18958 ;;		None               void
 18959 ;; Registers used:
 18960 ;;		wreg, cstack
 18961 ;; Tracked objects:
 18962 ;;		On entry : 0/0
 18963 ;;		On exit  : 0/0
 18964 ;;		Unchanged: 0/0
 18965 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18966 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18967 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18968 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18969 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18970 ;;Total ram usage:        0 bytes
 18971 ;; Hardware stack levels used:    1
 18972 ;; Hardware stack levels required when called:    6
 18973 ;; This function calls:
 18974 ;;		_i2cHighScl
 18975 ;;		_i2cLowScl
 18976 ;; This function is called by:
 18977 ;;		_I2C_Read
 18978 ;; This function uses a non-reentrant model
 18979 ;;
 18980                           
 18981                           	psect	text84
 18982  004C6A                     __ptext84:
 18983                           	opt stack 0
 18984  004C6A                     _i2cNack:
 18985                           	opt stack 21
 18986                           
 18987                           ;softi2c.inc: 64: i2cHighScl();
 18988                           
 18989                           ;incstack = 0
 18990  004C6A  EC1E  F026         	call	_i2cHighScl	;wreg free
 18991                           
 18992                           ;softi2c.inc: 65: i2cLowScl();
 18993  004C6E  EC44  F026         	call	_i2cLowScl	;wreg free
 18994  004C72  0012               	return		;funcret
 18995  004C74                     __end_of_i2cNack:
 18996                           	opt stack 0
 18997                           tblptru	equ	0xFF8
 18998                           tblptrh	equ	0xFF7
 18999                           tblptrl	equ	0xFF6
 19000                           tablat	equ	0xFF5
 19001                           prodh	equ	0xFF4
 19002                           prodl	equ	0xFF3
 19003                           intcon	equ	0xFF2
 19004                           intcon2	equ	0xFF1
 19005                           intcon3	equ	0xFF0
 19006                           postinc0	equ	0xFEE
 19007                           wreg	equ	0xFE8
 19008                           postdec1	equ	0xFE5
 19009                           fsr1l	equ	0xFE1
 19010                           indf2	equ	0xFDF
 19011                           postinc2	equ	0xFDE
 19012                           postdec2	equ	0xFDD
 19013                           fsr2h	equ	0xFDA
 19014                           fsr2l	equ	0xFD9
 19015                           status	equ	0xFD8
 19016                           
 19017 ;; *************** function _i2cAck *****************
 19018 ;; Defined at:
 19019 ;;		line 68 in file "softi2c.inc"
 19020 ;; Parameters:    Size  Location     Type
 19021 ;;		None
 19022 ;; Auto vars:     Size  Location     Type
 19023 ;;		None
 19024 ;; Return value:  Size  Location     Type
 19025 ;;		None               void
 19026 ;; Registers used:
 19027 ;;		wreg, cstack
 19028 ;; Tracked objects:
 19029 ;;		On entry : 0/0
 19030 ;;		On exit  : 0/0
 19031 ;;		Unchanged: 0/0
 19032 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19033 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19034 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19035 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19036 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19037 ;;Total ram usage:        0 bytes
 19038 ;; Hardware stack levels used:    1
 19039 ;; Hardware stack levels required when called:    6
 19040 ;; This function calls:
 19041 ;;		_i2cHighScl
 19042 ;;		_i2cHighSda
 19043 ;;		_i2cLowScl
 19044 ;;		_i2cLowSda
 19045 ;; This function is called by:
 19046 ;;		_I2C_Read
 19047 ;; This function uses a non-reentrant model
 19048 ;;
 19049                           
 19050                           	psect	text85
 19051  004BCC                     __ptext85:
 19052                           	opt stack 0
 19053  004BCC                     _i2cAck:
 19054                           	opt stack 21
 19055                           
 19056                           ;softi2c.inc: 70: i2cLowSda();
 19057                           
 19058                           ;incstack = 0
 19059  004BCC  EC3A  F026         	call	_i2cLowSda	;wreg free
 19060                           
 19061                           ;softi2c.inc: 71: i2cHighScl();
 19062  004BD0  EC1E  F026         	call	_i2cHighScl	;wreg free
 19063                           
 19064                           ;softi2c.inc: 72: i2cLowScl();
 19065  004BD4  EC44  F026         	call	_i2cLowScl	;wreg free
 19066                           
 19067                           ;softi2c.inc: 73: i2cHighSda();
 19068  004BD8  EC48  F026         	call	_i2cHighSda	;wreg free
 19069  004BDC  0012               	return		;funcret
 19070  004BDE                     __end_of_i2cAck:
 19071                           	opt stack 0
 19072                           tblptru	equ	0xFF8
 19073                           tblptrh	equ	0xFF7
 19074                           tblptrl	equ	0xFF6
 19075                           tablat	equ	0xFF5
 19076                           prodh	equ	0xFF4
 19077                           prodl	equ	0xFF3
 19078                           intcon	equ	0xFF2
 19079                           intcon2	equ	0xFF1
 19080                           intcon3	equ	0xFF0
 19081                           postinc0	equ	0xFEE
 19082                           wreg	equ	0xFE8
 19083                           postdec1	equ	0xFE5
 19084                           fsr1l	equ	0xFE1
 19085                           indf2	equ	0xFDF
 19086                           postinc2	equ	0xFDE
 19087                           postdec2	equ	0xFDD
 19088                           fsr2h	equ	0xFDA
 19089                           fsr2l	equ	0xFD9
 19090                           status	equ	0xFD8
 19091                           
 19092 ;; *************** function _I2C_ReStart *****************
 19093 ;; Defined at:
 19094 ;;		line 84 in file "softi2c.inc"
 19095 ;; Parameters:    Size  Location     Type
 19096 ;;		None
 19097 ;; Auto vars:     Size  Location     Type
 19098 ;;		None
 19099 ;; Return value:  Size  Location     Type
 19100 ;;		None               void
 19101 ;; Registers used:
 19102 ;;		wreg, cstack
 19103 ;; Tracked objects:
 19104 ;;		On entry : 0/0
 19105 ;;		On exit  : 0/0
 19106 ;;		Unchanged: 0/0
 19107 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19108 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19109 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19110 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19111 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19112 ;;Total ram usage:        0 bytes
 19113 ;; Hardware stack levels used:    1
 19114 ;; Hardware stack levels required when called:    6
 19115 ;; This function calls:
 19116 ;;		_i2cHighScl
 19117 ;;		_i2cHighSda
 19118 ;;		_i2cLowScl
 19119 ;;		_i2cLowSda
 19120 ;; This function is called by:
 19121 ;;		_I2C_Write_Address_Read_One_Byte
 19122 ;;		_DS3231_Read_Time
 19123 ;;		_DS3231_Read_Alarm_1_Time
 19124 ;;		_DS3231_Read_Temp
 19125 ;;		_I2C_Write_Cmd_Read_One_Byte
 19126 ;; This function uses a non-reentrant model
 19127 ;;
 19128                           
 19129                           	psect	text86
 19130  004B46                     __ptext86:
 19131                           	opt stack 0
 19132  004B46                     _I2C_ReStart:
 19133                           	opt stack 22
 19134                           
 19135                           ;softi2c.inc: 86: i2cLowScl();
 19136                           
 19137                           ;incstack = 0
 19138  004B46  EC44  F026         	call	_i2cLowScl	;wreg free
 19139                           
 19140                           ;softi2c.inc: 87: i2cHighSda();
 19141  004B4A  EC48  F026         	call	_i2cHighSda	;wreg free
 19142                           
 19143                           ;softi2c.inc: 88: i2cHighScl();
 19144  004B4E  EC1E  F026         	call	_i2cHighScl	;wreg free
 19145                           
 19146                           ;softi2c.inc: 89: i2cLowSda();
 19147  004B52  EC3A  F026         	call	_i2cLowSda	;wreg free
 19148                           
 19149                           ;softi2c.inc: 90: i2cLowScl();
 19150  004B56  EC44  F026         	call	_i2cLowScl	;wreg free
 19151  004B5A  0012               	return		;funcret
 19152  004B5C                     __end_of_I2C_ReStart:
 19153                           	opt stack 0
 19154                           tblptru	equ	0xFF8
 19155                           tblptrh	equ	0xFF7
 19156                           tblptrl	equ	0xFF6
 19157                           tablat	equ	0xFF5
 19158                           prodh	equ	0xFF4
 19159                           prodl	equ	0xFF3
 19160                           intcon	equ	0xFF2
 19161                           intcon2	equ	0xFF1
 19162                           intcon3	equ	0xFF0
 19163                           postinc0	equ	0xFEE
 19164                           wreg	equ	0xFE8
 19165                           postdec1	equ	0xFE5
 19166                           fsr1l	equ	0xFE1
 19167                           indf2	equ	0xFDF
 19168                           postinc2	equ	0xFDE
 19169                           postdec2	equ	0xFDD
 19170                           fsr2h	equ	0xFDA
 19171                           fsr2l	equ	0xFD9
 19172                           status	equ	0xFD8
 19173                           
 19174 ;; *************** function _i2cLowSda *****************
 19175 ;; Defined at:
 19176 ;;		line 107 in file "softi2c.inc"
 19177 ;; Parameters:    Size  Location     Type
 19178 ;;		None
 19179 ;; Auto vars:     Size  Location     Type
 19180 ;;		None
 19181 ;; Return value:  Size  Location     Type
 19182 ;;		None               void
 19183 ;; Registers used:
 19184 ;;		None
 19185 ;; Tracked objects:
 19186 ;;		On entry : 0/0
 19187 ;;		On exit  : 0/0
 19188 ;;		Unchanged: 0/0
 19189 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19190 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19191 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19192 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19193 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19194 ;;Total ram usage:        0 bytes
 19195 ;; Hardware stack levels used:    1
 19196 ;; Hardware stack levels required when called:    5
 19197 ;; This function calls:
 19198 ;;		Nothing
 19199 ;; This function is called by:
 19200 ;;		_I2C_Write
 19201 ;;		_i2cAck
 19202 ;;		_I2C_Start
 19203 ;;		_I2C_ReStart
 19204 ;;		_I2C_Stop
 19205 ;; This function uses a non-reentrant model
 19206 ;;
 19207                           
 19208                           	psect	text87
 19209  004C74                     __ptext87:
 19210                           	opt stack 0
 19211  004C74                     _i2cLowSda:
 19212                           	opt stack 22
 19213                           
 19214                           ;softi2c.inc: 109: PORTBbits.RB4 = 0;
 19215                           
 19216                           ;incstack = 0
 19217  004C74  9881               	bcf	3969,4,c	;volatile
 19218                           
 19219                           ;softi2c.inc: 110: TRISBbits.RB4 = 0;
 19220  004C76  9893               	bcf	3987,4,c	;volatile
 19221                           
 19222                           ;softi2c.inc: 111: _delay((unsigned long)((2)*(8000000/4000000.0)));
 19223  004C78  D000               	nop2		;2 cycle nop
 19224  004C7A  D000               	nop2		;2 cycle nop
 19225  004C7C  0012               	return		;funcret
 19226  004C7E                     __end_of_i2cLowSda:
 19227                           	opt stack 0
 19228                           tblptru	equ	0xFF8
 19229                           tblptrh	equ	0xFF7
 19230                           tblptrl	equ	0xFF6
 19231                           tablat	equ	0xFF5
 19232                           prodh	equ	0xFF4
 19233                           prodl	equ	0xFF3
 19234                           intcon	equ	0xFF2
 19235                           intcon2	equ	0xFF1
 19236                           intcon3	equ	0xFF0
 19237                           postinc0	equ	0xFEE
 19238                           wreg	equ	0xFE8
 19239                           postdec1	equ	0xFE5
 19240                           fsr1l	equ	0xFE1
 19241                           indf2	equ	0xFDF
 19242                           postinc2	equ	0xFDE
 19243                           postdec2	equ	0xFDD
 19244                           fsr2h	equ	0xFDA
 19245                           fsr2l	equ	0xFD9
 19246                           status	equ	0xFD8
 19247                           
 19248 ;; *************** function _i2cLowScl *****************
 19249 ;; Defined at:
 19250 ;;		line 120 in file "softi2c.inc"
 19251 ;; Parameters:    Size  Location     Type
 19252 ;;		None
 19253 ;; Auto vars:     Size  Location     Type
 19254 ;;		None
 19255 ;; Return value:  Size  Location     Type
 19256 ;;		None               void
 19257 ;; Registers used:
 19258 ;;		None
 19259 ;; Tracked objects:
 19260 ;;		On entry : 0/0
 19261 ;;		On exit  : 0/0
 19262 ;;		Unchanged: 0/0
 19263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19264 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19265 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19266 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19267 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19268 ;;Total ram usage:        0 bytes
 19269 ;; Hardware stack levels used:    1
 19270 ;; Hardware stack levels required when called:    5
 19271 ;; This function calls:
 19272 ;;		Nothing
 19273 ;; This function is called by:
 19274 ;;		_I2C_Read
 19275 ;;		_I2C_Write
 19276 ;;		_i2cNack
 19277 ;;		_i2cAck
 19278 ;;		_I2C_Start
 19279 ;;		_I2C_ReStart
 19280 ;;		_I2C_Stop
 19281 ;; This function uses a non-reentrant model
 19282 ;;
 19283                           
 19284                           	psect	text88
 19285  004C88                     __ptext88:
 19286                           	opt stack 0
 19287  004C88                     _i2cLowScl:
 19288                           	opt stack 22
 19289                           
 19290                           ;softi2c.inc: 122: PORTBbits.RB5 = 0;
 19291                           
 19292                           ;incstack = 0
 19293  004C88  9A81               	bcf	3969,5,c	;volatile
 19294                           
 19295                           ;softi2c.inc: 123: TRISBbits.RB5 = 0;
 19296  004C8A  9A93               	bcf	3987,5,c	;volatile
 19297                           
 19298                           ;softi2c.inc: 124: _delay((unsigned long)((1)*(8000000/4000000.0)));
 19299  004C8C  D000               	nop2		;2 cycle nop
 19300  004C8E  0012               	return		;funcret
 19301  004C90                     __end_of_i2cLowScl:
 19302                           	opt stack 0
 19303                           tblptru	equ	0xFF8
 19304                           tblptrh	equ	0xFF7
 19305                           tblptrl	equ	0xFF6
 19306                           tablat	equ	0xFF5
 19307                           prodh	equ	0xFF4
 19308                           prodl	equ	0xFF3
 19309                           intcon	equ	0xFF2
 19310                           intcon2	equ	0xFF1
 19311                           intcon3	equ	0xFF0
 19312                           postinc0	equ	0xFEE
 19313                           wreg	equ	0xFE8
 19314                           postdec1	equ	0xFE5
 19315                           fsr1l	equ	0xFE1
 19316                           indf2	equ	0xFDF
 19317                           postinc2	equ	0xFDE
 19318                           postdec2	equ	0xFDD
 19319                           fsr2h	equ	0xFDA
 19320                           fsr2l	equ	0xFD9
 19321                           status	equ	0xFD8
 19322                           
 19323 ;; *************** function _i2cHighSda *****************
 19324 ;; Defined at:
 19325 ;;		line 101 in file "softi2c.inc"
 19326 ;; Parameters:    Size  Location     Type
 19327 ;;		None
 19328 ;; Auto vars:     Size  Location     Type
 19329 ;;		None
 19330 ;; Return value:  Size  Location     Type
 19331 ;;		None               void
 19332 ;; Registers used:
 19333 ;;		None
 19334 ;; Tracked objects:
 19335 ;;		On entry : 0/0
 19336 ;;		On exit  : 0/0
 19337 ;;		Unchanged: 0/0
 19338 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19339 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19340 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19341 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19342 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19343 ;;Total ram usage:        0 bytes
 19344 ;; Hardware stack levels used:    1
 19345 ;; Hardware stack levels required when called:    5
 19346 ;; This function calls:
 19347 ;;		Nothing
 19348 ;; This function is called by:
 19349 ;;		_I2C_Init
 19350 ;;		_I2C_Read
 19351 ;;		_I2C_Write
 19352 ;;		_i2cAck
 19353 ;;		_I2C_Start
 19354 ;;		_I2C_ReStart
 19355 ;;		_I2C_Stop
 19356 ;; This function uses a non-reentrant model
 19357 ;;
 19358                           
 19359                           	psect	text89
 19360  004C90                     __ptext89:
 19361                           	opt stack 0
 19362  004C90                     _i2cHighSda:
 19363                           	opt stack 24
 19364                           
 19365                           ;softi2c.inc: 103: TRISBbits.RB4 = 1;
 19366                           
 19367                           ;incstack = 0
 19368  004C90  8893               	bsf	3987,4,c	;volatile
 19369                           
 19370                           ;softi2c.inc: 104: _delay((unsigned long)((2)*(8000000/4000000.0)));
 19371  004C92  D000               	nop2		;2 cycle nop
 19372  004C94  D000               	nop2		;2 cycle nop
 19373  004C96  0012               	return		;funcret
 19374  004C98                     __end_of_i2cHighSda:
 19375                           	opt stack 0
 19376                           tblptru	equ	0xFF8
 19377                           tblptrh	equ	0xFF7
 19378                           tblptrl	equ	0xFF6
 19379                           tablat	equ	0xFF5
 19380                           prodh	equ	0xFF4
 19381                           prodl	equ	0xFF3
 19382                           intcon	equ	0xFF2
 19383                           intcon2	equ	0xFF1
 19384                           intcon3	equ	0xFF0
 19385                           postinc0	equ	0xFEE
 19386                           wreg	equ	0xFE8
 19387                           postdec1	equ	0xFE5
 19388                           fsr1l	equ	0xFE1
 19389                           indf2	equ	0xFDF
 19390                           postinc2	equ	0xFDE
 19391                           postdec2	equ	0xFDD
 19392                           fsr2h	equ	0xFDA
 19393                           fsr2l	equ	0xFD9
 19394                           status	equ	0xFD8
 19395                           
 19396 ;; *************** function _i2cHighScl *****************
 19397 ;; Defined at:
 19398 ;;		line 114 in file "softi2c.inc"
 19399 ;; Parameters:    Size  Location     Type
 19400 ;;		None
 19401 ;; Auto vars:     Size  Location     Type
 19402 ;;		None
 19403 ;; Return value:  Size  Location     Type
 19404 ;;		None               void
 19405 ;; Registers used:
 19406 ;;		wreg
 19407 ;; Tracked objects:
 19408 ;;		On entry : 0/0
 19409 ;;		On exit  : 0/0
 19410 ;;		Unchanged: 0/0
 19411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19412 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19413 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19414 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19415 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19416 ;;Total ram usage:        0 bytes
 19417 ;; Hardware stack levels used:    1
 19418 ;; Hardware stack levels required when called:    5
 19419 ;; This function calls:
 19420 ;;		Nothing
 19421 ;; This function is called by:
 19422 ;;		_I2C_Init
 19423 ;;		_I2C_Read
 19424 ;;		_I2C_Write
 19425 ;;		_i2cNack
 19426 ;;		_i2cAck
 19427 ;;		_I2C_Start
 19428 ;;		_I2C_ReStart
 19429 ;;		_I2C_Stop
 19430 ;; This function uses a non-reentrant model
 19431 ;;
 19432                           
 19433                           	psect	text90
 19434  004C3C                     __ptext90:
 19435                           	opt stack 0
 19436  004C3C                     _i2cHighScl:
 19437                           	opt stack 24
 19438                           
 19439                           ;softi2c.inc: 116: TRISBbits.RB5 = 1;
 19440                           
 19441                           ;incstack = 0
 19442  004C3C  8A93               	bsf	3987,5,c	;volatile
 19443                           
 19444                           ;softi2c.inc: 117: _delay((unsigned long)((10)*(8000000/4000000.0)));
 19445  004C3E  0E06               	movlw	6
 19446  004C40                     u9647:
 19447  004C40  2EE8               	decfsz	wreg,f,c
 19448  004C42  D7FE               	goto	u9647
 19449  004C44  D000               	nop2		;nop
 19450  004C46  0012               	return		;funcret
 19451  004C48                     __end_of_i2cHighScl:
 19452                           	opt stack 0
 19453                           tblptru	equ	0xFF8
 19454                           tblptrh	equ	0xFF7
 19455                           tblptrl	equ	0xFF6
 19456                           tablat	equ	0xFF5
 19457                           prodh	equ	0xFF4
 19458                           prodl	equ	0xFF3
 19459                           intcon	equ	0xFF2
 19460                           intcon2	equ	0xFF1
 19461                           intcon3	equ	0xFF0
 19462                           postinc0	equ	0xFEE
 19463                           wreg	equ	0xFE8
 19464                           postdec1	equ	0xFE5
 19465                           fsr1l	equ	0xFE1
 19466                           indf2	equ	0xFDF
 19467                           postinc2	equ	0xFDE
 19468                           postdec2	equ	0xFDD
 19469                           fsr2h	equ	0xFDA
 19470                           fsr2l	equ	0xFD9
 19471                           status	equ	0xFD8
 19472                           
 19473 ;; *************** function _chkisr *****************
 19474 ;; Defined at:
 19475 ;;		line 1500 in file "lab_final_alt.c"
 19476 ;; Parameters:    Size  Location     Type
 19477 ;;		None
 19478 ;; Auto vars:     Size  Location     Type
 19479 ;;		None
 19480 ;; Return value:  Size  Location     Type
 19481 ;;		None               void
 19482 ;; Registers used:
 19483 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 19484 ;; Tracked objects:
 19485 ;;		On entry : 0/0
 19486 ;;		On exit  : 0/0
 19487 ;;		Unchanged: 0/0
 19488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19489 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19490 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19491 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19492 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19493 ;;Total ram usage:       14 bytes
 19494 ;; Hardware stack levels used:    1
 19495 ;; Hardware stack levels required when called:    4
 19496 ;; This function calls:
 19497 ;;		_INT0_isr
 19498 ;;		_INT1_isr
 19499 ;;		_INT2_isr
 19500 ;;		_TIMER1_isr
 19501 ;; This function is called by:
 19502 ;;		Interrupt level 2
 19503 ;; This function uses a non-reentrant model
 19504 ;;
 19505                           
 19506                           	psect	intcode
 19507  000008                     __pintcode:
 19508                           	opt stack 0
 19509  000008                     _chkisr:
 19510                           	opt stack 17
 19511                           
 19512                           ;incstack = 0
 19513  000008  CFFA F00E          	movff	pclath,??_chkisr
 19514  00000C  CFFB F00F          	movff	pclatu,??_chkisr+1
 19515  000010  CFE9 F010          	movff	fsr0l,??_chkisr+2
 19516  000014  ED28  F01E         	call	int_func,f	;refresh shadow registers
 19517                           pclatu	equ	0xFFB
 19518                           pclath	equ	0xFFA
 19519                           tblptru	equ	0xFF8
 19520                           tblptrh	equ	0xFF7
 19521                           tblptrl	equ	0xFF6
 19522                           tablat	equ	0xFF5
 19523                           prodh	equ	0xFF4
 19524                           prodl	equ	0xFF3
 19525                           intcon	equ	0xFF2
 19526                           intcon2	equ	0xFF1
 19527                           intcon3	equ	0xFF0
 19528                           postinc0	equ	0xFEE
 19529                           fsr0l	equ	0xFE9
 19530                           wreg	equ	0xFE8
 19531                           postdec1	equ	0xFE5
 19532                           fsr1l	equ	0xFE1
 19533                           indf2	equ	0xFDF
 19534                           postinc2	equ	0xFDE
 19535                           postdec2	equ	0xFDD
 19536                           fsr2h	equ	0xFDA
 19537                           fsr2l	equ	0xFD9
 19538                           status	equ	0xFD8
 19539                           
 19540                           	psect	intcode_body
 19541  003C50                     __pintcode_body:
 19542                           	opt stack 17
 19543  003C50                     int_func:
 19544                           	opt stack 17
 19545  003C50  0006               	pop		; remove dummy address from shadow register refresh
 19546  003C52  CFEA F011          	movff	fsr0h,??_chkisr+3
 19547  003C56  CFE1 F012          	movff	fsr1l,??_chkisr+4
 19548  003C5A  CFE2 F013          	movff	fsr1h,??_chkisr+5
 19549  003C5E  CFD9 F014          	movff	fsr2l,??_chkisr+6
 19550  003C62  CFDA F015          	movff	fsr2h,??_chkisr+7
 19551  003C66  CFF3 F016          	movff	prodl,??_chkisr+8
 19552  003C6A  CFF4 F017          	movff	prodh,??_chkisr+9
 19553  003C6E  CFF6 F018          	movff	tblptrl,??_chkisr+10
 19554  003C72  CFF7 F019          	movff	tblptrh,??_chkisr+11
 19555  003C76  CFF8 F01A          	movff	tblptru,??_chkisr+12
 19556  003C7A  CFF5 F01B          	movff	tablat,??_chkisr+13
 19557                           
 19558                           ;lab_final_alt.c: 1502: if (INTCONbits.INT0IF == 1) INT0_isr();
 19559  003C7E  A2F2               	btfss	intcon,1,c	;volatile
 19560  003C80  D003               	goto	i2l7272
 19561  003C82  EC8A  F025         	call	_INT0_isr	;wreg free
 19562  003C86  D000               	goto	i2l7272
 19563  003C88                     i2l7272:
 19564                           
 19565                           ;lab_final_alt.c: 1503: if (INTCON3bits.INT1IF == 1) INT1_isr();
 19566  003C88  A0F0               	btfss	intcon3,0,c	;volatile
 19567  003C8A  D003               	goto	i2l7276
 19568  003C8C  EC97  F025         	call	_INT1_isr	;wreg free
 19569  003C90  D000               	goto	i2l7276
 19570  003C92                     i2l7276:
 19571                           
 19572                           ;lab_final_alt.c: 1504: if (INTCON3bits.INT2IF == 1) INT2_isr();
 19573  003C92  A2F0               	btfss	intcon3,1,c	;volatile
 19574  003C94  D003               	goto	i2l7280
 19575  003C96  EC37  F015         	call	_INT2_isr	;wreg free
 19576  003C9A  D000               	goto	i2l7280
 19577  003C9C                     i2l7280:
 19578                           
 19579                           ;lab_final_alt.c: 1505: if (PIR1bits.TMR1IF == 1) TIMER1_isr();
 19580  003C9C  A09E               	btfss	3998,0,c	;volatile
 19581  003C9E  D003               	goto	i2l283
 19582  003CA0  EC24  F026         	call	_TIMER1_isr	;wreg free
 19583  003CA4  D000               	goto	i2l283
 19584  003CA6                     i2l283:
 19585  003CA6  C01B  FFF5         	movff	??_chkisr+13,tablat
 19586  003CAA  C01A  FFF8         	movff	??_chkisr+12,tblptru
 19587  003CAE  C019  FFF7         	movff	??_chkisr+11,tblptrh
 19588  003CB2  C018  FFF6         	movff	??_chkisr+10,tblptrl
 19589  003CB6  C017  FFF4         	movff	??_chkisr+9,prodh
 19590  003CBA  C016  FFF3         	movff	??_chkisr+8,prodl
 19591  003CBE  C015  FFDA         	movff	??_chkisr+7,fsr2h
 19592  003CC2  C014  FFD9         	movff	??_chkisr+6,fsr2l
 19593  003CC6  C013  FFE2         	movff	??_chkisr+5,fsr1h
 19594  003CCA  C012  FFE1         	movff	??_chkisr+4,fsr1l
 19595  003CCE  C011  FFEA         	movff	??_chkisr+3,fsr0h
 19596  003CD2  C010  FFE9         	movff	??_chkisr+2,fsr0l
 19597  003CD6  C00F  FFFB         	movff	??_chkisr+1,pclatu
 19598  003CDA  C00E  FFFA         	movff	??_chkisr,pclath
 19599  003CDE  0011               	retfie		f
 19600  003CE0                     __end_of_chkisr:
 19601                           	opt stack 0
 19602                           pclatu	equ	0xFFB
 19603                           pclath	equ	0xFFA
 19604                           tblptru	equ	0xFF8
 19605                           tblptrh	equ	0xFF7
 19606                           tblptrl	equ	0xFF6
 19607                           tablat	equ	0xFF5
 19608                           prodh	equ	0xFF4
 19609                           prodl	equ	0xFF3
 19610                           intcon	equ	0xFF2
 19611                           intcon2	equ	0xFF1
 19612                           intcon3	equ	0xFF0
 19613                           postinc0	equ	0xFEE
 19614                           fsr0h	equ	0xFEA
 19615                           fsr0l	equ	0xFE9
 19616                           wreg	equ	0xFE8
 19617                           postdec1	equ	0xFE5
 19618                           fsr1h	equ	0xFE2
 19619                           fsr1l	equ	0xFE1
 19620                           indf2	equ	0xFDF
 19621                           postinc2	equ	0xFDE
 19622                           postdec2	equ	0xFDD
 19623                           fsr2h	equ	0xFDA
 19624                           fsr2l	equ	0xFD9
 19625                           status	equ	0xFD8
 19626                           
 19627 ;; *************** function _TIMER1_isr *****************
 19628 ;; Defined at:
 19629 ;;		line 1605 in file "lab_final_alt.c"
 19630 ;; Parameters:    Size  Location     Type
 19631 ;;		None
 19632 ;; Auto vars:     Size  Location     Type
 19633 ;;		None
 19634 ;; Return value:  Size  Location     Type
 19635 ;;		None               void
 19636 ;; Registers used:
 19637 ;;		wreg, status,2
 19638 ;; Tracked objects:
 19639 ;;		On entry : 0/0
 19640 ;;		On exit  : 0/0
 19641 ;;		Unchanged: 0/0
 19642 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19643 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19644 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19645 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19646 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19647 ;;Total ram usage:        0 bytes
 19648 ;; Hardware stack levels used:    1
 19649 ;; This function calls:
 19650 ;;		Nothing
 19651 ;; This function is called by:
 19652 ;;		_chkisr
 19653 ;; This function uses a non-reentrant model
 19654 ;;
 19655                           
 19656                           	psect	text92
 19657  004C48                     __ptext92:
 19658                           	opt stack 0
 19659  004C48                     _TIMER1_isr:
 19660                           	opt stack 20
 19661                           
 19662                           ;lab_final_alt.c: 1607: nec_state = 0;
 19663                           
 19664                           ;incstack = 0
 19665  004C48  0E00               	movlw	0
 19666  004C4A  6E58               	movwf	_nec_state,c
 19667                           
 19668                           ;lab_final_alt.c: 1608: INTCON2bits.INTEDG2 = 0;
 19669  004C4C  98F1               	bcf	intcon2,4,c	;volatile
 19670                           
 19671                           ;lab_final_alt.c: 1609: T1CONbits.TMR1ON=0;
 19672  004C4E  90CD               	bcf	4045,0,c	;volatile
 19673                           
 19674                           ;lab_final_alt.c: 1610: PIR1bits.TMR1IF=0;
 19675  004C50  909E               	bcf	3998,0,c	;volatile
 19676  004C52  0012               	return		;funcret
 19677  004C54                     __end_of_TIMER1_isr:
 19678                           	opt stack 0
 19679                           pclatu	equ	0xFFB
 19680                           pclath	equ	0xFFA
 19681                           tblptru	equ	0xFF8
 19682                           tblptrh	equ	0xFF7
 19683                           tblptrl	equ	0xFF6
 19684                           tablat	equ	0xFF5
 19685                           prodh	equ	0xFF4
 19686                           prodl	equ	0xFF3
 19687                           intcon	equ	0xFF2
 19688                           intcon2	equ	0xFF1
 19689                           intcon3	equ	0xFF0
 19690                           postinc0	equ	0xFEE
 19691                           fsr0h	equ	0xFEA
 19692                           fsr0l	equ	0xFE9
 19693                           wreg	equ	0xFE8
 19694                           postdec1	equ	0xFE5
 19695                           fsr1h	equ	0xFE2
 19696                           fsr1l	equ	0xFE1
 19697                           indf2	equ	0xFDF
 19698                           postinc2	equ	0xFDE
 19699                           postdec2	equ	0xFDD
 19700                           fsr2h	equ	0xFDA
 19701                           fsr2l	equ	0xFD9
 19702                           status	equ	0xFD8
 19703                           
 19704 ;; *************** function _INT2_isr *****************
 19705 ;; Defined at:
 19706 ;;		line 1523 in file "lab_final_alt.c"
 19707 ;; Parameters:    Size  Location     Type
 19708 ;;		None
 19709 ;; Auto vars:     Size  Location     Type
 19710 ;;  timer           2    2[COMRAM] unsigned int 
 19711 ;; Return value:  Size  Location     Type
 19712 ;;		None               void
 19713 ;; Registers used:
 19714 ;;		wreg, status,2, status,0
 19715 ;; Tracked objects:
 19716 ;;		On entry : 0/0
 19717 ;;		On exit  : 0/0
 19718 ;;		Unchanged: 0/0
 19719 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19720 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19721 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19722 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19723 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19724 ;;Total ram usage:        4 bytes
 19725 ;; Hardware stack levels used:    1
 19726 ;; This function calls:
 19727 ;;		Nothing
 19728 ;; This function is called by:
 19729 ;;		_chkisr
 19730 ;; This function uses a non-reentrant model
 19731 ;;
 19732                           
 19733                           	psect	text93
 19734  002A6E                     __ptext93:
 19735                           	opt stack 0
 19736  002A6E                     _INT2_isr:
 19737                           	opt stack 20
 19738                           
 19739                           ;lab_final_alt.c: 1525: unsigned int timer;
 19740                           ;lab_final_alt.c: 1526: INTCON3bits.INT2IF = 0;
 19741                           
 19742                           ;incstack = 0
 19743  002A6E  92F0               	bcf	intcon3,1,c	;volatile
 19744                           
 19745                           ;lab_final_alt.c: 1528: if (nec_state != 0)
 19746  002A70  5058               	movf	_nec_state,w,c
 19747  002A72  B4D8               	btfsc	status,2,c
 19748  002A74  D0A1               	goto	i2l6314
 19749                           
 19750                           ;lab_final_alt.c: 1529: {
 19751                           ;lab_final_alt.c: 1530: timer = (TMR1H << 8) | TMR1L;
 19752  002A76  50CE               	movf	4046,w,c	;volatile
 19753  002A78  CFCF F001          	movff	4047,??_INT2_isr	;volatile
 19754  002A7C  6A02               	clrf	(??_INT2_isr+1)& (0+255),c
 19755  002A7E  C001  F002         	movff	??_INT2_isr,??_INT2_isr+1
 19756  002A82  6A01               	clrf	??_INT2_isr,c
 19757  002A84  1001               	iorwf	??_INT2_isr,w,c
 19758  002A86  6E03               	movwf	INT2_isr@timer,c
 19759  002A88  5002               	movf	??_INT2_isr+1,w,c
 19760  002A8A  6E04               	movwf	INT2_isr@timer+1,c
 19761                           
 19762                           ;lab_final_alt.c: 1531: TMR1H = 0;
 19763  002A8C  0E00               	movlw	0
 19764  002A8E  6ECF               	movwf	4047,c	;volatile
 19765                           
 19766                           ;lab_final_alt.c: 1532: TMR1L = 0;
 19767  002A90  0E00               	movlw	0
 19768  002A92  6ECE               	movwf	4046,c	;volatile
 19769                           
 19770                           ;lab_final_alt.c: 1533: }
 19771                           ;lab_final_alt.c: 1535: switch(nec_state)
 19772  002A94  D091               	goto	i2l6314
 19773  002A96                     i2l6250:
 19774                           
 19775                           ;lab_final_alt.c: 1538: TMR1H = 0;
 19776  002A96  0E00               	movlw	0
 19777  002A98  6ECF               	movwf	4047,c	;volatile
 19778                           
 19779                           ;lab_final_alt.c: 1539: TMR1L = 0;
 19780  002A9A  0E00               	movlw	0
 19781  002A9C  6ECE               	movwf	4046,c	;volatile
 19782                           
 19783                           ;lab_final_alt.c: 1540: T1CON = 0x90;
 19784  002A9E  0E90               	movlw	144
 19785  002AA0  6ECD               	movwf	4045,c	;volatile
 19786                           
 19787                           ;lab_final_alt.c: 1541: T1CONbits.TMR1ON = 1;
 19788  002AA2  80CD               	bsf	4045,0,c	;volatile
 19789                           
 19790                           ;lab_final_alt.c: 1542: bit_count = 0;
 19791  002AA4  0E00               	movlw	0
 19792  002AA6  0100               	movlb	0	; () banked
 19793  002AA8  6FE5               	movwf	(_bit_count+1)& (0+255),b
 19794  002AAA  0E00               	movlw	0
 19795  002AAC  6FE4               	movwf	_bit_count& (0+255),b
 19796                           
 19797                           ;lab_final_alt.c: 1543: nec_code = 0;
 19798  002AAE  0E00               	movlw	0
 19799  002AB0  6E49               	movwf	_nec_code,c
 19800  002AB2  0E00               	movlw	0
 19801  002AB4  6E4A               	movwf	_nec_code+1,c
 19802  002AB6  0E00               	movlw	0
 19803  002AB8  6E4B               	movwf	_nec_code+2,c
 19804  002ABA  0E00               	movlw	0
 19805  002ABC  6E4C               	movwf	_nec_code+3,c
 19806                           
 19807                           ; BSR set to: 0
 19808                           ;lab_final_alt.c: 1544: INTCON2bits.INTEDG2 = 1;
 19809  002ABE  88F1               	bsf	intcon2,4,c	;volatile
 19810                           
 19811                           ;lab_final_alt.c: 1545: nec_state = 1;
 19812  002AC0  0E01               	movlw	1
 19813  002AC2  D078               	goto	L21
 19814                           
 19815                           ; BSR set to: 0
 19816                           ;lab_final_alt.c: 1546: return;
 19817  002AC4  D08A               	goto	i2l297
 19818  002AC6                     i2l6258:
 19819                           
 19820                           ;lab_final_alt.c: 1549: if ((timer >= 8500) && (timer <= 9500))
 19821  002AC6  0E34               	movlw	52
 19822  002AC8  5C03               	subwf	INT2_isr@timer,w,c
 19823  002ACA  0E21               	movlw	33
 19824  002ACC  5804               	subwfb	INT2_isr@timer+1,w,c
 19825  002ACE  A0D8               	btfss	status,0,c
 19826  002AD0  D070               	goto	i2l6308
 19827  002AD2  0E1D               	movlw	29
 19828  002AD4  5C03               	subwf	INT2_isr@timer,w,c
 19829  002AD6  0E25               	movlw	37
 19830  002AD8  5804               	subwfb	INT2_isr@timer+1,w,c
 19831  002ADA  B0D8               	btfsc	status,0,c
 19832  002ADC  D06A               	goto	i2l6308
 19833                           
 19834                           ;lab_final_alt.c: 1550: {
 19835                           ;lab_final_alt.c: 1551: INTCON2bits.INTEDG2 = 0;
 19836  002ADE  98F1               	bcf	intcon2,4,c	;volatile
 19837                           
 19838                           ;lab_final_alt.c: 1552: nec_state = 2;
 19839  002AE0  0E02               	movlw	2
 19840  002AE2  D068               	goto	L21
 19841                           
 19842                           ;lab_final_alt.c: 1553: }
 19843  002AE4  D066               	goto	i2l6308
 19844                           
 19845                           ;lab_final_alt.c: 1556: return;
 19846                           
 19847                           ;lab_final_alt.c: 1555: else nec_state = 0;
 19848  002AE6  D079               	goto	i2l297
 19849  002AE8                     i2l6270:
 19850                           
 19851                           ;lab_final_alt.c: 1559: if (( timer >= 4000) && (timer <= 5000))
 19852  002AE8  0EA0               	movlw	160
 19853  002AEA  5C03               	subwf	INT2_isr@timer,w,c
 19854  002AEC  0E0F               	movlw	15
 19855  002AEE  5804               	subwfb	INT2_isr@timer+1,w,c
 19856  002AF0  A0D8               	btfss	status,0,c
 19857  002AF2  D05F               	goto	i2l6308
 19858  002AF4  0E89               	movlw	137
 19859  002AF6  5C03               	subwf	INT2_isr@timer,w,c
 19860  002AF8  0E13               	movlw	19
 19861  002AFA  5804               	subwfb	INT2_isr@timer+1,w,c
 19862  002AFC  B0D8               	btfsc	status,0,c
 19863  002AFE  D059               	goto	i2l6308
 19864  002B00                     
 19865                           ;lab_final_alt.c: 1560: {
 19866                           ;lab_final_alt.c: 1561: INTCON2bits.INTEDG2 = 1;
 19867  002B00  88F1               	bsf	intcon2,4,c	;volatile
 19868  002B02  D054               	goto	i2l6306
 19869                           
 19870                           ;lab_final_alt.c: 1563: }
 19871                           
 19872                           ;lab_final_alt.c: 1562: nec_state = 3;
 19873  002B04  D056               	goto	i2l6308
 19874                           
 19875                           ;lab_final_alt.c: 1566: return;
 19876                           
 19877                           ;lab_final_alt.c: 1565: else nec_state = 0;
 19878  002B06  D069               	goto	i2l297
 19879  002B08                     i2l6282:
 19880                           
 19881                           ;lab_final_alt.c: 1569: if ((timer >= 400) && (timer <= 700))
 19882  002B08  0E90               	movlw	144
 19883  002B0A  5C03               	subwf	INT2_isr@timer,w,c
 19884  002B0C  0E01               	movlw	1
 19885  002B0E  5804               	subwfb	INT2_isr@timer+1,w,c
 19886  002B10  A0D8               	btfss	status,0,c
 19887  002B12  D04F               	goto	i2l6308
 19888  002B14  0EBD               	movlw	189
 19889  002B16  5C03               	subwf	INT2_isr@timer,w,c
 19890  002B18  0E02               	movlw	2
 19891  002B1A  5804               	subwfb	INT2_isr@timer+1,w,c
 19892  002B1C  B0D8               	btfsc	status,0,c
 19893  002B1E  D049               	goto	i2l6308
 19894                           
 19895                           ;lab_final_alt.c: 1570: {
 19896                           ;lab_final_alt.c: 1571: INTCON2bits.INTEDG2 = 0;
 19897  002B20  98F1               	bcf	intcon2,4,c	;volatile
 19898                           
 19899                           ;lab_final_alt.c: 1572: nec_state = 4;
 19900  002B22  0E04               	movlw	4
 19901  002B24  D047               	goto	L21
 19902                           
 19903                           ;lab_final_alt.c: 1573: }
 19904  002B26  D045               	goto	i2l6308
 19905                           
 19906                           ;lab_final_alt.c: 1576: return;
 19907                           
 19908                           ;lab_final_alt.c: 1575: else nec_state = 0;
 19909  002B28  D058               	goto	i2l297
 19910  002B2A                     i2l6294:
 19911                           
 19912                           ;lab_final_alt.c: 1579: if((timer >= 400) && (timer <= 1800))
 19913  002B2A  0E90               	movlw	144
 19914  002B2C  5C03               	subwf	INT2_isr@timer,w,c
 19915  002B2E  0E01               	movlw	1
 19916  002B30  5804               	subwfb	INT2_isr@timer+1,w,c
 19917  002B32  A0D8               	btfss	status,0,c
 19918  002B34  D03E               	goto	i2l6308
 19919  002B36  0E09               	movlw	9
 19920  002B38  5C03               	subwf	INT2_isr@timer,w,c
 19921  002B3A  0E07               	movlw	7
 19922  002B3C  5804               	subwfb	INT2_isr@timer+1,w,c
 19923  002B3E  B0D8               	btfsc	status,0,c
 19924  002B40  D038               	goto	i2l6308
 19925                           
 19926                           ;lab_final_alt.c: 1580: {
 19927                           ;lab_final_alt.c: 1581: nec_code = nec_code << 1;
 19928  002B42  90D8               	bcf	status,0,c
 19929  002B44  3449               	rlcf	_nec_code,w,c
 19930  002B46  6E49               	movwf	_nec_code,c
 19931  002B48  344A               	rlcf	_nec_code+1,w,c
 19932  002B4A  6E4A               	movwf	_nec_code+1,c
 19933  002B4C  344B               	rlcf	_nec_code+2,w,c
 19934  002B4E  6E4B               	movwf	_nec_code+2,c
 19935  002B50  344C               	rlcf	_nec_code+3,w,c
 19936  002B52  6E4C               	movwf	_nec_code+3,c
 19937                           
 19938                           ;lab_final_alt.c: 1582: if( timer > 1000)
 19939  002B54  0EE9               	movlw	233
 19940  002B56  5C03               	subwf	INT2_isr@timer,w,c
 19941  002B58  0E03               	movlw	3
 19942  002B5A  5804               	subwfb	INT2_isr@timer+1,w,c
 19943  002B5C  A0D8               	btfss	status,0,c
 19944  002B5E  D00C               	goto	i2l309
 19945                           
 19946                           ;lab_final_alt.c: 1583: {
 19947                           ;lab_final_alt.c: 1584: nec_code = nec_code + 1;
 19948  002B60  0E01               	movlw	1
 19949  002B62  2449               	addwf	_nec_code,w,c
 19950  002B64  6E49               	movwf	_nec_code,c
 19951  002B66  0E00               	movlw	0
 19952  002B68  204A               	addwfc	_nec_code+1,w,c
 19953  002B6A  6E4A               	movwf	_nec_code+1,c
 19954  002B6C  0E00               	movlw	0
 19955  002B6E  204B               	addwfc	_nec_code+2,w,c
 19956  002B70  6E4B               	movwf	_nec_code+2,c
 19957  002B72  0E00               	movlw	0
 19958  002B74  204C               	addwfc	_nec_code+3,w,c
 19959  002B76  6E4C               	movwf	_nec_code+3,c
 19960  002B78                     i2l309:
 19961                           
 19962                           ;lab_final_alt.c: 1585: }
 19963                           ;lab_final_alt.c: 1586: bit_count = bit_count + 1;
 19964  002B78  0E01               	movlw	1
 19965  002B7A  0100               	movlb	0	; () banked
 19966  002B7C  25E4               	addwf	_bit_count& (0+255),w,b
 19967  002B7E  0100               	movlb	0	; () banked
 19968  002B80  6FE4               	movwf	_bit_count& (0+255),b
 19969  002B82  0E00               	movlw	0
 19970  002B84  0100               	movlb	0	; () banked
 19971  002B86  21E5               	addwfc	(_bit_count+1)& (0+255),w,b
 19972  002B88  0100               	movlb	0	; () banked
 19973  002B8A  6FE5               	movwf	(_bit_count+1)& (0+255),b
 19974                           
 19975                           ;lab_final_alt.c: 1588: if(bit_count > 31)
 19976  002B8C  0100               	movlb	0	; () banked
 19977  002B8E  BFE5               	btfsc	(_bit_count+1)& (0+255),7,b
 19978  002B90  D7B7               	goto	L22
 19979  002B92  0100               	movlb	0	; () banked
 19980  002B94  51E5               	movf	(_bit_count+1)& (0+255),w,b
 19981  002B96  E105               	bnz	i2u516_40
 19982  002B98  0E20               	movlw	32
 19983  002B9A  0100               	movlb	0	; () banked
 19984  002B9C  5DE4               	subwf	_bit_count& (0+255),w,b
 19985  002B9E  A0D8               	btfss	status,0,c
 19986  002BA0  D7AF               	goto	L22
 19987  002BA2                     i2u516_40:
 19988                           
 19989                           ; BSR set to: 0
 19990                           ;lab_final_alt.c: 1589: {
 19991                           ;lab_final_alt.c: 1590: nec_ok = 1;
 19992  002BA2  0E01               	movlw	1
 19993  002BA4  0100               	movlb	0	; () banked
 19994  002BA6  6FF4               	movwf	_nec_ok& (0+255),b
 19995                           
 19996                           ; BSR set to: 0
 19997                           ;lab_final_alt.c: 1591: INTCON3bits.INT2IE = 0;
 19998  002BA8  98F0               	bcf	intcon3,4,c	;volatile
 19999                           
 20000                           ;lab_final_alt.c: 1592: }
 20001  002BAA  D017               	goto	i2l297
 20002  002BAC                     i2l6306:
 20003                           
 20004                           ; BSR set to: 0
 20005                           ;lab_final_alt.c: 1597: nec_state = 3;
 20006  002BAC  0E03               	movlw	3
 20007  002BAE  D002               	goto	L21
 20008                           
 20009                           ; BSR set to: 0
 20010                           ;lab_final_alt.c: 1598: }
 20011                           ;lab_final_alt.c: 1599: }
 20012  002BB0  D014               	goto	i2l297
 20013  002BB2                     i2l6308:
 20014                           
 20015                           ;lab_final_alt.c: 1601: else nec_state = 0;
 20016  002BB2  0E00               	movlw	0
 20017  002BB4                     L21:
 20018  002BB4  6E58               	movwf	_nec_state,c
 20019                           
 20020                           ;lab_final_alt.c: 1603: }
 20021                           
 20022                           ;lab_final_alt.c: 1602: return;
 20023  002BB6  D011               	goto	i2l297
 20024  002BB8                     i2l6314:
 20025  002BB8  5058               	movf	_nec_state,w,c
 20026                           
 20027                           ; Switch size 1, requested type "space"
 20028                           ; Number of cases is 5, Range of values is 0 to 4
 20029                           ; switch strategies available:
 20030                           ; Name         Instructions Cycles
 20031                           ; simple_byte           16     9 (average)
 20032                           ;	Chosen strategy is simple_byte
 20033  002BBA  0A00               	xorlw	0	; case 0
 20034  002BBC  B4D8               	btfsc	status,2,c
 20035  002BBE  D76B               	goto	i2l6250
 20036  002BC0  0A01               	xorlw	1	; case 1
 20037  002BC2  B4D8               	btfsc	status,2,c
 20038  002BC4  D780               	goto	i2l6258
 20039  002BC6  0A03               	xorlw	3	; case 2
 20040  002BC8  B4D8               	btfsc	status,2,c
 20041  002BCA  D78E               	goto	i2l6270
 20042  002BCC  0A01               	xorlw	1	; case 3
 20043  002BCE  B4D8               	btfsc	status,2,c
 20044  002BD0  D79B               	goto	i2l6282
 20045  002BD2  0A07               	xorlw	7	; case 4
 20046  002BD4  B4D8               	btfsc	status,2,c
 20047  002BD6  D7A9               	goto	i2l6294
 20048  002BD8  D000               	goto	i2l297
 20049  002BDA                     i2l297:
 20050  002BDA  0012               	return		;funcret
 20051  002BDC                     __end_of_INT2_isr:
 20052                           	opt stack 0
 20053                           pclatu	equ	0xFFB
 20054                           pclath	equ	0xFFA
 20055                           tblptru	equ	0xFF8
 20056                           tblptrh	equ	0xFF7
 20057                           tblptrl	equ	0xFF6
 20058                           tablat	equ	0xFF5
 20059                           prodh	equ	0xFF4
 20060                           prodl	equ	0xFF3
 20061                           intcon	equ	0xFF2
 20062                           intcon2	equ	0xFF1
 20063                           intcon3	equ	0xFF0
 20064                           postinc0	equ	0xFEE
 20065                           fsr0h	equ	0xFEA
 20066                           fsr0l	equ	0xFE9
 20067                           wreg	equ	0xFE8
 20068                           postdec1	equ	0xFE5
 20069                           fsr1h	equ	0xFE2
 20070                           fsr1l	equ	0xFE1
 20071                           indf2	equ	0xFDF
 20072                           postinc2	equ	0xFDE
 20073                           postdec2	equ	0xFDD
 20074                           fsr2h	equ	0xFDA
 20075                           fsr2l	equ	0xFD9
 20076                           status	equ	0xFD8
 20077                           
 20078 ;; *************** function _INT1_isr *****************
 20079 ;; Defined at:
 20080 ;;		line 1517 in file "lab_final_alt.c"
 20081 ;; Parameters:    Size  Location     Type
 20082 ;;		None
 20083 ;; Auto vars:     Size  Location     Type
 20084 ;;		None
 20085 ;; Return value:  Size  Location     Type
 20086 ;;		None               void
 20087 ;; Registers used:
 20088 ;;		wreg, status,2, status,0
 20089 ;; Tracked objects:
 20090 ;;		On entry : 0/0
 20091 ;;		On exit  : 0/0
 20092 ;;		Unchanged: 0/0
 20093 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20094 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20095 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20096 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20097 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20098 ;;Total ram usage:        0 bytes
 20099 ;; Hardware stack levels used:    1
 20100 ;; This function calls:
 20101 ;;		Nothing
 20102 ;; This function is called by:
 20103 ;;		_chkisr
 20104 ;; This function uses a non-reentrant model
 20105 ;;
 20106                           
 20107                           	psect	text94
 20108  004B2E                     __ptext94:
 20109                           	opt stack 0
 20110  004B2E                     _INT1_isr:
 20111                           	opt stack 20
 20112                           
 20113                           ;lab_final_alt.c: 1519: INTCON3bits.INT1IF = 0;
 20114                           
 20115                           ;incstack = 0
 20116  004B2E  90F0               	bcf	intcon3,0,c	;volatile
 20117                           
 20118                           ;lab_final_alt.c: 1520: if (alarm_mode == 1) alarm_on_flag = 1;
 20119  004B30  0100               	movlb	0	; () banked
 20120  004B32  05EB               	decf	_alarm_mode& (0+255),w,b
 20121  004B34  A4D8               	btfss	status,2,c
 20122  004B36  D002               	goto	i2l6238
 20123                           
 20124                           ; BSR set to: 0
 20125  004B38  0E01               	movlw	1
 20126  004B3A  D001               	goto	L23
 20127  004B3C                     i2l6238:
 20128                           
 20129                           ; BSR set to: 0
 20130                           ;lab_final_alt.c: 1521: else alarm_on_flag = 0;
 20131  004B3C  0E00               	movlw	0
 20132  004B3E                     L23:
 20133  004B3E  0100               	movlb	0	; () banked
 20134  004B40  6FEC               	movwf	_alarm_on_flag& (0+255),b
 20135  004B42  D000               	goto	i2l291
 20136  004B44                     i2l291:
 20137                           
 20138                           ; BSR set to: 0
 20139  004B44  0012               	return		;funcret
 20140  004B46                     __end_of_INT1_isr:
 20141                           	opt stack 0
 20142                           pclatu	equ	0xFFB
 20143                           pclath	equ	0xFFA
 20144                           tblptru	equ	0xFF8
 20145                           tblptrh	equ	0xFF7
 20146                           tblptrl	equ	0xFF6
 20147                           tablat	equ	0xFF5
 20148                           prodh	equ	0xFF4
 20149                           prodl	equ	0xFF3
 20150                           intcon	equ	0xFF2
 20151                           intcon2	equ	0xFF1
 20152                           intcon3	equ	0xFF0
 20153                           postinc0	equ	0xFEE
 20154                           fsr0h	equ	0xFEA
 20155                           fsr0l	equ	0xFE9
 20156                           wreg	equ	0xFE8
 20157                           postdec1	equ	0xFE5
 20158                           fsr1h	equ	0xFE2
 20159                           fsr1l	equ	0xFE1
 20160                           indf2	equ	0xFDF
 20161                           postinc2	equ	0xFDE
 20162                           postdec2	equ	0xFDD
 20163                           fsr2h	equ	0xFDA
 20164                           fsr2l	equ	0xFD9
 20165                           status	equ	0xFD8
 20166                           
 20167 ;; *************** function _INT0_isr *****************
 20168 ;; Defined at:
 20169 ;;		line 1507 in file "lab_final_alt.c"
 20170 ;; Parameters:    Size  Location     Type
 20171 ;;		None
 20172 ;; Auto vars:     Size  Location     Type
 20173 ;;		None
 20174 ;; Return value:  Size  Location     Type
 20175 ;;		None               void
 20176 ;; Registers used:
 20177 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 20178 ;; Tracked objects:
 20179 ;;		On entry : 0/0
 20180 ;;		On exit  : 0/0
 20181 ;;		Unchanged: 0/0
 20182 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20183 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20184 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20185 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20186 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20187 ;;Total ram usage:        0 bytes
 20188 ;; Hardware stack levels used:    1
 20189 ;; Hardware stack levels required when called:    3
 20190 ;; This function calls:
 20191 ;;		_turn_off_sound
 20192 ;;		i2_DS3231_Turn_Off_Alarm
 20193 ;; This function is called by:
 20194 ;;		_chkisr
 20195 ;; This function uses a non-reentrant model
 20196 ;;
 20197                           
 20198                           	psect	text95
 20199  004B14                     __ptext95:
 20200                           	opt stack 0
 20201  004B14                     _INT0_isr:
 20202                           	opt stack 17
 20203                           
 20204                           ;lab_final_alt.c: 1509: INTCONbits.INT0IF = 0;
 20205                           
 20206                           ; BSR set to: 0
 20207                           ;incstack = 0
 20208  004B14  92F2               	bcf	intcon,1,c	;volatile
 20209                           
 20210                           ;lab_final_alt.c: 1510: alarm_on_flag = 0;
 20211  004B16  0E00               	movlw	0
 20212  004B18  0100               	movlb	0	; () banked
 20213  004B1A  6FEC               	movwf	_alarm_on_flag& (0+255),b
 20214                           
 20215                           ; BSR set to: 0
 20216                           ;lab_final_alt.c: 1511: turn_off_sound();
 20217  004B1C  EC54  F026         	call	_turn_off_sound	;wreg free
 20218                           
 20219                           ;lab_final_alt.c: 1512: PORTD = 0;
 20220  004B20  0E00               	movlw	0
 20221  004B22  6E83               	movwf	3971,c	;volatile
 20222                           
 20223                           ;lab_final_alt.c: 1513: DS3231_Turn_Off_Alarm(0x68);
 20224  004B24  0E68               	movlw	104
 20225  004B26  ECE5  F023         	call	i2_DS3231_Turn_Off_Alarm
 20226                           
 20227                           ;lab_final_alt.c: 1514: INTCON3bits.INT1IE = 0;
 20228  004B2A  96F0               	bcf	intcon3,3,c	;volatile
 20229  004B2C  0012               	return		;funcret
 20230  004B2E                     __end_of_INT0_isr:
 20231                           	opt stack 0
 20232                           pclatu	equ	0xFFB
 20233                           pclath	equ	0xFFA
 20234                           tblptru	equ	0xFF8
 20235                           tblptrh	equ	0xFF7
 20236                           tblptrl	equ	0xFF6
 20237                           tablat	equ	0xFF5
 20238                           prodh	equ	0xFF4
 20239                           prodl	equ	0xFF3
 20240                           intcon	equ	0xFF2
 20241                           intcon2	equ	0xFF1
 20242                           intcon3	equ	0xFF0
 20243                           postinc0	equ	0xFEE
 20244                           fsr0h	equ	0xFEA
 20245                           fsr0l	equ	0xFE9
 20246                           wreg	equ	0xFE8
 20247                           postdec1	equ	0xFE5
 20248                           fsr1h	equ	0xFE2
 20249                           fsr1l	equ	0xFE1
 20250                           indf2	equ	0xFDF
 20251                           postinc2	equ	0xFDE
 20252                           postdec2	equ	0xFDD
 20253                           fsr2h	equ	0xFDA
 20254                           fsr2l	equ	0xFD9
 20255                           status	equ	0xFD8
 20256                           
 20257 ;; *************** function i2_DS3231_Turn_Off_Alarm *****************
 20258 ;; Defined at:
 20259 ;;		line 2270 in file "lab_final_alt.c"
 20260 ;; Parameters:    Size  Location     Type
 20261 ;;  device          1    wreg     unsigned char 
 20262 ;; Auto vars:     Size  Location     Type
 20263 ;;  device          1   12[COMRAM] unsigned char 
 20264 ;; Return value:  Size  Location     Type
 20265 ;;		None               void
 20266 ;; Registers used:
 20267 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 20268 ;; Tracked objects:
 20269 ;;		On entry : 0/0
 20270 ;;		On exit  : 0/0
 20271 ;;		Unchanged: 0/0
 20272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20273 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20274 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20275 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20276 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20277 ;;Total ram usage:        1 bytes
 20278 ;; Hardware stack levels used:    1
 20279 ;; Hardware stack levels required when called:    2
 20280 ;; This function calls:
 20281 ;;		i2_I2C_Start
 20282 ;;		i2_I2C_Stop
 20283 ;;		i2_I2C_Write
 20284 ;;		i2_delay_ms
 20285 ;; This function is called by:
 20286 ;;		_INT0_isr
 20287 ;; This function uses a non-reentrant model
 20288 ;;
 20289                           
 20290                           	psect	text96
 20291  0047CA                     __ptext96:
 20292                           	opt stack 0
 20293  0047CA                     i2_DS3231_Turn_Off_Alarm:
 20294                           	opt stack 17
 20295                           
 20296                           ;incstack = 0
 20297                           ;i2DS3231_Turn_Off_Alarm@device stored from wreg
 20298  0047CA  6E0D               	movwf	i2DS3231_Turn_Off_Alarm@device,c
 20299                           
 20300                           ;lab_final_alt.c: 2272: INTCONbits.INT0IF = 0;
 20301  0047CC  92F2               	bcf	intcon,1,c	;volatile
 20302                           
 20303                           ;lab_final_alt.c: 2273: INTCON3bits.INT1IE = 0;
 20304  0047CE  96F0               	bcf	intcon3,3,c	;volatile
 20305                           
 20306                           ;lab_final_alt.c: 2274: I2C_Start();
 20307  0047D0  ECF8  F025         	call	i2_I2C_Start	;wreg free
 20308                           
 20309                           ;lab_final_alt.c: 2275: I2C_Write((device << 1) | 0);
 20310  0047D4  500D               	movf	i2DS3231_Turn_Off_Alarm@device,w,c
 20311  0047D6  240D               	addwf	i2DS3231_Turn_Off_Alarm@device,w,c
 20312  0047D8  EC71  F023         	call	i2_I2C_Write
 20313                           
 20314                           ;lab_final_alt.c: 2276: I2C_Write(0x0E);
 20315  0047DC  0E0E               	movlw	14
 20316  0047DE  EC71  F023         	call	i2_I2C_Write
 20317                           
 20318                           ;lab_final_alt.c: 2277: I2C_Write(0x06);
 20319  0047E2  0E06               	movlw	6
 20320  0047E4  EC71  F023         	call	i2_I2C_Write
 20321                           
 20322                           ;lab_final_alt.c: 2278: I2C_Write(0x80);
 20323  0047E8  0E80               	movlw	128
 20324  0047EA  EC71  F023         	call	i2_I2C_Write
 20325                           
 20326                           ;lab_final_alt.c: 2279: I2C_Stop();
 20327  0047EE  ECEF  F025         	call	i2_I2C_Stop	;wreg free
 20328                           
 20329                           ;lab_final_alt.c: 2280: delay_ms(20);
 20330  0047F2  0E00               	movlw	0
 20331  0047F4  6E08               	movwf	i2delay_ms@ms+1,c
 20332  0047F6  0E14               	movlw	20
 20333  0047F8  6E07               	movwf	i2delay_ms@ms,c
 20334  0047FA  EC08  F022         	call	i2_delay_ms	;wreg free
 20335  0047FE  0012               	return		;funcret
 20336  004800                     __end_ofi2_DS3231_Turn_Off_Alarm:
 20337                           	opt stack 0
 20338                           pclatu	equ	0xFFB
 20339                           pclath	equ	0xFFA
 20340                           tblptru	equ	0xFF8
 20341                           tblptrh	equ	0xFF7
 20342                           tblptrl	equ	0xFF6
 20343                           tablat	equ	0xFF5
 20344                           prodh	equ	0xFF4
 20345                           prodl	equ	0xFF3
 20346                           intcon	equ	0xFF2
 20347                           intcon2	equ	0xFF1
 20348                           intcon3	equ	0xFF0
 20349                           postinc0	equ	0xFEE
 20350                           fsr0h	equ	0xFEA
 20351                           fsr0l	equ	0xFE9
 20352                           wreg	equ	0xFE8
 20353                           postdec1	equ	0xFE5
 20354                           fsr1h	equ	0xFE2
 20355                           fsr1l	equ	0xFE1
 20356                           indf2	equ	0xFDF
 20357                           postinc2	equ	0xFDE
 20358                           postdec2	equ	0xFDD
 20359                           fsr2h	equ	0xFDA
 20360                           fsr2l	equ	0xFD9
 20361                           status	equ	0xFD8
 20362                           
 20363 ;; *************** function i2_delay_ms *****************
 20364 ;; Defined at:
 20365 ;;		line 2355 in file "lab_final_alt.c"
 20366 ;; Parameters:    Size  Location     Type
 20367 ;;  ms              2    6[COMRAM] int 
 20368 ;; Auto vars:     Size  Location     Type
 20369 ;;  delay_ms        2   10[COMRAM] int 
 20370 ;; Return value:  Size  Location     Type
 20371 ;;		None               void
 20372 ;; Registers used:
 20373 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 20374 ;; Tracked objects:
 20375 ;;		On entry : 0/0
 20376 ;;		On exit  : 0/0
 20377 ;;		Unchanged: 0/0
 20378 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20379 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20380 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20381 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20382 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20383 ;;Total ram usage:        6 bytes
 20384 ;; Hardware stack levels used:    1
 20385 ;; Hardware stack levels required when called:    1
 20386 ;; This function calls:
 20387 ;;		i2___wmul
 20388 ;; This function is called by:
 20389 ;;		i2_DS3231_Turn_Off_Alarm
 20390 ;; This function uses a non-reentrant model
 20391 ;;
 20392                           
 20393                           	psect	text97
 20394  004410                     __ptext97:
 20395                           	opt stack 0
 20396  004410                     i2_delay_ms:
 20397                           	opt stack 17
 20398                           
 20399                           ;lab_final_alt.c: 2359: int count;
 20400                           ;lab_final_alt.c: 2360: count = 8000000/4000/32 * ms;
 20401                           
 20402                           ;incstack = 0
 20403  004410  C007  F001         	movff	i2delay_ms@ms,i2___wmul@multiplier
 20404  004414  C008  F002         	movff	i2delay_ms@ms+1,i2___wmul@multiplier+1
 20405  004418  0E00               	movlw	0
 20406  00441A  6E04               	movwf	i2___wmul@multiplicand+1,c
 20407  00441C  0E3E               	movlw	62
 20408  00441E  6E03               	movwf	i2___wmul@multiplicand,c
 20409  004420  ECD7  F024         	call	i2___wmul	;wreg free
 20410  004424  C001  F00B         	movff	?i2___wmul,i2delay_ms@count
 20411  004428  C002  F00C         	movff	?i2___wmul+1,i2delay_ms@count+1
 20412                           
 20413                           ;lab_final_alt.c: 2361: count = (0xffff - count);
 20414  00442C  C00B  F009         	movff	i2delay_ms@count,??i2_delay_ms
 20415  004430  C00C  F00A         	movff	i2delay_ms@count+1,??i2_delay_ms+1
 20416  004434  1E09               	comf	??i2_delay_ms,f,c
 20417  004436  1E0A               	comf	??i2_delay_ms+1,f,c
 20418  004438  4A09               	infsnz	??i2_delay_ms,f,c
 20419  00443A  2A0A               	incf	??i2_delay_ms+1,f,c
 20420  00443C  0EFF               	movlw	255
 20421  00443E  2409               	addwf	??i2_delay_ms,w,c
 20422  004440  6E0B               	movwf	i2delay_ms@count,c
 20423  004442  0EFF               	movlw	255
 20424  004444  200A               	addwfc	??i2_delay_ms+1,w,c
 20425  004446  6E0C               	movwf	i2delay_ms@count+1,c
 20426                           
 20427                           ;lab_final_alt.c: 2362: T0CON = 0x04;
 20428  004448  0E04               	movlw	4
 20429  00444A  6ED5               	movwf	4053,c	;volatile
 20430                           
 20431                           ;lab_final_alt.c: 2364: TMR0L = count & 0x00ff;
 20432  00444C  C00B  FFD6         	movff	i2delay_ms@count,4054	;volatile
 20433                           
 20434                           ;lab_final_alt.c: 2365: TMR0H = count >> 8;
 20435  004450  500C               	movf	i2delay_ms@count+1,w,c
 20436  004452  6ED7               	movwf	4055,c	;volatile
 20437                           
 20438                           ;lab_final_alt.c: 2366: INTCONbits.TMR0IF = 0;
 20439  004454  94F2               	bcf	intcon,2,c	;volatile
 20440                           
 20441                           ;lab_final_alt.c: 2367: T0CONbits.TMR0ON = 1;
 20442  004456  8ED5               	bsf	4053,7,c	;volatile
 20443                           
 20444                           ;lab_final_alt.c: 2368: while (INTCONbits.TMR0IF == 0);
 20445  004458  D000               	goto	i2l759
 20446  00445A                     i2l759:
 20447  00445A  A4F2               	btfss	intcon,2,c	;volatile
 20448  00445C  D7FE               	goto	i2l759
 20449                           
 20450                           ;lab_final_alt.c: 2370: T0CONbits.TMR0ON = 0;
 20451  00445E  9ED5               	bcf	4053,7,c	;volatile
 20452  004460  0012               	return		;funcret
 20453  004462                     __end_ofi2_delay_ms:
 20454                           	opt stack 0
 20455                           pclatu	equ	0xFFB
 20456                           pclath	equ	0xFFA
 20457                           tblptru	equ	0xFF8
 20458                           tblptrh	equ	0xFF7
 20459                           tblptrl	equ	0xFF6
 20460                           tablat	equ	0xFF5
 20461                           prodh	equ	0xFF4
 20462                           prodl	equ	0xFF3
 20463                           intcon	equ	0xFF2
 20464                           intcon2	equ	0xFF1
 20465                           intcon3	equ	0xFF0
 20466                           postinc0	equ	0xFEE
 20467                           fsr0h	equ	0xFEA
 20468                           fsr0l	equ	0xFE9
 20469                           wreg	equ	0xFE8
 20470                           postdec1	equ	0xFE5
 20471                           fsr1h	equ	0xFE2
 20472                           fsr1l	equ	0xFE1
 20473                           indf2	equ	0xFDF
 20474                           postinc2	equ	0xFDE
 20475                           postdec2	equ	0xFDD
 20476                           fsr2h	equ	0xFDA
 20477                           fsr2l	equ	0xFD9
 20478                           status	equ	0xFD8
 20479                           
 20480 ;; *************** function i2___wmul *****************
 20481 ;; Defined at:
 20482 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
 20483 ;; Parameters:    Size  Location     Type
 20484 ;;  multiplier      2    0[COMRAM] unsigned int 
 20485 ;;  multiplicand    2    2[COMRAM] unsigned int 
 20486 ;; Auto vars:     Size  Location     Type
 20487 ;;  __wmul          2    4[COMRAM] unsigned int 
 20488 ;; Return value:  Size  Location     Type
 20489 ;;                  2    0[COMRAM] unsigned int 
 20490 ;; Registers used:
 20491 ;;		wreg, status,2, status,0, prodl, prodh
 20492 ;; Tracked objects:
 20493 ;;		On entry : 0/0
 20494 ;;		On exit  : 0/0
 20495 ;;		Unchanged: 0/0
 20496 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20497 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20498 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20499 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20500 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20501 ;;Total ram usage:        6 bytes
 20502 ;; Hardware stack levels used:    1
 20503 ;; This function calls:
 20504 ;;		Nothing
 20505 ;; This function is called by:
 20506 ;;		i2_delay_ms
 20507 ;; This function uses a non-reentrant model
 20508 ;;
 20509                           
 20510                           	psect	text98
 20511  0049AE                     __ptext98:
 20512                           	opt stack 0
 20513  0049AE                     i2___wmul:
 20514                           	opt stack 17
 20515                           
 20516                           ;incstack = 0
 20517  0049AE  5001               	movf	i2___wmul@multiplier,w,c
 20518  0049B0  0203               	mulwf	i2___wmul@multiplicand,c
 20519  0049B2  CFF3 F005          	movff	prodl,i2___wmul@product
 20520  0049B6  CFF4 F006          	movff	prodh,i2___wmul@product+1
 20521  0049BA  5001               	movf	i2___wmul@multiplier,w,c
 20522  0049BC  0204               	mulwf	i2___wmul@multiplicand+1,c
 20523  0049BE  50F3               	movf	prodl,w,c
 20524  0049C0  2606               	addwf	i2___wmul@product+1,f,c
 20525  0049C2  5002               	movf	i2___wmul@multiplier+1,w,c
 20526  0049C4  0203               	mulwf	i2___wmul@multiplicand,c
 20527  0049C6  50F3               	movf	prodl,w,c
 20528  0049C8  2606               	addwf	i2___wmul@product+1,f,c
 20529  0049CA  C005  F001         	movff	i2___wmul@product,?i2___wmul
 20530  0049CE  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 20531  0049D2  D000               	goto	i2l1002
 20532  0049D4                     i2l1002:
 20533  0049D4  0012               	return		;funcret
 20534  0049D6                     __end_ofi2___wmul:
 20535                           	opt stack 0
 20536                           pclatu	equ	0xFFB
 20537                           pclath	equ	0xFFA
 20538                           tblptru	equ	0xFF8
 20539                           tblptrh	equ	0xFF7
 20540                           tblptrl	equ	0xFF6
 20541                           tablat	equ	0xFF5
 20542                           prodh	equ	0xFF4
 20543                           prodl	equ	0xFF3
 20544                           intcon	equ	0xFF2
 20545                           intcon2	equ	0xFF1
 20546                           intcon3	equ	0xFF0
 20547                           postinc0	equ	0xFEE
 20548                           fsr0h	equ	0xFEA
 20549                           fsr0l	equ	0xFE9
 20550                           wreg	equ	0xFE8
 20551                           postdec1	equ	0xFE5
 20552                           fsr1h	equ	0xFE2
 20553                           fsr1l	equ	0xFE1
 20554                           indf2	equ	0xFDF
 20555                           postinc2	equ	0xFDE
 20556                           postdec2	equ	0xFDD
 20557                           fsr2h	equ	0xFDA
 20558                           fsr2l	equ	0xFD9
 20559                           status	equ	0xFD8
 20560                           
 20561 ;; *************** function i2_I2C_Write *****************
 20562 ;; Defined at:
 20563 ;;		line 46 in file "softi2c.inc"
 20564 ;; Parameters:    Size  Location     Type
 20565 ;;  outByte         1    wreg     unsigned char 
 20566 ;; Auto vars:     Size  Location     Type
 20567 ;;  outByte         1    0[COMRAM] unsigned char 
 20568 ;;  I2C_Write       1    1[COMRAM] unsigned char 
 20569 ;; Return value:  Size  Location     Type
 20570 ;;		None               void
 20571 ;; Registers used:
 20572 ;;		wreg, status,2, status,0, cstack
 20573 ;; Tracked objects:
 20574 ;;		On entry : 0/0
 20575 ;;		On exit  : 0/0
 20576 ;;		Unchanged: 0/0
 20577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20578 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20579 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20580 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20581 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20582 ;;Total ram usage:        2 bytes
 20583 ;; Hardware stack levels used:    1
 20584 ;; Hardware stack levels required when called:    1
 20585 ;; This function calls:
 20586 ;;		i2_i2cHighScl
 20587 ;;		i2_i2cHighSda
 20588 ;;		i2_i2cLowScl
 20589 ;;		i2_i2cLowSda
 20590 ;; This function is called by:
 20591 ;;		i2_DS3231_Turn_Off_Alarm
 20592 ;; This function uses a non-reentrant model
 20593 ;;
 20594                           
 20595                           	psect	text99
 20596  0046E2                     __ptext99:
 20597                           	opt stack 0
 20598  0046E2                     i2_I2C_Write:
 20599                           	opt stack 17
 20600                           
 20601                           ;incstack = 0
 20602                           ;i2I2C_Write@outByte stored from wreg
 20603  0046E2  6E01               	movwf	i2I2C_Write@outByte,c
 20604                           
 20605                           ;softi2c.inc: 48: unsigned char n;
 20606                           ;softi2c.inc: 49: for(n=0; n<8; n++)
 20607  0046E4  0E00               	movlw	0
 20608  0046E6  6E02               	movwf	i2I2C_Write@n,c
 20609  0046E8                     i2l5326:
 20610  0046E8  0E07               	movlw	7
 20611  0046EA  6402               	cpfsgt	i2I2C_Write@n,c
 20612  0046EC  D001               	goto	i2l510
 20613  0046EE  D011               	goto	i2l5344
 20614  0046F0                     i2l510:
 20615                           
 20616                           ;softi2c.inc: 50: {
 20617                           ;softi2c.inc: 51: if(outByte&0x80) i2cHighSda();
 20618  0046F0  AE01               	btfss	i2I2C_Write@outByte,7,c
 20619  0046F2  D003               	goto	i2l5332
 20620  0046F4  EC50  F026         	call	i2_i2cHighSda	;wreg free
 20621  0046F8  D003               	goto	i2l5334
 20622  0046FA                     i2l5332:
 20623                           
 20624                           ;softi2c.inc: 52: else i2cLowSda();
 20625  0046FA  EC3F  F026         	call	i2_i2cLowSda	;wreg free
 20626  0046FE  D000               	goto	i2l5334
 20627  004700                     i2l5334:
 20628                           
 20629                           ;softi2c.inc: 53: i2cHighScl();
 20630  004700  EC2A  F026         	call	i2_i2cHighScl	;wreg free
 20631                           
 20632                           ;softi2c.inc: 54: i2cLowScl();
 20633  004704  EC4C  F026         	call	i2_i2cLowScl	;wreg free
 20634                           
 20635                           ;softi2c.inc: 55: outByte = outByte << 1;
 20636  004708  5001               	movf	i2I2C_Write@outByte,w,c
 20637  00470A  2401               	addwf	i2I2C_Write@outByte,w,c
 20638  00470C  6E01               	movwf	i2I2C_Write@outByte,c
 20639  00470E  2A02               	incf	i2I2C_Write@n,f,c
 20640  004710  D7EB               	goto	i2l5326
 20641  004712                     i2l5344:
 20642                           
 20643                           ;softi2c.inc: 56: }
 20644                           ;softi2c.inc: 57: i2cHighSda();
 20645  004712  EC50  F026         	call	i2_i2cHighSda	;wreg free
 20646                           
 20647                           ;softi2c.inc: 58: i2cHighScl();
 20648  004716  EC2A  F026         	call	i2_i2cHighScl	;wreg free
 20649                           
 20650                           ;softi2c.inc: 59: i2cLowScl();
 20651  00471A  EC4C  F026         	call	i2_i2cLowScl	;wreg free
 20652  00471E  0012               	return		;funcret
 20653  004720                     __end_ofi2_I2C_Write:
 20654                           	opt stack 0
 20655                           pclatu	equ	0xFFB
 20656                           pclath	equ	0xFFA
 20657                           tblptru	equ	0xFF8
 20658                           tblptrh	equ	0xFF7
 20659                           tblptrl	equ	0xFF6
 20660                           tablat	equ	0xFF5
 20661                           prodh	equ	0xFF4
 20662                           prodl	equ	0xFF3
 20663                           intcon	equ	0xFF2
 20664                           intcon2	equ	0xFF1
 20665                           intcon3	equ	0xFF0
 20666                           postinc0	equ	0xFEE
 20667                           fsr0h	equ	0xFEA
 20668                           fsr0l	equ	0xFE9
 20669                           wreg	equ	0xFE8
 20670                           postdec1	equ	0xFE5
 20671                           fsr1h	equ	0xFE2
 20672                           fsr1l	equ	0xFE1
 20673                           indf2	equ	0xFDF
 20674                           postinc2	equ	0xFDE
 20675                           postdec2	equ	0xFDD
 20676                           fsr2h	equ	0xFDA
 20677                           fsr2l	equ	0xFD9
 20678                           status	equ	0xFD8
 20679                           
 20680 ;; *************** function i2_I2C_Stop *****************
 20681 ;; Defined at:
 20682 ;;		line 93 in file "softi2c.inc"
 20683 ;; Parameters:    Size  Location     Type
 20684 ;;		None
 20685 ;; Auto vars:     Size  Location     Type
 20686 ;;		None
 20687 ;; Return value:  Size  Location     Type
 20688 ;;		None               void
 20689 ;; Registers used:
 20690 ;;		wreg, cstack
 20691 ;; Tracked objects:
 20692 ;;		On entry : 0/0
 20693 ;;		On exit  : 0/0
 20694 ;;		Unchanged: 0/0
 20695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20696 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20697 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20698 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20699 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20700 ;;Total ram usage:        0 bytes
 20701 ;; Hardware stack levels used:    1
 20702 ;; Hardware stack levels required when called:    1
 20703 ;; This function calls:
 20704 ;;		i2_i2cHighScl
 20705 ;;		i2_i2cHighSda
 20706 ;;		i2_i2cLowScl
 20707 ;;		i2_i2cLowSda
 20708 ;; This function is called by:
 20709 ;;		i2_DS3231_Turn_Off_Alarm
 20710 ;; This function uses a non-reentrant model
 20711 ;;
 20712                           
 20713                           	psect	text100
 20714  004BDE                     __ptext100:
 20715                           	opt stack 0
 20716  004BDE                     i2_I2C_Stop:
 20717                           	opt stack 17
 20718                           
 20719                           ;softi2c.inc: 95: i2cLowScl();
 20720                           
 20721                           ;incstack = 0
 20722  004BDE  EC4C  F026         	call	i2_i2cLowScl	;wreg free
 20723                           
 20724                           ;softi2c.inc: 96: i2cLowSda();
 20725  004BE2  EC3F  F026         	call	i2_i2cLowSda	;wreg free
 20726                           
 20727                           ;softi2c.inc: 97: i2cHighScl();
 20728  004BE6  EC2A  F026         	call	i2_i2cHighScl	;wreg free
 20729                           
 20730                           ;softi2c.inc: 98: i2cHighSda();
 20731  004BEA  EC50  F026         	call	i2_i2cHighSda	;wreg free
 20732  004BEE  0012               	return		;funcret
 20733  004BF0                     __end_ofi2_I2C_Stop:
 20734                           	opt stack 0
 20735                           pclatu	equ	0xFFB
 20736                           pclath	equ	0xFFA
 20737                           tblptru	equ	0xFF8
 20738                           tblptrh	equ	0xFF7
 20739                           tblptrl	equ	0xFF6
 20740                           tablat	equ	0xFF5
 20741                           prodh	equ	0xFF4
 20742                           prodl	equ	0xFF3
 20743                           intcon	equ	0xFF2
 20744                           intcon2	equ	0xFF1
 20745                           intcon3	equ	0xFF0
 20746                           postinc0	equ	0xFEE
 20747                           fsr0h	equ	0xFEA
 20748                           fsr0l	equ	0xFE9
 20749                           wreg	equ	0xFE8
 20750                           postdec1	equ	0xFE5
 20751                           fsr1h	equ	0xFE2
 20752                           fsr1l	equ	0xFE1
 20753                           indf2	equ	0xFDF
 20754                           postinc2	equ	0xFDE
 20755                           postdec2	equ	0xFDD
 20756                           fsr2h	equ	0xFDA
 20757                           fsr2l	equ	0xFD9
 20758                           status	equ	0xFD8
 20759                           
 20760 ;; *************** function i2_I2C_Start *****************
 20761 ;; Defined at:
 20762 ;;		line 76 in file "softi2c.inc"
 20763 ;; Parameters:    Size  Location     Type
 20764 ;;		None
 20765 ;; Auto vars:     Size  Location     Type
 20766 ;;		None
 20767 ;; Return value:  Size  Location     Type
 20768 ;;		None               void
 20769 ;; Registers used:
 20770 ;;		wreg, cstack
 20771 ;; Tracked objects:
 20772 ;;		On entry : 0/0
 20773 ;;		On exit  : 0/0
 20774 ;;		Unchanged: 0/0
 20775 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20776 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20777 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20778 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20779 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20780 ;;Total ram usage:        0 bytes
 20781 ;; Hardware stack levels used:    1
 20782 ;; Hardware stack levels required when called:    1
 20783 ;; This function calls:
 20784 ;;		i2_i2cHighScl
 20785 ;;		i2_i2cHighSda
 20786 ;;		i2_i2cLowScl
 20787 ;;		i2_i2cLowSda
 20788 ;; This function is called by:
 20789 ;;		i2_DS3231_Turn_Off_Alarm
 20790 ;; This function uses a non-reentrant model
 20791 ;;
 20792                           
 20793                           	psect	text101
 20794  004BF0                     __ptext101:
 20795                           	opt stack 0
 20796  004BF0                     i2_I2C_Start:
 20797                           	opt stack 17
 20798                           
 20799                           ;softi2c.inc: 78: i2cHighSda();
 20800                           
 20801                           ;incstack = 0
 20802  004BF0  EC50  F026         	call	i2_i2cHighSda	;wreg free
 20803                           
 20804                           ;softi2c.inc: 79: i2cHighScl();
 20805  004BF4  EC2A  F026         	call	i2_i2cHighScl	;wreg free
 20806                           
 20807                           ;softi2c.inc: 80: i2cLowSda();
 20808  004BF8  EC3F  F026         	call	i2_i2cLowSda	;wreg free
 20809                           
 20810                           ;softi2c.inc: 81: i2cLowScl();
 20811  004BFC  EC4C  F026         	call	i2_i2cLowScl	;wreg free
 20812  004C00  0012               	return		;funcret
 20813  004C02                     __end_ofi2_I2C_Start:
 20814                           	opt stack 0
 20815                           pclatu	equ	0xFFB
 20816                           pclath	equ	0xFFA
 20817                           tblptru	equ	0xFF8
 20818                           tblptrh	equ	0xFF7
 20819                           tblptrl	equ	0xFF6
 20820                           tablat	equ	0xFF5
 20821                           prodh	equ	0xFF4
 20822                           prodl	equ	0xFF3
 20823                           intcon	equ	0xFF2
 20824                           intcon2	equ	0xFF1
 20825                           intcon3	equ	0xFF0
 20826                           postinc0	equ	0xFEE
 20827                           fsr0h	equ	0xFEA
 20828                           fsr0l	equ	0xFE9
 20829                           wreg	equ	0xFE8
 20830                           postdec1	equ	0xFE5
 20831                           fsr1h	equ	0xFE2
 20832                           fsr1l	equ	0xFE1
 20833                           indf2	equ	0xFDF
 20834                           postinc2	equ	0xFDE
 20835                           postdec2	equ	0xFDD
 20836                           fsr2h	equ	0xFDA
 20837                           fsr2l	equ	0xFD9
 20838                           status	equ	0xFD8
 20839                           
 20840 ;; *************** function i2_i2cLowSda *****************
 20841 ;; Defined at:
 20842 ;;		line 107 in file "softi2c.inc"
 20843 ;; Parameters:    Size  Location     Type
 20844 ;;		None
 20845 ;; Auto vars:     Size  Location     Type
 20846 ;;		None
 20847 ;; Return value:  Size  Location     Type
 20848 ;;		None               void
 20849 ;; Registers used:
 20850 ;;		None
 20851 ;; Tracked objects:
 20852 ;;		On entry : 0/0
 20853 ;;		On exit  : 0/0
 20854 ;;		Unchanged: 0/0
 20855 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20856 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20857 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20858 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20859 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20860 ;;Total ram usage:        0 bytes
 20861 ;; Hardware stack levels used:    1
 20862 ;; This function calls:
 20863 ;;		Nothing
 20864 ;; This function is called by:
 20865 ;;		i2_I2C_Write
 20866 ;;		i2_I2C_Start
 20867 ;;		i2_I2C_Stop
 20868 ;; This function uses a non-reentrant model
 20869 ;;
 20870                           
 20871                           	psect	text102
 20872  004C7E                     __ptext102:
 20873                           	opt stack 0
 20874  004C7E                     i2_i2cLowSda:
 20875                           	opt stack 17
 20876                           
 20877                           ;softi2c.inc: 109: PORTBbits.RB4 = 0;
 20878                           
 20879                           ;incstack = 0
 20880  004C7E  9881               	bcf	3969,4,c	;volatile
 20881                           
 20882                           ;softi2c.inc: 110: TRISBbits.RB4 = 0;
 20883  004C80  9893               	bcf	3987,4,c	;volatile
 20884                           
 20885                           ;softi2c.inc: 111: _delay((unsigned long)((2)*(8000000/4000000.0)));
 20886  004C82  D000               	nop2		;2 cycle nop
 20887  004C84  D000               	nop2		;2 cycle nop
 20888  004C86  0012               	return		;funcret
 20889  004C88                     __end_ofi2_i2cLowSda:
 20890                           	opt stack 0
 20891                           pclatu	equ	0xFFB
 20892                           pclath	equ	0xFFA
 20893                           tblptru	equ	0xFF8
 20894                           tblptrh	equ	0xFF7
 20895                           tblptrl	equ	0xFF6
 20896                           tablat	equ	0xFF5
 20897                           prodh	equ	0xFF4
 20898                           prodl	equ	0xFF3
 20899                           intcon	equ	0xFF2
 20900                           intcon2	equ	0xFF1
 20901                           intcon3	equ	0xFF0
 20902                           postinc0	equ	0xFEE
 20903                           fsr0h	equ	0xFEA
 20904                           fsr0l	equ	0xFE9
 20905                           wreg	equ	0xFE8
 20906                           postdec1	equ	0xFE5
 20907                           fsr1h	equ	0xFE2
 20908                           fsr1l	equ	0xFE1
 20909                           indf2	equ	0xFDF
 20910                           postinc2	equ	0xFDE
 20911                           postdec2	equ	0xFDD
 20912                           fsr2h	equ	0xFDA
 20913                           fsr2l	equ	0xFD9
 20914                           status	equ	0xFD8
 20915                           
 20916 ;; *************** function i2_i2cLowScl *****************
 20917 ;; Defined at:
 20918 ;;		line 120 in file "softi2c.inc"
 20919 ;; Parameters:    Size  Location     Type
 20920 ;;		None
 20921 ;; Auto vars:     Size  Location     Type
 20922 ;;		None
 20923 ;; Return value:  Size  Location     Type
 20924 ;;		None               void
 20925 ;; Registers used:
 20926 ;;		None
 20927 ;; Tracked objects:
 20928 ;;		On entry : 0/0
 20929 ;;		On exit  : 0/0
 20930 ;;		Unchanged: 0/0
 20931 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20932 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20933 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20934 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20935 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20936 ;;Total ram usage:        0 bytes
 20937 ;; Hardware stack levels used:    1
 20938 ;; This function calls:
 20939 ;;		Nothing
 20940 ;; This function is called by:
 20941 ;;		i2_I2C_Write
 20942 ;;		i2_I2C_Start
 20943 ;;		i2_I2C_Stop
 20944 ;; This function uses a non-reentrant model
 20945 ;;
 20946                           
 20947                           	psect	text103
 20948  004C98                     __ptext103:
 20949                           	opt stack 0
 20950  004C98                     i2_i2cLowScl:
 20951                           	opt stack 17
 20952                           
 20953                           ;softi2c.inc: 122: PORTBbits.RB5 = 0;
 20954                           
 20955                           ;incstack = 0
 20956  004C98  9A81               	bcf	3969,5,c	;volatile
 20957                           
 20958                           ;softi2c.inc: 123: TRISBbits.RB5 = 0;
 20959  004C9A  9A93               	bcf	3987,5,c	;volatile
 20960                           
 20961                           ;softi2c.inc: 124: _delay((unsigned long)((1)*(8000000/4000000.0)));
 20962  004C9C  D000               	nop2		;2 cycle nop
 20963  004C9E  0012               	return		;funcret
 20964  004CA0                     __end_ofi2_i2cLowScl:
 20965                           	opt stack 0
 20966                           pclatu	equ	0xFFB
 20967                           pclath	equ	0xFFA
 20968                           tblptru	equ	0xFF8
 20969                           tblptrh	equ	0xFF7
 20970                           tblptrl	equ	0xFF6
 20971                           tablat	equ	0xFF5
 20972                           prodh	equ	0xFF4
 20973                           prodl	equ	0xFF3
 20974                           intcon	equ	0xFF2
 20975                           intcon2	equ	0xFF1
 20976                           intcon3	equ	0xFF0
 20977                           postinc0	equ	0xFEE
 20978                           fsr0h	equ	0xFEA
 20979                           fsr0l	equ	0xFE9
 20980                           wreg	equ	0xFE8
 20981                           postdec1	equ	0xFE5
 20982                           fsr1h	equ	0xFE2
 20983                           fsr1l	equ	0xFE1
 20984                           indf2	equ	0xFDF
 20985                           postinc2	equ	0xFDE
 20986                           postdec2	equ	0xFDD
 20987                           fsr2h	equ	0xFDA
 20988                           fsr2l	equ	0xFD9
 20989                           status	equ	0xFD8
 20990                           
 20991 ;; *************** function i2_i2cHighSda *****************
 20992 ;; Defined at:
 20993 ;;		line 101 in file "softi2c.inc"
 20994 ;; Parameters:    Size  Location     Type
 20995 ;;		None
 20996 ;; Auto vars:     Size  Location     Type
 20997 ;;		None
 20998 ;; Return value:  Size  Location     Type
 20999 ;;		None               void
 21000 ;; Registers used:
 21001 ;;		None
 21002 ;; Tracked objects:
 21003 ;;		On entry : 0/0
 21004 ;;		On exit  : 0/0
 21005 ;;		Unchanged: 0/0
 21006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21007 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21008 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21009 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21010 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21011 ;;Total ram usage:        0 bytes
 21012 ;; Hardware stack levels used:    1
 21013 ;; This function calls:
 21014 ;;		Nothing
 21015 ;; This function is called by:
 21016 ;;		i2_I2C_Write
 21017 ;;		i2_I2C_Start
 21018 ;;		i2_I2C_Stop
 21019 ;; This function uses a non-reentrant model
 21020 ;;
 21021                           
 21022                           	psect	text104
 21023  004CA0                     __ptext104:
 21024                           	opt stack 0
 21025  004CA0                     i2_i2cHighSda:
 21026                           	opt stack 17
 21027                           
 21028                           ;softi2c.inc: 103: TRISBbits.RB4 = 1;
 21029                           
 21030                           ;incstack = 0
 21031  004CA0  8893               	bsf	3987,4,c	;volatile
 21032                           
 21033                           ;softi2c.inc: 104: _delay((unsigned long)((2)*(8000000/4000000.0)));
 21034  004CA2  D000               	nop2		;2 cycle nop
 21035  004CA4  D000               	nop2		;2 cycle nop
 21036  004CA6  0012               	return		;funcret
 21037  004CA8                     __end_ofi2_i2cHighSda:
 21038                           	opt stack 0
 21039                           pclatu	equ	0xFFB
 21040                           pclath	equ	0xFFA
 21041                           tblptru	equ	0xFF8
 21042                           tblptrh	equ	0xFF7
 21043                           tblptrl	equ	0xFF6
 21044                           tablat	equ	0xFF5
 21045                           prodh	equ	0xFF4
 21046                           prodl	equ	0xFF3
 21047                           intcon	equ	0xFF2
 21048                           intcon2	equ	0xFF1
 21049                           intcon3	equ	0xFF0
 21050                           postinc0	equ	0xFEE
 21051                           fsr0h	equ	0xFEA
 21052                           fsr0l	equ	0xFE9
 21053                           wreg	equ	0xFE8
 21054                           postdec1	equ	0xFE5
 21055                           fsr1h	equ	0xFE2
 21056                           fsr1l	equ	0xFE1
 21057                           indf2	equ	0xFDF
 21058                           postinc2	equ	0xFDE
 21059                           postdec2	equ	0xFDD
 21060                           fsr2h	equ	0xFDA
 21061                           fsr2l	equ	0xFD9
 21062                           status	equ	0xFD8
 21063                           
 21064 ;; *************** function i2_i2cHighScl *****************
 21065 ;; Defined at:
 21066 ;;		line 114 in file "softi2c.inc"
 21067 ;; Parameters:    Size  Location     Type
 21068 ;;		None
 21069 ;; Auto vars:     Size  Location     Type
 21070 ;;		None
 21071 ;; Return value:  Size  Location     Type
 21072 ;;		None               void
 21073 ;; Registers used:
 21074 ;;		wreg
 21075 ;; Tracked objects:
 21076 ;;		On entry : 0/0
 21077 ;;		On exit  : 0/0
 21078 ;;		Unchanged: 0/0
 21079 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21080 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21081 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21082 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21083 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21084 ;;Total ram usage:        0 bytes
 21085 ;; Hardware stack levels used:    1
 21086 ;; This function calls:
 21087 ;;		Nothing
 21088 ;; This function is called by:
 21089 ;;		i2_I2C_Write
 21090 ;;		i2_I2C_Start
 21091 ;;		i2_I2C_Stop
 21092 ;; This function uses a non-reentrant model
 21093 ;;
 21094                           
 21095                           	psect	text105
 21096  004C54                     __ptext105:
 21097                           	opt stack 0
 21098  004C54                     i2_i2cHighScl:
 21099                           	opt stack 17
 21100                           
 21101                           ;softi2c.inc: 116: TRISBbits.RB5 = 1;
 21102                           
 21103                           ;incstack = 0
 21104  004C54  8A93               	bsf	3987,5,c	;volatile
 21105                           
 21106                           ;softi2c.inc: 117: _delay((unsigned long)((10)*(8000000/4000000.0)));
 21107  004C56  0E06               	movlw	6
 21108  004C58                     i2u965_47:
 21109  004C58  2EE8               	decfsz	wreg,f,c
 21110  004C5A  D7FE               	goto	i2u965_47
 21111  004C5C  D000               	nop2		;nop
 21112  004C5E  0012               	return		;funcret
 21113  004C60                     __end_ofi2_i2cHighScl:
 21114                           	opt stack 0
 21115                           pclatu	equ	0xFFB
 21116                           pclath	equ	0xFFA
 21117                           tblptru	equ	0xFF8
 21118                           tblptrh	equ	0xFF7
 21119                           tblptrl	equ	0xFF6
 21120                           tablat	equ	0xFF5
 21121                           prodh	equ	0xFF4
 21122                           prodl	equ	0xFF3
 21123                           intcon	equ	0xFF2
 21124                           intcon2	equ	0xFF1
 21125                           intcon3	equ	0xFF0
 21126                           postinc0	equ	0xFEE
 21127                           fsr0h	equ	0xFEA
 21128                           fsr0l	equ	0xFE9
 21129                           wreg	equ	0xFE8
 21130                           postdec1	equ	0xFE5
 21131                           fsr1h	equ	0xFE2
 21132                           fsr1l	equ	0xFE1
 21133                           indf2	equ	0xFDF
 21134                           postinc2	equ	0xFDE
 21135                           postdec2	equ	0xFDD
 21136                           fsr2h	equ	0xFDA
 21137                           fsr2l	equ	0xFD9
 21138                           status	equ	0xFD8
 21139                           
 21140 ;; *************** function _turn_off_sound *****************
 21141 ;; Defined at:
 21142 ;;		line 2393 in file "lab_final_alt.c"
 21143 ;; Parameters:    Size  Location     Type
 21144 ;;		None
 21145 ;; Auto vars:     Size  Location     Type
 21146 ;;		None
 21147 ;; Return value:  Size  Location     Type
 21148 ;;		None               void
 21149 ;; Registers used:
 21150 ;;		wreg, status,2
 21151 ;; Tracked objects:
 21152 ;;		On entry : 0/0
 21153 ;;		On exit  : 0/0
 21154 ;;		Unchanged: 0/0
 21155 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21156 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21157 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21158 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21159 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21160 ;;Total ram usage:        0 bytes
 21161 ;; Hardware stack levels used:    1
 21162 ;; This function calls:
 21163 ;;		Nothing
 21164 ;; This function is called by:
 21165 ;;		_INT0_isr
 21166 ;; This function uses a non-reentrant model
 21167 ;;
 21168                           
 21169                           	psect	text106
 21170  004CA8                     __ptext106:
 21171                           	opt stack 0
 21172  004CA8                     _turn_off_sound:
 21173                           	opt stack 19
 21174                           
 21175                           ;lab_final_alt.c: 2395: CCP2CON = 0x0;
 21176                           
 21177                           ;incstack = 0
 21178  004CA8  0E00               	movlw	0
 21179  004CAA  6EBA               	movwf	4026,c	;volatile
 21180                           
 21181                           ;lab_final_alt.c: 2396: PORTBbits.RB3 = 0;
 21182  004CAC  9681               	bcf	3969,3,c	;volatile
 21183  004CAE  0012               	return		;funcret
 21184  004CB0                     __end_of_turn_off_sound:
 21185                           	opt stack 0
 21186                           pclatu	equ	0xFFB
 21187                           pclath	equ	0xFFA
 21188                           tblptru	equ	0xFF8
 21189                           tblptrh	equ	0xFF7
 21190                           tblptrl	equ	0xFF6
 21191                           tablat	equ	0xFF5
 21192                           prodh	equ	0xFF4
 21193                           prodl	equ	0xFF3
 21194                           intcon	equ	0xFF2
 21195                           intcon2	equ	0xFF1
 21196                           intcon3	equ	0xFF0
 21197                           postinc0	equ	0xFEE
 21198                           fsr0h	equ	0xFEA
 21199                           fsr0l	equ	0xFE9
 21200                           wreg	equ	0xFE8
 21201                           postdec1	equ	0xFE5
 21202                           fsr1h	equ	0xFE2
 21203                           fsr1l	equ	0xFE1
 21204                           indf2	equ	0xFDF
 21205                           postinc2	equ	0xFDE
 21206                           postdec2	equ	0xFDD
 21207                           fsr2h	equ	0xFDA
 21208                           fsr2l	equ	0xFD9
 21209                           status	equ	0xFD8
 21210                           pclatu	equ	0xFFB
 21211                           pclath	equ	0xFFA
 21212                           tblptru	equ	0xFF8
 21213                           tblptrh	equ	0xFF7
 21214                           tblptrl	equ	0xFF6
 21215                           tablat	equ	0xFF5
 21216                           prodh	equ	0xFF4
 21217                           prodl	equ	0xFF3
 21218                           intcon	equ	0xFF2
 21219                           intcon2	equ	0xFF1
 21220                           intcon3	equ	0xFF0
 21221                           postinc0	equ	0xFEE
 21222                           fsr0h	equ	0xFEA
 21223                           fsr0l	equ	0xFE9
 21224                           wreg	equ	0xFE8
 21225                           postdec1	equ	0xFE5
 21226                           fsr1h	equ	0xFE2
 21227                           fsr1l	equ	0xFE1
 21228                           indf2	equ	0xFDF
 21229                           postinc2	equ	0xFDE
 21230                           postdec2	equ	0xFDD
 21231                           fsr2h	equ	0xFDA
 21232                           fsr2l	equ	0xFD9
 21233                           status	equ	0xFD8
 21234                           
 21235                           	psect	rparam
 21236  0000                     pclatu	equ	0xFFB
 21237                           pclath	equ	0xFFA
 21238                           tblptru	equ	0xFF8
 21239                           tblptrh	equ	0xFF7
 21240                           tblptrl	equ	0xFF6
 21241                           tablat	equ	0xFF5
 21242                           prodh	equ	0xFF4
 21243                           prodl	equ	0xFF3
 21244                           intcon	equ	0xFF2
 21245                           intcon2	equ	0xFF1
 21246                           intcon3	equ	0xFF0
 21247                           postinc0	equ	0xFEE
 21248                           fsr0h	equ	0xFEA
 21249                           fsr0l	equ	0xFE9
 21250                           wreg	equ	0xFE8
 21251                           postdec1	equ	0xFE5
 21252                           fsr1h	equ	0xFE2
 21253                           fsr1l	equ	0xFE1
 21254                           indf2	equ	0xFDF
 21255                           postinc2	equ	0xFDE
 21256                           postdec2	equ	0xFDD
 21257                           fsr2h	equ	0xFDA
 21258                           fsr2l	equ	0xFD9
 21259                           status	equ	0xFD8


Data Sizes:
    Strings     213
    Constant    625
    Data        100
    BSS         57
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     72     100
    BANK0           128     41     121
    BANK1           256     26      75
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    nbr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), setup_heater_S_text(BANK0[3]), setup_alarm_time(BANK1[9]), setup_date(BANK1[9]), 
		 -> setup_time(BANK0[9]), heater_S_text(BANK0[3]), heater_text(BANK0[4]), LED_Int_text(BANK0[3]), 
		 -> alarm_text(BANK0[4]), date(BANK0[9]), time(BANK0[9]), tempF(BANK0[3]), 
		 -> tempC(BANK0[3]), buffer(BANK1[31]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), setup_heater_S_text(BANK0[3]), setup_alarm_time(BANK1[9]), setup_date(BANK1[9]), 
		 -> setup_time(BANK0[9]), heater_S_text(BANK0[3]), heater_text(BANK0[4]), LED_Int_text(BANK0[3]), 
		 -> alarm_text(BANK0[4]), date(BANK0[9]), time(BANK0[9]), tempF(BANK0[3]), 
		 -> tempC(BANK0[3]), buffer(BANK1[31]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 23
		 -> STR_30(CODE[2]), STR_29(CODE[16]), STR_28(CODE[7]), STR_27(CODE[8]), 
		 -> STR_26(CODE[23]), STR_25(CODE[5]), STR_24(CODE[11]), STR_23(CODE[23]), 
		 -> STR_22(CODE[5]), STR_21(CODE[5]), STR_20(CODE[12]), STR_19(CODE[23]), 
		 -> STR_18(CODE[4]), STR_17(CODE[4]), STR_16(CODE[4]), STR_15(CODE[4]), 
		 -> STR_14(CODE[2]), STR_13(CODE[16]), STR_12(CODE[7]), STR_11(CODE[4]), 
		 -> STR_10(CODE[6]), STR_9(CODE[5]), STR_8(CODE[5]), STR_7(CODE[2]), 
		 -> STR_6(CODE[3]), STR_5(CODE[13]), STR_4(CODE[23]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), heater_text(BANK0[4]), alarm_text(BANK0[4]), buffer(BANK1[31]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), heater_text(BANK0[4]), alarm_text(BANK0[4]), buffer(BANK1[31]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 45
		 -> STR_3(CODE[11]), STR_2(CODE[19]), STR_1(CODE[45]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), heater_text(BANK0[4]), alarm_text(BANK0[4]), buffer(BANK1[31]), 

    txt	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK1[31]), 

    drawtext@_text	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), setup_heater_S_text(BANK0[3]), setup_alarm_time(BANK1[9]), setup_date(BANK1[9]), 
		 -> setup_time(BANK0[9]), heater_S_text(BANK0[3]), heater_text(BANK0[4]), LED_Int_text(BANK0[3]), 
		 -> alarm_text(BANK0[4]), date(BANK0[9]), time(BANK0[9]), tempF(BANK0[3]), 
		 -> tempC(BANK0[3]), buffer(BANK1[31]), 


Critical Paths under _main in COMRAM

    _printf->_fround
    _scale->___ftmul
    _fround->___ftmul
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___fttol->_scale
    ___ftadd->_fround
    _init_UART->_OpenUSART
    _Rcmd3->_delay_ms
    _Rcmd2red->_write_command
    _Rcmd2red->_write_data
    _Rcmd1->_delay_ms
    _Read_Volt_In->___ftdiv
    ___lwtoft->___ftpack
    ___ftmul->___wmul
    ___ftdiv->___ftmul
    _LCD_Reset->_delay_ms
    _Do_Update_Main_Screen->_drawtext
    _DS3231_Read_Temp->_delay_ms
    _Update_Setup_Time_Screen->_drawtext
    _Initialize_Setup_Time_Screen->_drawtext
    _DS3231_Write_Time->_delay_ms
    _Update_Setup_Heater_Screen->_drawtext
    _Initialize_Setup_Heater_Screen->_drawtext
    _dec_2_bcd->___awdiv
    _Update_Setup_Screen_Cursor->_fillRect
    _Update_Setup_Alarm_Screen->_drawtext
    ___awdiv->___awmod
    _Initialize_Setup_Alarm_Screen->_drawtext
    _Initialize_Main_Screen->_drawtext
    _fillScreen->_fillRectangle
    _fillRectangle->_setAddrWindow
    _drawtext->_drawChar
    _drawChar->_fillRect
    _fillRect->_drawFastVLine
    _drawFastVLine->_setAddrWindow
    _drawCircle->_drawPixel
    _drawPixel->_setAddrWindow
    _setAddrWindow->_write_command
    _setAddrWindow->_write_data
    _write_data->_spiwrite
    _write_command->_spiwrite
    _DS3231_Read_Time->_delay_ms
    _Do_LED_Up->_SPI_out
    _Do_LED_Out->___ftge
    ___lbtoft->___ftpack
    ___ftge->___lbtoft
    _Do_LED_Down->_SPI_out
    _DS3231_Turn_On_Alarm->_delay_ms
    _DS3231_Turn_Off_Alarm->_delay_ms
    _DS3231_Init->_DS3231_Read_Alarm_1_Time
    _DS3231_Init->_DS3231_Write_Alarm_1_Time
    _I2C_Write_Address_Write_One_Byte->_I2C_Write
    _I2C_Write_Address_Read_One_Byte->_I2C_Read
    _DS3231_Write_Alarm_1_Time->_delay_ms
    _DS3231_Read_Alarm_1_Time->_delay_ms
    _delay_ms->___wmul
    ___wmul->___awdiv

Critical Paths under _chkisr in COMRAM

    _INT0_isr->i2_DS3231_Turn_Off_Alarm
    i2_DS3231_Turn_Off_Alarm->i2_delay_ms
    i2_delay_ms->i2___wmul

Critical Paths under _main in BANK0

    _main->_printf
    _printf->___ftsub
    ___ftsub->___ftadd
    _Read_Volt_In->___ftdiv
    _Do_Update_Main_Screen->_drawtext
    _Update_Setup_Time_Screen->_drawtext
    _Initialize_Setup_Time_Screen->_drawtext
    _Update_Setup_Heater_Screen->_drawtext
    _Initialize_Setup_Heater_Screen->_drawtext
    _Update_Setup_Alarm_Screen->_drawtext
    _Initialize_Setup_Alarm_Screen->_drawtext
    _Initialize_Main_Screen->_drawtext

Critical Paths under _chkisr in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_printf

Critical Paths under _chkisr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _chkisr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _chkisr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _chkisr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _chkisr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _chkisr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _chkisr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _chkisr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _chkisr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _chkisr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _chkisr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _chkisr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _chkisr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _chkisr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _chkisr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0  630167
                                             38 BANK0      3     3      0
                        _DS3231_Init
                   _DS3231_Read_Temp
                   _DS3231_Read_Time
              _DS3231_Turn_Off_Alarm
               _DS3231_Turn_On_Alarm
                        _Do_LED_Down
                         _Do_LED_Out
                          _Do_LED_Up
                _Do_Setup_Alarm_Time
               _Do_Setup_Heater_Temp
                      _Do_Setup_Time
              _Do_Update_Main_Screen
                           _I2C_Init
             _Initialize_Main_Screen
                          _LCD_Reset
                          _LED_Alarm
                       _Read_Volt_In
                            _SPI_out
            _TFT_GreenTab_Initialize
                            ___fttol
                     _gen_2khz_sound
                          _init_UART
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              52    38     14   61253
                                             18 BANK0     20     6     14
                                              0 BANK1     26    26      0
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _putch
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                               10     7      3   15759
                                             62 COMRAM     7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      31
                                             27 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      99
                                             27 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              13    10      3   15480
                                             62 COMRAM    10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         15     9      6     584
                                             27 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          12     6      6     803
                                             27 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    2355
                                             35 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     752
                                             40 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     761
                                             27 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     631
                                              0 BANK0     15    11      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    4079
                                             12 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    3763
                                              0 BANK0     12     6      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     130
                                             27 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (1) _init_UART                                            0     0      0     273
                          _OpenUSART
 ---------------------------------------------------------------------------------
 (2) _OpenUSART                                            3     1      2     273
                                             27 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _gen_2khz_sound                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TFT_GreenTab_Initialize                              0     0      0    9446
                              _Rcmd1
                           _Rcmd2red
                              _Rcmd3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (2) _Rcmd3                                                0     0      0    4593
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (2) _Rcmd2red                                             0     0      0     130
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (2) _Rcmd1                                                0     0      0    4593
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (1) _Read_Volt_In                                         3     3      0    9927
                                              6 BANK0      3     3      0
                       _Get_Full_ADC
                         _Select_ADC
                            ___ftdiv
                            ___ftmul
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3    2284
                                             35 COMRAM     3     0      3
                       _Get_Full_ADC (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    4716
                                             47 COMRAM    15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    2828
                                             62 COMRAM     9     3      6
                                              0 BANK0      6     6      0
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) _Select_ADC                                           1     1      0      31
                                             27 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _Get_Full_ADC                                         6     4      2      34
                                             27 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) _LED_Alarm                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LCD_Reset                                            0     0      0    4463
                           _delay_ms
 ---------------------------------------------------------------------------------
 (1) _I2C_Init                                             4     0      4      65
                                             27 COMRAM     4     0      4
                         _i2cHighScl
                         _i2cHighSda
 ---------------------------------------------------------------------------------
 (1) _Do_Update_Main_Screen                                0     0      0   47999
                   _DS3231_Read_Temp
                            ___awdiv
                            ___awmod
                             ___wmul
                           _drawtext
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _DS3231_Read_Temp                                     9     7      2    4992
                                             53 COMRAM     9     7      2
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
                           _delay_ms
 ---------------------------------------------------------------------------------
 (1) _Do_Setup_Time                                        7     7      0  147248
                                             15 BANK0      7     7      0
                   _DS3231_Read_Time
                  _DS3231_Write_Time
             _Initialize_Main_Screen
       _Initialize_Setup_Time_Screen
         _Update_Setup_Screen_Cursor
           _Update_Setup_Time_Screen
                          _bcd_2_dec
                          _dec_2_bcd
 ---------------------------------------------------------------------------------
 (2) _Update_Setup_Time_Screen                             0     0      0   36420
                            ___awdiv
                            ___awmod
                           _drawtext
 ---------------------------------------------------------------------------------
 (2) _Initialize_Setup_Time_Screen                         0     0      0   42824
                           _drawtext
                           _fillRect
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _DS3231_Write_Time                                    1     1      0    4627
                                             53 COMRAM     1     1      0
                          _I2C_Start
                          _I2C_Write
                           _delay_ms
 ---------------------------------------------------------------------------------
 (1) _Do_Setup_Heater_Temp                                 6     6      0  121235
                                             15 BANK0      6     6      0
             _Initialize_Main_Screen
     _Initialize_Setup_Heater_Screen
         _Update_Setup_Heater_Screen
 ---------------------------------------------------------------------------------
 (2) _Update_Setup_Heater_Screen                           0     0      0   36420
                            ___awdiv
                            ___awmod
                           _drawtext
 ---------------------------------------------------------------------------------
 (2) _Initialize_Setup_Heater_Screen                       0     0      0   42312
                         _drawCircle
                           _drawtext
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (1) _Do_Setup_Alarm_Time                                  7     7      0  152104
                                             15 BANK0      7     7      0
           _DS3231_Read_Alarm_1_Time
                   _DS3231_Read_Time
          _DS3231_Write_Alarm_1_Time
             _Initialize_Main_Screen
      _Initialize_Setup_Alarm_Screen
          _Update_Setup_Alarm_Screen
         _Update_Setup_Screen_Cursor
                          _bcd_2_dec
                          _dec_2_bcd
 ---------------------------------------------------------------------------------
 (2) _dec_2_bcd                                            7     5      2    7474
                                             41 COMRAM     7     5      2
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) _bcd_2_dec                                            7     5      2      96
                                             27 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (2) _Update_Setup_Screen_Cursor                           3     3      0    8278
                                             56 COMRAM     3     3      0
                           _fillRect
 ---------------------------------------------------------------------------------
 (2) _Update_Setup_Alarm_Screen                            0     0      0   36420
                            ___awdiv
                            ___awmod
                           _drawtext
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    3553
                                             27 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    3825
                                             33 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) _Initialize_Setup_Alarm_Screen                        0     0      0   42824
                           _drawtext
                           _fillRect
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (1) _Initialize_Main_Screen                               0     0      0   42312
                         _drawCircle
                           _drawtext
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               6     2      4    3619
                                             27 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _fillScreen                                           2     0      2    2387
                                             46 COMRAM     2     0      2
                      _fillRectangle
 ---------------------------------------------------------------------------------
 (3) _fillRectangle                                       12     7      5    2096
                                             34 COMRAM    12     7      5
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (2) _drawtext                                            17     9      8   29042
                                             67 COMRAM     2     2      0
                                              0 BANK0     15     7      8
                           _drawChar
                             _strlen
 ---------------------------------------------------------------------------------
 (3) _strlen                                               6     4      2     195
                                             27 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (3) _drawChar                                            11     4      7   16760
                                             56 COMRAM    11     4      7
                             ___wmul
                          _drawPixel
                           _fillRect
 ---------------------------------------------------------------------------------
 (4) _fillRect                                            11     6      5    7776
                                             45 COMRAM    11     6      5
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (5) _drawFastVLine                                       11     7      4    3102
                                             34 COMRAM    11     7      4
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (2) _drawCircle                                          20    12      8    7264
                                             38 COMRAM    20    12      8
                          _drawPixel
 ---------------------------------------------------------------------------------
 (4) _drawPixel                                            4     1      3    4207
                                             34 COMRAM     4     1      3
                      _setAddrWindow
                         _write_data
 ---------------------------------------------------------------------------------
 (4) _setAddrWindow                                        4     1      3    1034
                                             30 COMRAM     4     1      3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (2) _write_data                                           1     1      0      65
                                             29 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (2) _write_command                                        1     1      0      65
                                             29 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (3) _spiwrite                                             2     2      0      34
                                             27 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _DS3231_Read_Time                                     1     1      0    4856
                                             53 COMRAM     1     1      0
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
                           _delay_ms
 ---------------------------------------------------------------------------------
 (1) _Do_LED_Up                                            0     0      0     205
                            _SPI_out
 ---------------------------------------------------------------------------------
 (1) _Do_LED_Out                                           1     1      0    2968
                                             48 COMRAM     1     1      0
                             ___ftge
                           ___lbtoft
 ---------------------------------------------------------------------------------
 (2) ___lbtoft                                             4     1      3    2219
                                             35 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2188
                                             27 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     718
                                             39 COMRAM     9     3      6
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (1) _Do_LED_Down                                          0     0      0     205
                            _SPI_out
 ---------------------------------------------------------------------------------
 (1) _SPI_out                                              6     6      0     205
                                             27 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 (1) _DS3231_Turn_On_Alarm                                 1     1      0    4627
                                             53 COMRAM     1     1      0
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
                           _delay_ms
 ---------------------------------------------------------------------------------
 (1) _DS3231_Turn_Off_Alarm                                1     1      0    4627
                                             53 COMRAM     1     1      0
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
                           _delay_ms
 ---------------------------------------------------------------------------------
 (1) _DS3231_Init                                          2     2      0   10526
                                             54 COMRAM     2     2      0
           _DS3231_Read_Alarm_1_Time
          _DS3231_Write_Alarm_1_Time
    _I2C_Write_Address_Read_One_Byte
   _I2C_Write_Address_Write_One_Byte
 ---------------------------------------------------------------------------------
 (2) _I2C_Write_Address_Write_One_Byte                     3     1      2     356
                                             29 COMRAM     3     1      2
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Write_Address_Read_One_Byte                      3     2      1     523
                                             30 COMRAM     3     2      1
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (2) _DS3231_Write_Alarm_1_Time                            1     1      0    4627
                                             53 COMRAM     1     1      0
                          _I2C_Start
                          _I2C_Write
                           _delay_ms
 ---------------------------------------------------------------------------------
 (2) _DS3231_Read_Alarm_1_Time                             1     1      0    4856
                                             53 COMRAM     1     1      0
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _delay_ms                                             6     4      2    4463
                                             47 COMRAM     6     4      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    2968
                                             41 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) _I2C_Write                                            2     2      0     133
                                             27 COMRAM     2     2      0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (3) _I2C_Stop                                             0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (3) _I2C_Start                                            0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (3) _I2C_Read                                             3     3      0     198
                                             27 COMRAM     3     3      0
                             _i2cAck
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                            _i2cNack
 ---------------------------------------------------------------------------------
 (4) _i2cNack                                              0     0      0       0
                         _i2cHighScl
                          _i2cLowScl
 ---------------------------------------------------------------------------------
 (4) _i2cAck                                               0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (3) _I2C_ReStart                                          0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (4) _i2cLowSda                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _i2cLowScl                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _i2cHighSda                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _i2cHighScl                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _chkisr                                             14    14      0     637
                                             13 COMRAM    14    14      0
                           _INT0_isr
                           _INT1_isr
                           _INT2_isr
                         _TIMER1_isr
 ---------------------------------------------------------------------------------
 (11) _TIMER1_isr                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _INT2_isr                                            4     4      0     199
                                              0 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (11) _INT1_isr                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _INT0_isr                                            0     0      0     438
                     _turn_off_sound
            i2_DS3231_Turn_Off_Alarm
 ---------------------------------------------------------------------------------
 (12) i2_DS3231_Turn_Off_Alarm                             1     1      0     438
                                             12 COMRAM     1     1      0
                        i2_I2C_Start
                         i2_I2C_Stop
                        i2_I2C_Write
                         i2_delay_ms
 ---------------------------------------------------------------------------------
 (13) i2_delay_ms                                          6     4      2     325
                                              6 COMRAM     6     4      2
                           i2___wmul
 ---------------------------------------------------------------------------------
 (14) i2___wmul                                            6     2      4     209
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (13) i2_I2C_Write                                         2     2      0      91
                                              0 COMRAM     2     2      0
                       i2_i2cHighScl
                       i2_i2cHighSda
                        i2_i2cLowScl
                        i2_i2cLowSda
 ---------------------------------------------------------------------------------
 (13) i2_I2C_Stop                                          0     0      0       0
                       i2_i2cHighScl
                       i2_i2cHighSda
                        i2_i2cLowScl
                        i2_i2cLowSda
 ---------------------------------------------------------------------------------
 (13) i2_I2C_Start                                         0     0      0       0
                       i2_i2cHighScl
                       i2_i2cHighSda
                        i2_i2cLowScl
                        i2_i2cLowSda
 ---------------------------------------------------------------------------------
 (14) i2_i2cLowSda                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (14) i2_i2cLowScl                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (14) i2_i2cHighSda                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (14) i2_i2cHighScl                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _turn_off_sound                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DS3231_Init
     _DS3231_Read_Alarm_1_Time
       _I2C_ReStart
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Read
         _i2cAck
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cNack
           _i2cHighScl
           _i2cLowScl
       _I2C_Start
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Stop
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Write
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _delay_ms
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _DS3231_Write_Alarm_1_Time
       _I2C_Start
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Write
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _delay_ms
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _I2C_Write_Address_Read_One_Byte
       _I2C_ReStart
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Read
         _i2cAck
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cNack
           _i2cHighScl
           _i2cLowScl
       _I2C_Start
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Stop
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Write
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
     _I2C_Write_Address_Write_One_Byte
       _I2C_Start
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Stop
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Write
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
   _DS3231_Read_Temp
     _I2C_ReStart
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Read
       _i2cAck
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cNack
         _i2cHighScl
         _i2cLowScl
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _delay_ms
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   _DS3231_Read_Time
     _I2C_ReStart
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Read
       _i2cAck
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cNack
         _i2cHighScl
         _i2cLowScl
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _delay_ms
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   _DS3231_Turn_Off_Alarm
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _delay_ms
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   _DS3231_Turn_On_Alarm
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _delay_ms
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   _Do_LED_Down
     _SPI_out
   _Do_LED_Out
     ___ftge
       ___lbtoft (ARG)
         ___ftpack
     ___lbtoft
       ___ftpack
   _Do_LED_Up
     _SPI_out
   _Do_Setup_Alarm_Time
     _DS3231_Read_Alarm_1_Time
       _I2C_ReStart
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Read
         _i2cAck
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cNack
           _i2cHighScl
           _i2cLowScl
       _I2C_Start
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Stop
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Write
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _delay_ms
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _DS3231_Read_Time
       _I2C_ReStart
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Read
         _i2cAck
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cNack
           _i2cHighScl
           _i2cLowScl
       _I2C_Start
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Stop
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Write
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _delay_ms
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _DS3231_Write_Alarm_1_Time
       _I2C_Start
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Write
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _delay_ms
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _Initialize_Main_Screen
       _drawCircle
         _drawPixel
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_data
             _spiwrite
       _drawtext
         _drawChar
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
           _fillRect
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
         _strlen
       _fillScreen
         _fillRectangle
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
       _strcpy
     _Initialize_Setup_Alarm_Screen
       _drawtext
         _drawChar
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
           _fillRect
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
         _strlen
       _fillRect
         _drawFastVLine
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
       _fillScreen
         _fillRectangle
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
       _strcpy
     _Update_Setup_Alarm_Screen
       ___awdiv
         ___awmod (ARG)
       ___awmod
       _drawtext
         _drawChar
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
           _fillRect
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
         _strlen
     _Update_Setup_Screen_Cursor
       _fillRect
         _drawFastVLine
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
     _bcd_2_dec
     _dec_2_bcd
       ___awdiv
         ___awmod (ARG)
       ___awmod
   _Do_Setup_Heater_Temp
     _Initialize_Main_Screen
       _drawCircle
         _drawPixel
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_data
             _spiwrite
       _drawtext
         _drawChar
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
           _fillRect
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
         _strlen
       _fillScreen
         _fillRectangle
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
       _strcpy
     _Initialize_Setup_Heater_Screen
       _drawCircle
         _drawPixel
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_data
             _spiwrite
       _drawtext
         _drawChar
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
           _fillRect
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
         _strlen
       _fillScreen
         _fillRectangle
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
       _strcpy
     _Update_Setup_Heater_Screen
       ___awdiv
         ___awmod (ARG)
       ___awmod
       _drawtext
         _drawChar
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
           _fillRect
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
         _strlen
   _Do_Setup_Time
     _DS3231_Read_Time
       _I2C_ReStart
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Read
         _i2cAck
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cNack
           _i2cHighScl
           _i2cLowScl
       _I2C_Start
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Stop
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Write
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _delay_ms
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _DS3231_Write_Time
       _I2C_Start
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Write
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _delay_ms
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _Initialize_Main_Screen
       _drawCircle
         _drawPixel
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_data
             _spiwrite
       _drawtext
         _drawChar
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
           _fillRect
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
         _strlen
       _fillScreen
         _fillRectangle
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
       _strcpy
     _Initialize_Setup_Time_Screen
       _drawtext
         _drawChar
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
           _fillRect
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
         _strlen
       _fillRect
         _drawFastVLine
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
       _fillScreen
         _fillRectangle
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
       _strcpy
     _Update_Setup_Screen_Cursor
       _fillRect
         _drawFastVLine
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
     _Update_Setup_Time_Screen
       ___awdiv
         ___awmod (ARG)
       ___awmod
       _drawtext
         _drawChar
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
           _fillRect
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
         _strlen
     _bcd_2_dec
     _dec_2_bcd
       ___awdiv
         ___awmod (ARG)
       ___awmod
   _Do_Update_Main_Screen
     _DS3231_Read_Temp
       _I2C_ReStart
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Read
         _i2cAck
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cNack
           _i2cHighScl
           _i2cLowScl
       _I2C_Start
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Stop
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Write
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _delay_ms
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___awdiv
       ___awmod (ARG)
     ___awmod
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     _drawtext
       _drawChar
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _drawPixel
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_data
             _spiwrite
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
       _strlen
     _strcpy
   _I2C_Init
     _i2cHighScl
     _i2cHighSda
   _Initialize_Main_Screen
     _drawCircle
       _drawPixel
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _write_data
           _spiwrite
     _drawtext
       _drawChar
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _drawPixel
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_data
             _spiwrite
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
       _strlen
     _fillScreen
       _fillRectangle
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
     _strcpy
   _LCD_Reset
     _delay_ms
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   _LED_Alarm
   _Read_Volt_In
     _Get_Full_ADC
     _Select_ADC
     ___ftdiv
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___lwtoft
       _Get_Full_ADC (ARG)
       ___ftpack (ARG)
   _SPI_out
   _TFT_GreenTab_Initialize
     _Rcmd1
       _delay_ms
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _write_command
         _spiwrite
       _write_data
         _spiwrite
     _Rcmd2red
       _write_command
         _spiwrite
       _write_data
         _spiwrite
     _Rcmd3
       _delay_ms
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _write_command
         _spiwrite
       _write_data
         _spiwrite
     _write_command
       _spiwrite
     _write_data
       _spiwrite
   ___fttol
     ___ftmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _scale (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   _gen_2khz_sound
   _init_UART
     _OpenUSART
   _printf
     ___awdiv
       ___awmod (ARG)
     ___ftadd
       ___ftpack
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
       ___lbtoft (ARG)
         ___ftpack
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg
     ___ftsub
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv
     ___llmod
       ___lldiv (ARG)
     ___lltoft
       ___ftpack
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit
     _putch
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)

 _chkisr (ROOT)
   _INT0_isr
     _turn_off_sound
     i2_DS3231_Turn_Off_Alarm
       i2_I2C_Start
         i2_i2cHighScl
         i2_i2cHighSda
         i2_i2cLowScl
         i2_i2cLowSda
       i2_I2C_Stop
         i2_i2cHighScl
         i2_i2cHighSda
         i2_i2cLowScl
         i2_i2cLowSda
       i2_I2C_Write
         i2_i2cHighScl
         i2_i2cHighSda
         i2_i2cLowScl
         i2_i2cLowSda
       i2_delay_ms
         i2___wmul
   _INT1_isr
   _INT2_isr
   _TIMER1_isr

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     1A      4B       7       29.3%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     29      79       5       94.5%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     48      64       1       78.7%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     128      34        0.0%
DATA                 0      0     128       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Thu May 09 22:38:35 2019

                              drawCircle@f 0035                                drawCircle@r 002B  
                              drawCircle@x 0037                                drawCircle@y 0039  
       __size_of_DS3231_Write_Alarm_1_Time 003A                         __size_of_I2C_Start 0012  
                              _SSPSTATbits 000FC7                 ?_DS3231_Write_Alarm_1_Time 0001  
                       __size_of_I2C_Write 003E                               drawCircle@x0 0027  
                             drawCircle@y0 0029               __size_of_Do_Setup_Alarm_Time 023A  
                             ___awdiv@sign 0027                        ___wmul@multiplicand 002C  
                               _Do_LED_Out 4720                               ___ftadd@exp1 00BD  
                             ___ftadd@exp2 00BC                               ___ftadd@sign 00BB  
                                      l331 4B7E                                        l510 46B2  
                                      l406 2C86                                        l434 398E  
                                      l610 25A8                                        l507 4626  
                                      l435 38FA                                        l445 266C  
                                      l381 3F06                                        l437 396A  
                                      l438 398C                                        l375 495A  
                                      l544 48C8                                        l801 3F2E  
                                      l810 3F8C                                        l805 3F5A  
                                      l397 2D30                                        l573 1BA2  
                                      l806 3F60                                        l750 3E7E  
                                      l814 4244                                        l399 2C0A  
                                      l559 4C26                                        l824 3DF4  
                                      l923 0722                                        l780 4A20  
                                      l765 492A                                        l759 4408  
                                      l855 1046                                        l768 43BC  
                                      l848 21B4                                        l777 4A00  
                                      l786 4750                                        l788 4758  
                                      l884 08AC                                        l990 4198  
                                      l966 0C66                                        l994 41B2  
                                      l995 41B4                                        l996 41BE  
                                      l997 41C0                                        l999 41DA  
                                      _PR2 000FCB                                        _day 00EF  
                     __size_of_I2C_ReStart 0016                                        _cnt 00ED  
                                      _dow 0057                                        _nbr 00E6  
                              _Do_LED_Down 4A92                                        _txt 004F  
                             ___awmod@sign 0021                                ?i2_I2C_Stop 0001  
                                      wreg 000FE8                                 i2_delay_ms 4410  
            i2DS3231_Turn_Off_Alarm@device 000D         __size_of_Update_Setup_Alarm_Screen 00CE  
                          ??_fillRectangle 0028                               __CFG_LVP$OFF 000000  
                  _TFT_GreenTab_Initialize 495C                               ___ftdiv@cntr 00B2  
                             ___ftdiv@sign 00B7                               __CFG_WDT$OFF 000000  
                                     l1002 49AC                             drawFastVLine@h 0024  
                                     l1208 4010                                       l1402 35A8  
                                     l1410 3146                                       l1327 3B22  
                                     l1431 36D6                                       l1407 31B6  
                                     l1416 31A6                                       l1425 3C4E  
                                     l1441 4A84                                       l1409 311E  
                                     l1338 3AFA                                       l1602 46A2  
                                     l1506 415A                                       l1195 3BB8  
                                     l1371 1D96                                       l1452 2E62  
                           drawFastVLine@x 002D                                       l1373 1DC0  
                           drawFastVLine@y 0023                                       l1382 1EA4  
                                     l1526 430C                                       l1286 34DE  
                                     l1391 1ECE                                       l1367 1D5C  
                                     l1295 34CE                                       l1368 1F70  
                                     l1448 44B0                                       l1467 4AD6  
                                     l1493 4A6C                                       l1399 35DE  
                                     l1496 3D5A                                       l1586 49FA  
          __size_of_Initialize_Main_Screen 0348                                       l5520 419C  
                                     l5512 4188                                       l5604 3F4C  
                                     l5516 4190                                       l5508 417E  
                                     l5614 3F7E                                       l8014 2652  
                                     l5528 41AA                                       l9000 2DE0  
                                     l8050 45EA                                       l8042 2742  
                                     l8130 487A                                       l8210 3618  
                                     l9010 2E12                                       l8060 4600  
                                     l8140 1D6A                                       l9012 2E24  
                                     l9004 2DF4                                       l8062 4608  
                                     l8054 45F2                                       l8310 3FC2  
                                     l8302 3FA6                                       l8214 3626  
                                     l9006 2DFC                                       l9014 2E32  
                                     l8072 461C                                       l8080 46AA  
                                     l7264 4A9E                                       l7256 4A30  
                                     l8128 4870                                       l8312 3FCC  
                                     l8232 366C                                       l8208 35FE  
                                     l8152 1DB6                                       l9032 3D02  
                                     l8074 4622                                       l7266 4AAA  
                                     l7258 4A3C                                       l8314 3FD4  
                                     l8322 3FF6                                       l8306 3FB4  
                                     l8242 369A                                       l8170 1E38  
                                     l8162 1DF8                                       l8146 1DA4  
                                     l9018 2E50                                       l9034 3D10  
                                     l8068 4610                                       l6820 3D80  
                                     l8236 3682                                       l8228 365A  
                                     l8180 1E84                                       l8172 1E48  
                                     l9044 3D4A                                       l9036 3D18  
                                     l9060 414A                                       l9052 410E  
                                     l8086 46BC                                       l8270 3B62  
                                     l8326 4006                                       l8318 3FEA  
                                     l8246 36B0                                       l8238 3688  
                                     l8182 1E94                                       l8174 1E54  
                                     l9054 411C                                       l8088 46C2  
                                     l8272 3B6C                                       l8264 3B4C  
                                     l6840 3DDA                                       l6832 3DB6  
                                     l6824 3D92                                       l8168 1E28  
                                     l9056 4124                                       l9400 0522  
                                     l9312 012A                                       l8098 46D4  
                                     l7802 2BF8                                       l8290 3BAE  
                                     l8282 3B92                                       l8274 3B74  
                                     l8258 3B3A                                       l9066 42B4  
                                     l9314 0166                                       l9306 0118  
                                     l7820 2C7E                                       l7812 2C16  
                                     l9244 11AC                                       l6836 3DC8  
                                     l6828 3DA4                                       l8188 1EFA  
                                     l9068 42C2                                       l9500 0978  
                                     l9420 05F6                                       l9404 0574  
                                     l9308 011E                                       l7742 3E90  
                                     l7830 2CD0                                       l7806 2C06  
                                     l8286 3B9E                                       l8534 3E64  
                                     l9246 11C2                                       l8198 1F4A  
                                     l9510 09C6                                       l9502 097E  
                                     l9430 0642                                       l9414 05CC  
                                     l7920 3A8A                                       l7816 2C46  
                                     l7808 2C0E                                       l8536 3E74  
                                     l9264 1266                                       l9424 0606  
                                     l9408 059E                                       l9360 034A  
                                     l9352 02DA                                       l9344 0272  
                                     l9328 01C2                                       l7930 3AEE  
                                     l7922 3AAA                                       l7914 3A6E  
                                     l7746 3EC8                                       l7818 2C7A  
                                     l7850 4670                                       l8570 2458  
                                     l9602 17A2                                       l9258 1244  
                                     l8730 2174                                       l8722 20B0  
                                     l9530 0A5C                                       l9506 098C  
                                     l9442 06F0                                       l9426 061A  
                                     l9418 05DC                                       l9362 0360  
                                     l9282 002C                                       l7764 493C  
                                     l7756 3EEE                                       l7772 4556  
                                     l7836 2CFC                                       l7828 2CA8  
                                     l7844 2D2C                                       l7852 4676  
                                     l8580 2506                                       l8572 248E  
                                     l9700 1932                                       l9620 1808  
                                     l9612 17D0                                       l9524 0A18  
                                     l9516 09CE                                       l9444 0704  
                                     l9436 06D0                                       l9380 0452  
                                     l9372 03D4                                       l9356 0302  
                                     l9292 0066                                       l7942 3B14  
                                     l7926 3AC2                                       l7918 3A7E  
                                     l7758 3EFC                                       l7838 2D24  
                                     l7862 38C4                                       l8582 2540  
                                     l8566 23FC                                       l9710 194E  
                                     l8830 3178                                       l8750 0E3C  
                                     l9542 0AB4                                       l9518 09E2  
                                     l9470 089C                                       l9454 074E  
                                     l9438 06E0                                       l9374 03E0  
                                     l9382 0466                                       l9358 0318  
                                     l9294 007C                                       l9286 0042  
                                     l7936 3B02                                       l7928 3AE2  
                                     l7776 4572                                       l7880 3960  
                                     l8576 24CA                                       l9712 1952  
                                     l9704 193E                                       l9624 1824  
                                     l9616 17EC                                       l8912 352E  
                                     l8832 317E                                       l8744 0D94  
                                     l9544 0AC0                                       l9552 0B06  
                                     l9536 0A8A                                       l9528 0A50  
                                     l9464 087C                                       l9448 0728  
                                     l9392 04E2                                       l9368 03AE  
                                     l9288 0058                                       l9810 228E  
                                     l9802 2256                                       l9722 196E  
                                     l9706 1942                                       l9642 1874  
                                     l8906 3502                                       l8826 3168  
                                     l8818 3154                                       l8762 0F70  
                                     l8754 0E4C                                       l9554 0B18  
                                     l9562 0C0C                                       l9538 0A96  
                                     l9482 08F8                                       l9466 088C  
                                     l9458 07A0                                       l9386 04CE  
                                     l9378 0424                                       l9298 009C  
                                     l7980 3010                                       l7884 396E  
                                     l7868 3932                                       l8588 2580  
                                     l9820 22B2                                       l9724 1972  
                                     l9716 195E                                       l9732 1982  
                                     l9652 1890                                       l9628 1840  
                                     l8932 357E                                       l8908 3520  
                                     l8852 33F6                                       l8836 3192  
                                     l8780 4ACE                                       l9556 0B98  
                                     l9564 0C20                                       l9548 0ADE  
                                     l9492 0936                                       l9396 051C  
                                     l9388 04D4                                       l7798 2BEC  
                                     l7894 3988                                       l9806 2272  
                                     l9718 1962                                       l9734 19AC  
                                     l9670 18C0                                       l9646 1880  
                                     l9638 1864                                       l8942 35B8  
                                     l8950 4486                                       l8846 33E6  
                                     l8838 31A0                                       l8790 30C6  
                                     l9566 0C2A                                       l9486 0922  
                                     l7992 308A                                       l7984 3032  
                                     l7968 2FBC                                       l7888 3978  
                                     l9840 22EE                                       l9824 22C2  
                                     l9728 197E                                       l9664 18B0  
                                     l8768 1022                                       l9496 0970  
                                     l9488 0928                                       l9568 0C44  
                                     l8962 3C1E                                       l7994 3092  
                                     l9834 22DE                                       l9850 2316  
                                     l9738 19B8                                       l9658 18A0  
                                     l9690 1916                                       l8890 34A0  
                                     l8874 346C                                       l8866 343A  
                                     l9828 22CE                                       l9908 23E6  
                                     l9940 3364                                       l9932 332C  
                                     l9676 18D0                                       l9684 18E0  
                                     l8892 34A6                                       l8796 30E4  
                                     l8958 3BEC                                       l9870 234E  
                                     l9862 233A                                       l9854 2322  
                                     l9918 32E2                                       l9758 1A2A  
                                     l9694 1922                                       l9686 190A  
                                     l8982 2D5C                                       l8886 3490  
                                     l8878 347C                                       STR_1 FF2A  
                                     l8968 3C4A                                       l9864 233E  
                                     l9880 2376                                       l9848 22FE  
                                     l9784 21F0                                       l9936 3348  
                                     l9928 3310                                       l9768 1A4A  
                                     l8896 34BA                                       STR_2 FF6E  
                                     STR_3 FFBB                                       l9874 235A  
                                     l9858 232E                                       l9794 221E  
                                     l9698 192E                                       l8898 34C8  
                                     STR_4 FF57                                       STR_5 FFA2  
                                     l9868 234A                                       l9884 2382  
                                     l9964 33AE                                       l9956 3394  
                                     l9948 337C                                       STR_6 FFFC  
                                     STR_7 FFFA                                       l9878 235E  
                                     l9798 223A                                       l9974 33CC  
                                     STR_8 FFE6                                       STR_9 FFEB  
                                     l9898 23C6                               printf@tmpval 0139  
                                     u4520 3F8C                                       u4490 3F5A  
                                     u7140 2FE8                                       u7301 1D28  
                                     u7501 35F0                                       u8061 2D48  
                                     u8080 2D82                                       u7521 360E  
                                     u7291 1D0A                                       u8085 2D78  
                                     u6910 2CDE                                       u6760 3EBE  
                                     u7801 30B8                                       u8370 0208  
                                     u7821 30D6                                       u8375 01FC  
                                     u6980 38F2                                       u6990 3928  
                                     u8590 071A                                       u9631 1CE8  
                                     u7961 34F0                                       u7981 3512  
                                     u9647 4C40                                       _TRMT 007D61  
                             _DS3231_tempC 00DE                               _DS3231_tempF 00E0  
                                     _Volt 00DB                                       _date 0080  
                                     _main 1A54                                       _font FCB9  
                             ___ftpack@arg 001C                                       _hour 00F1  
                             ___ftpack@exp 001F                           __end_of_I2C_Init 4C6A  
                         __end_of_I2C_Read 4628                                       _time 0092  
                                     _year 00F8                                       fsr0h 000FEA  
                                     fsr1h 000FE2                                       fsr0l 000FE9  
                                     fsr2h 000FDA                                       fsr1l 000FE1  
                                     indf2 000FDF                                       fsr2l 000FD9  
                                     _wrap 0064                           __end_of_I2C_Stop 4BBA  
                   ?_DS3231_Turn_Off_Alarm 0001                                       pclat 000FFA  
                       __size_of_LED_Alarm 008A                               ?i2_I2C_Start 0001  
                          __end_of_SPI_out 3F90                         __size_of_LCD_Reset 0012  
                                     prodh 000FF4                                       prodl 000FF3  
                             ?i2_I2C_Write 0001                                       start 0018  
                          ??_drawFastVLine 0027                               ___ftmul@cntr 003D  
                          __end_of_i2cNack 4C74                               ___param_bank 000010  
                             ___ftmul@sign 003E                       __end_of_Get_Full_ADC 4A22  
                             ___fttol@exp1 00C0                               ___fttol@lval 00BC  
                            _LED_Intensity 00E8                                ?_TIMER1_isr 0001  
        __end_of_DS3231_Write_Alarm_1_Time 4794                           __end_of_INT0_isr 4B2E  
                         __end_of_INT1_isr 4B46                           __end_of_INT2_isr 2BDC  
                                    l10340 1B50                                      l10326 1B14  
                                    l10352 1BA6                                      l10336 1B40  
                                    l10380 1C88                                      l10364 1C24  
                                    l10392 1CD6                                      l10384 1CA2  
                                    l10388 1CBC                            drawFastVLine@hi 002B  
                          drawFastVLine@lo 002C                                      ?_main 0001  
           Update_Setup_Screen_Cursor@xinc 003B             Update_Setup_Screen_Cursor@yinc 003A  
                          __end_of___awdiv 3BBA                            __end_of___ftadd 1F72  
                          drawCircle@ddF_x 0031                                      STR_10 FFE0  
                          drawCircle@ddF_y 0033                                      STR_11 FFF4  
                                    STR_12 FFD9                                      STR_20 FFAF  
                                    STR_21 FFE6                                      STR_13 FF92  
                                    STR_30 FFFA                                      STR_14 FFFA  
                                    STR_22 FFEB                                      STR_23 FF57  
                                    STR_15 FFF0                                      STR_31 FF81  
                                    STR_16 FFF8                                      STR_24 FFC6  
                                    STR_17 FFF0                                      STR_25 FFE6  
                                    STR_26 FF57                                      STR_18 FFF8  
                                    STR_19 FF57                                      STR_27 FFD1  
                                    STR_28 FFB4                            __end_of___awmod 4012  
                                    STR_29 FF92                            __end_of___ftdiv 35E0  
                          __end_of___ftneg 4A92                            __end_of___lldiv 3D6C  
                          __end_of___ftmul 36D8                                      _T0CON 000FD5  
                          ___awdiv@divisor 0024                                      _T1CON 000FCD  
                          __end_of___llmod 416C                            __end_of___ftsub 44B2  
                          __end_of___fttol 2E64                                      _T2CON 000FCA  
            __size_of_Do_Setup_Heater_Temp 010E                                      i2l309 2B78  
                                    i2l510 46F0                                      i2l291 4B44  
                                    i2l283 3CA6                                      i2l297 2BDA  
                                    i2l759 445A                            ___awdiv@counter 0026  
                          drawCircle@color 002D                                      _RCSTA 000FAB  
                                    _TMR0H 000FD7                                      _TMR1H 000FCF  
                                    _TMR0L 000FD6                                      _TMR1L 000FCE  
                                    _SPBRG 000FAF                                      _PORTD 000F83  
                                    _TRISA 000F92                                      _TRISB 000F93  
                                    _TRISC 000F94                                      _TRISD 000F95  
                                    _TRISE 000F96                                      _TXREG 000FAD  
                                    _TXSTA 000FAC                                      _Rcmd1 31B8  
                                    _Rcmd3 36D8                               ___lltoft@exp 002C  
                                    _nRBPU 007F8F                              ?_Read_Volt_In 0001  
                               _i2cHighSda 4C90                                 _i2cHighScl 4C3C  
                             bcd_2_dec@bcd 0022                               bcd_2_dec@dec 0020  
                          __end_of_dpowers FEBC                                      _font2 FDB8  
                                    _contr 00EE                                      _count 004D  
                                    _scale 0C68                            __end_of_isdigit 4AD8  
                                    _tempC 00AC                                      _tempF 00AF  
                                    _month 00F3                              ___ftpack@sign 0020  
                                    _putch 4C22                          __end_of_I2C_Start 4BCC  
                        __end_of_I2C_Write 46E2                             __CFG_BOREN$OFF 000000  
                                    tablat 000FF5                           __end_ofi2___wmul 49D6  
                                    status 000FD8                    i2_DS3231_Turn_Off_Alarm 47CA  
                       __size_of_Do_LED_Up 0026                            write_data@data_ 001E  
                          __initialization 4088                        __size_ofi2_I2C_Stop 0012  
                             __end_of_main 1CF4                               __end_of_font FDB8  
                   _Initialize_Main_Screen 13F6                           __end_of_Rcmd2red 4666  
                              ?_Do_LED_Out 0001                                     ??_main 00D8  
                            ___fttol@sign1 00BB                               i2I2C_Write@n 0002  
                            __activetblptr 000002                          ?_DS3231_Read_Temp 0036  
                        ?_DS3231_Read_Time 0001                          __end_of_LED_Alarm 3DF6  
                        __end_of_LCD_Reset 4BA8                       __size_of__tdiv_to_l_ 0110  
  I2C_Write_Address_Write_One_Byte@Address 001E                  ??_TFT_GreenTab_Initialize 0036  
              ?_Update_Setup_Heater_Screen 0001                 ??_Update_Setup_Time_Screen 0046  
                           ??_Read_Volt_In 0048                         ??_DS3231_Read_Temp 0038  
      __size_of_Update_Setup_Screen_Cursor 01BA                         ??_DS3231_Read_Time 0036  
                                   ?_Rcmd1 0001                                     ?_Rcmd3 0001  
                              ?i2_delay_ms 0007                                  I2C_Init@c 001C  
                                I2C_Read@n 001D                           ??_turn_off_sound 0001  
           ?_Initialize_Setup_Alarm_Screen 0001                                     _ADCON0 000FC2  
                                   _ADCON1 000FC1                           ___llmod@dividend 0029  
                                   ?_scale 003F                                     _ADRESH 000FC4  
                                   _ADRESL 000FC3                                     _CCPR2L 000FBB  
                         ___awdiv@dividend 0022                         __size_of_i2cLowSda 000A  
                       __size_of_i2cLowScl 0008                                     ?_putch 0001  
                         __end_of___ftpack 3B24                           __end_of___lbtoft 4A6E  
                                ??_SPI_out 001C                                 _Select_ADC 4C30  
                         __end_of___lltoft 430E                                     i2l1002 49D4  
                                   i2l5332 46FA                                     i2l5334 4700  
                                   i2l5326 46E8                                     i2l5344 4712  
                                   i2l6306 2BAC                                     i2l6250 2A96  
                                   i2l6314 2BB8                                     i2l6308 2BB2  
                                   i2l6238 4B3C                                     i2l6270 2AE8  
                                   i2l6282 2B08                                     i2l6258 2AC6  
                                   i2l6294 2B2A                                     i2l7280 3C9C  
                                   i2l7272 3C88                                     i2l7276 3C92  
                         __end_of___lwtoft 49FC                                     _OSCCON 000FD3  
                           _gen_2khz_sound 4B84                        __size_of_TIMER1_isr 000C  
                                   _SPBRGH 000FB0                DS3231_Turn_Off_Alarm@device 0036  
                                   _SSPBUF 000FC9                                  ??_i2cNack 001C  
                       Get_Full_ADC@result 0020                           __end_of_delay_ms 4410  
                                   _i2cAck 4BCC           ??_Initialize_Setup_Heater_Screen 0046  
          ?_Initialize_Setup_Heater_Screen 0001          Do_Setup_Heater_Temp@Key_Done_Flag 00C5  
                         __end_of_fillRect 4596                           __end_of_drawChar 2D32  
                         __end_of__powers_ FF0A           __end_of_DS3231_Read_Alarm_1_Time 45E0  
                       __size_of_OpenUSART 0070                                     ___ftge 3BBA  
                                   ___wmul 4986                                  ??___awdiv 0026  
                         __end_of_drawtext 30A8                                  ??___ftadd 00B8  
           __size_of_Do_Update_Main_Screen 03AE                                  ??___awmod 0020  
                                ??___ftdiv 0045                                  ??___ftneg 001F  
                                ??___lldiv 0024                                  ??___ftmul 0036  
                                ??___llmod 0031              __end_of_Do_Update_Main_Screen 13F6  
                                ??___ftsub 0049                                  ??___fttol 00B6  
                                   _chkisr 0008                                     _buffer 0100  
                                   _nec_ok 00F4                                     _fround 1F72  
                                   clear_0 408E                                     clear_1 409A  
                         ___awdiv@quotient 0028                                     _minute 00F2  
                                   _second 00F6                            ___awmod@divisor 001E  
                          ___awmod@counter 0020                                     _printf 001C  
                             drawtext@size 00B9                                     _strcpy 4866  
                                   _strlen 4666                      ___ftmul@f3_as_product 003A  
                             ?i2_i2cLowSda 0001                               ?i2_i2cLowScl 0001  
                             __pdataCOMRAM 0064                                  ??_isdigit 001C  
                                ?_I2C_Init 001C                                  ?_I2C_Read 0001  
                        __end_of_Do_LED_Up 4A48                                  ?_I2C_Stop 0001  
                             __mediumconst FCB8                                     tblptrh 000FF7  
                                   tblptrl 000FF6                                     tblptru 000FF8  
                              ?_i2cHighSda 0001                                ?_i2cHighScl 0001  
                                   putch@c 001C                           __end_of_spiwrite 4B84  
                       __size_of_bcd_2_dec 0030                     __end_of_gen_2khz_sound 4B96  
                      _Do_Setup_Alarm_Time 21B6                  ??i2_DS3231_Turn_Off_Alarm 000D  
                             i2delay_ms@ms 0007                                 __accesstop 0080  
                  __end_of__initialization 40F2                        __size_of_Do_LED_Out 003A  
    I2C_Write_Address_Read_One_Byte@Device 0021                         __size_of_dec_2_bcd 0058  
                               ___ftadd@f1 00B2                                 ___ftadd@f2 00B5  
                               ___ftge@ff1 0028                                 ___ftge@ff2 002B  
                                ?_INT0_isr 0001                                  ?_INT1_isr 0001  
                                ?_INT2_isr 0001                         _setup_alarm_minute 005B  
                       _setup_alarm_second 005C                              ___rparam_used 000001  
                               ___ftdiv@f1 003F                                 ___ftdiv@f2 0042  
                               ___ftdiv@f3 00B3                          SPI_out@First_byte 001F  
                    __size_of_Get_Full_ADC 0026                                 ___ftneg@f1 001C  
                               ___lbtoft@c 0027                                 ___ftmul@f1 0030  
                               ___ftmul@f2 0033                       __size_ofi2_I2C_Start 0012  
                               ___ftsub@f1 00BE                                 ___ftsub@f2 00C1  
                               ___fttol@f1 00B2                              __end_of_Rcmd1 32C8  
                            __end_of_Rcmd3 37CA                       __size_ofi2_I2C_Write 003E  
                           __pcstackCOMRAM 0001                        __size_ofi2_delay_ms 0052  
                             __pidataBANK0 4834                               __pidataBANK1 48CA  
                               ___lltoft@c 0024                              __end_of_font2 FE94  
                        __end_of_i2cLowSda 4C7E                          __end_of_i2cLowScl 4C90  
                            __end_of_scale 1048                       ?_Do_Setup_Alarm_Time 0001  
              ??_DS3231_Write_Alarm_1_Time 0036                              __end_of_putch 4C30  
                               ___lwtoft@c 0024                             drawPixel@color 0024  
                             dec_2_bcd@bcd 002E                            SPI_out@SPI_data 001E  
                             dec_2_bcd@dec 0030                                  ?i2___wmul 0001  
                   __size_of_write_command 0010                                 __div_to_l_ 33D6  
                             ?_Do_LED_Down 0001                                 ??_I2C_Init 0020  
                               ??_I2C_Read 001C                               _alarm_minute 0054  
                             _alarm_second 0055                               ??i2_I2C_Stop 0001  
             __end_of_DS3231_Turn_On_Alarm 4834                                 ??_I2C_Stop 001C  
                                  ??_Rcmd1 0036                                    ??_Rcmd3 0036  
                       __size_of_drawPixel 0030                          __end_of_OpenUSART 41DC  
                          __div_to_l_@exp1 0027                            __div_to_l_@cntr 0026  
                                  ??_scale 0042                            __div_to_l_@quot 0022  
                             _Get_Full_ADC 49FC                                    ??_putch 001C  
                          ?_gen_2khz_sound 0001                                ?_Select_ADC 0001  
                  ??_DS3231_Turn_Off_Alarm 0036                                 __pbssBANK0 00DB  
                         _setup_alarm_hour 005A                           _setup_alarm_time 011F  
     __end_of_Initialize_Setup_Time_Screen 2F90      __size_of_Initialize_Setup_Time_Screen 012C  
             _Initialize_Setup_Time_Screen 2E64                              ??_DS3231_Init 0037  
                                ?_Rcmd2red 0001                         __size_of_init_UART 0014  
                          spiwrite@spidata 001D                                 _alarm_date 0052  
                               ??_INT0_isr 000E                                 ??_INT1_isr 0001  
                               ??_INT2_isr 0001                                 _alarm_mode 00EB  
                               _alarm_hour 0053                                 _alarm_text 009B  
 I2C_Write_Address_Write_One_Byte@Data_Out 001F                              __div_to_l_@f1 001C  
                            __div_to_l_@f2 001F                                    ?_i2cAck 0001  
                       __CFG_CCP2MX$PORTBE 000000                       __end_of_Read_Volt_In 4246  
                    Select_ADC@ADC_Channel 001C                             I2C_Read@inByte 001E  
                                  ?___ftge 0028        __size_of_Update_Setup_Heater_Screen 0068  
                       __end_ofi2_I2C_Stop 4BF0                                    ?___wmul 002A  
                      __size_of_i2cHighSda 0008                        __size_of_i2cHighScl 000C  
                    ??_Do_Setup_Alarm_Time 0046                                    ?_chkisr 0001  
           Do_Setup_Alarm_Time@Key_Dn_Flag 00C2                     __size_of_setAddrWindow 004E  
                        __end_of_bcd_2_dec 492C                                    _CCP2CON 000FBA  
                   __size_of_Do_Setup_Time 0316                               ??_TIMER1_isr 0001  
                                  ?_fround 003F                              ??_I2C_ReStart 001C  
                 _DS3231_Read_Alarm_1_Time 4596                                  ?___ftpack 001C  
                                ?___lbtoft 0024                                 I2C_Write@n 001D  
                                  ?_printf 00C4                                  ?___lltoft 0024  
                                  ?_strcpy 001C                                    ?_strlen 001C  
                                ?___lwtoft 0024                 DS3231_Turn_On_Alarm@device 0036  
                        __end_of_dec_2_bcd 43BE                   Do_Setup_Time@Key_Dn_Flag 00C2  
Update_Setup_Screen_Cursor@cursor_position 0039                                 ??i2___wmul 0005  
                               _fillScreen 4AF8                                 _drawCircle 25AA  
           Do_Setup_Alarm_Time@Key_Up_Flag 00C1                           Read_Volt_In@STEP 00B8  
                                ?_delay_ms 0030                                  ?_fillRect 002E  
                                ?_drawChar 0039                                    _SSPCON1 000FC6  
                 Do_Setup_Time@Key_Up_Flag 00C1                                    _SSPSTAT 000FC7  
                _DS3231_Write_Alarm_1_Time 475A                                    _SPI_out 3F08  
                    __end_of_fillRectangle 3990                                  ?_drawtext 00B2  
                               ??_Rcmd2red 001F               __end_of_Do_Setup_Heater_Temp 33D6  
                                  _i2cNack 4C6A                         __end_of_TIMER1_isr 4C54  
            ?_Initialize_Setup_Time_Screen 0001                              _write_command 4C12  
                                _I2C_Start 4BBA                                  _I2C_Write 46A4  
                          __size_of_i2cAck 0012                    ?_Initialize_Main_Screen 0001  
                        __end_of__npowers_ FEE3                                    __Hparam 0000  
                               _scale$2752 0042                                    __Lparam 0000  
                      __end_of_DS3231_Init 454C                          __end_of_drawPixel 495C  
                    __end_of_drawFastVLine 3F08                            __size_of___ftge 0096  
                                  ___awdiv 3B24                                    ___ftadd 1CF4  
                                  ___awmod 3F90                                    ___ftdiv 34E0  
                                  ___ftneg 4A6E                                    ___lldiv 3CE0  
                          __size_of___wmul 0028                                    ___ftmul 35E0  
                                  ___llmod 40FC                                    ___ftsub 4462  
                                  ___fttol 2D32                            __size_of_chkisr 3CD8  
                             ??_Do_LED_Out 0031                                  ?_spiwrite 0001  
                                  __pcinit 4088                                 ??___ftpack 0021  
                               ??___lbtoft 0027                        __size_of_Select_ADC 000C  
                          __size_of_fround 0244                                    __ramtop 1000  
                               ??___lltoft 0028                                    __ptext0 1A54  
                                  __ptext1 001C                                    __ptext2 0C68  
                                  __ptext3 4C22                                    __ptext4 4AB6  
                                  __ptext5 1F72                                    __ptext6 30A8  
                                  __ptext7 33D6                                    __ptext8 42AE  
                                  __ptext9 40FC                            __size_of_printf 0C4C  
                        __end_of_init_UART 4B70                                 ??___lwtoft 0027  
                                _T0CONbits 000FD5                            __size_of_strcpy 0032  
                          __size_of_strlen 003E                          __end_of_hexpowers FF2A  
                                _T1CONbits 000FCD                                ?__div_to_l_ 001C  
                                  _dpowers FE94                                    _isdigit 4AB6  
                         ___awmod@dividend 001C                       DS3231_Read_Temp@T_hi 003E  
                     DS3231_Read_Temp@T_lo 003A                                 _old_second 00F5  
                             ??i2_delay_ms 0009                                 ??_delay_ms 0032  
                     __size_ofi2_i2cLowSda 000A                       __size_ofi2_i2cLowScl 0008  
                      __end_of_I2C_ReStart 4B5C                              drawtext@_text 00B3  
                            drawtext@color 00B5                       DS3231_Read_Temp@temp 003B  
                            ?i2_i2cHighSda 0001                              ?i2_i2cHighScl 0001  
                               ??_fillRect 0033                                  _LED_Alarm 3D6C  
                               ??_drawChar 0040                                  _LCD_Reset 4B96  
                        _DS3231_Write_Time 430E                              _setAddrWindow 44B2  
                           __pintcode_body 3C50                                 delay_ms@ms 0030  
                     end_of_initialization 40F2                              _Do_Setup_Time 173E  
                               ??_drawtext 0044                         ?_DS3231_Write_Time 0001  
               ?_Update_Setup_Alarm_Screen 0001                             ?_write_command 0001  
                            __Lmediumconst FCB8                  __size_of_DS3231_Read_Temp 008A  
                __size_of_DS3231_Read_Time 0076                                    int_func 3C50  
                      i2___wmul@multiplier 0001                         __end_of_Do_LED_Out 475A  
           __end_of_Initialize_Main_Screen 173E                                 ?_I2C_Start 0001  
                               ?_I2C_Write 0001                            ___lldiv@divisor 0020  
                      ??_DS3231_Write_Time 0036                            ___lldiv@counter 0028  
          ??_Initialize_Setup_Alarm_Screen 0046                       _DS3231_Turn_On_Alarm 4800  
                                _RCSTAbits 000FAB                                    printf@c 014A  
                                  printf@f 00C4                                    postdec1 000FE5  
                                  postdec2 000FDD                                    postinc0 000FEE  
                                  postinc2 000FDE                         __end_ofi2_delay_ms 4462  
                           __tdiv_to_l_@f1 001C                             __tdiv_to_l_@f2 001F  
                               ??_spiwrite 001C                                    strlen@s 001C  
                            ??__tdiv_to_l_ 0022                                  _PORTAbits 000F80  
                         drawtext@cursor_x 00C0                           drawtext@cursor_y 00BF  
                                _PORTBbits 000F81                                  _PORTCbits 000F82  
                                _PORTDbits 000F83                                  _PORTEbits 000F84  
                         I2C_Write@outByte 001C     __end_of_Initialize_Setup_Heater_Screen 2A6E  
  __size_of_Initialize_Setup_Heater_Screen 017A             _Initialize_Setup_Heater_Screen 28F4  
                               _setup_date 0128                                ?_fillScreen 002F  
                               _setup_hour 005F                                 _setup_time 0089  
                               _setup_year 0063                                ?_drawCircle 0027  
                               drawChar@bg 003D                  __end_of_DS3231_Write_Time 4366  
                                _TRISBbits 000F93                                  _TRISCbits 000F94  
                           ??i2_i2cHighSda 0001                             ??i2_i2cHighScl 0001  
   I2C_Write_Address_Read_One_Byte@Address 001F                               ??_i2cHighSda 001C  
                             ??_i2cHighScl 001C                       __size_of_Do_LED_Down 0024  
                        __size_of_I2C_Init 000A                          __size_of_I2C_Read 0048  
                        __size_of_I2C_Stop 0012                             ?_setAddrWindow 001F  
                               ?_LED_Alarm 0001                                 ?_LCD_Reset 0001  
                           ?_Do_Setup_Time 0001                                  _Do_LED_Up 4A22  
                         drawtext@textsize 00BB                                 drawPixel@x 0026  
                               drawPixel@y 0023                      __size_of_Read_Volt_In 006A  
                              _DS3231_Init 4500                                ___ftdiv@exp 00B6  
        __end_of_Update_Setup_Alarm_Screen 3A5E                                printf@width 013D  
                                _TXSTAbits 000FAC               ??_Update_Setup_Screen_Cursor 0039  
        __size_of_Update_Setup_Time_Screen 019C                        __size_of__div_to_l_ 010A  
                ?_Update_Setup_Time_Screen 0001                      ?_DS3231_Turn_On_Alarm 0001  
                        __size_of_INT0_isr 001A                          __size_of_INT1_isr 0018  
                        __size_of_INT2_isr 016E                             __end_of_i2cAck 4BDE  
                              ___ftmul@exp 0039            Do_Setup_Alarm_Time@Select_Field 00C7  
           ??_Initialize_Setup_Time_Screen 0046                               _LED_Int_text 00A3  
                       __end_of_i2cHighSda 4C98                             __end_of___ftge 3C50  
                       __end_of_i2cHighScl 4C48                             __end_of___wmul 49AE  
         Do_Setup_Heater_Temp@Select_Field 00C1                              delay_ms@count 0034  
                               _write_data 4C02                              __pidataCOMRAM 4CB0  
                           __end_of_chkisr 3CE0                   ?_TFT_GreenTab_Initialize 0001  
                    _Do_Update_Main_Screen 1048                                _I2C_ReStart 4B46  
                               drawtext@bg 00B7                             __end_of_fround 21B6  
                                _i2cLowSda 4C74                       _Do_Setup_Heater_Temp 32C8  
                                _i2cLowScl 4C88                           i2___wmul@product 0005  
                           __end_of_printf 0C68                  Do_Setup_Time@Select_Field 00C7  
                           __end_of_strcpy 4898                             __end_of_strlen 46A4  
                            INT2_isr@timer 0003                           ??_gen_2khz_sound 001C  
                      start_initialization 4088                          __size_ofi2___wmul 0028  
                      __end_of__tdiv_to_l_ 31B8                               _Read_Volt_In 41DC  
                               ?_Do_LED_Up 0001                               ??_Select_ADC 001C  
                          ??_write_command 001E           Do_Setup_Alarm_Time@Key_Done_Flag 00C4  
                                _OpenUSART 416C             __size_of_DS3231_Turn_Off_Alarm 0036  
                            _alarm_on_flag 00EC              __end_of_DS3231_Turn_Off_Alarm 47CA  
                          ___llmod@divisor 002D                           __CFG_OSC$INTIO67 000000  
                            ??i2_I2C_Start 0001                                ??_I2C_Start 001C  
                          ___llmod@counter 0031                              ??i2_I2C_Write 0001  
                         _alarm_clear_flag 00E9                                ??_I2C_Write 001C  
                  __size_of_turn_off_sound 0008                                   ??_i2cAck 001C  
                        __size_of_Rcmd2red 003E                 ??_DS3231_Read_Alarm_1_Time 0036  
                      __size_of_fillScreen 001C    I2C_Write_Address_Read_One_Byte@Data_Ret 0020  
                      __size_of_drawCircle 01AE                                   ??___ftge 002E  
                                 ??___wmul 002E                                   ??_chkisr 000E  
                              __pdataBANK0 0080                                __pdataBANK1 0100  
    __end_of_Initialize_Setup_Alarm_Screen 38B4     __size_of_Initialize_Setup_Alarm_Screen 00EA  
            _Initialize_Setup_Alarm_Screen 37CA                                   ??_fround 0042  
                          setAddrWindow@x0 0022                            setAddrWindow@x1 0020  
                          setAddrWindow@y0 001F                            setAddrWindow@y1 0021  
                                 ??_printf 00D2                         __end_of_Select_ADC 4C3C  
                    ?_Do_Setup_Heater_Temp 0001                                   ??_strcpy 0020  
                                 ??_strlen 001E           Do_Setup_Alarm_Time@Key_Next_Flag 00C5  
                               ?_i2cLowSda 0001                                 ?_i2cLowScl 0001  
           DS3231_Read_Alarm_1_Time@Device 0036                                  _bcd_2_dec 48FC  
                               fround@prec 0048                          __size_of___ftpack 00C6  
                        __size_of___lbtoft 0026                         SPI_out@Second_byte 001D  
           Do_Setup_Heater_Temp@Setup_Mode 00C6                          __size_of___lltoft 0060  
                              __pbssCOMRAM 0049                 __size_of_DS3231_Write_Time 0058  
               Do_Setup_Time@Key_Done_Flag 00C4                          __size_of___lwtoft 0026  
                          ??_setAddrWindow 0022                              __pcstackBANK0 00B2  
                            __pcstackBANK1 0131                            ??_Do_Setup_Time 0046  
                 ?i2_DS3231_Turn_Off_Alarm 0001                                  _dec_2_bcd 4366  
                              ??_LED_Alarm 001C                                ??_LCD_Reset 0036  
                             _isdigit$2411 001D                          __size_of_delay_ms 0052  
          Do_Setup_Heater_Temp@Key_Dn_Flag 00C3                                   ?_SPI_out 0001  
                              _alarm_count 00E2                          __size_of_fillRect 004A  
                        __size_of_drawChar 0156                                 ?_OpenUSART 001C  
                         _DS3231_Read_Temp 3DF6                           _DS3231_Read_Time 4012  
                                 ?_i2cNack 0001                          __size_of_drawtext 0118  
                         _alarm_match_flag 00EA                     ??_DS3231_Turn_On_Alarm 0036  
              __end_of_Do_Setup_Alarm_Time 23F0            Do_Setup_Heater_Temp@Key_Up_Flag 00C2  
                              I2C_Read@ack 001C                       __end_ofi2_i2cHighSda 4CA8  
                                _bit_count 00E4                       __end_ofi2_i2cHighScl 4C60  
                                __pintcode 0008            __end_of_TFT_GreenTab_Initialize 4986  
               Do_Setup_Time@Key_Next_Flag 00C5                              __pmediumconst FCB8  
                                 ?___awdiv 0022                                  __ptext100 4BDE  
                                __ptext101 4BF0                                  __ptext102 4C7E  
                                __ptext103 4C98                                  __ptext104 4CA0  
                                __ptext105 4C54                                  __ptext106 4CA8  
                                 ?___ftadd 00B2                                   ?___awmod 001C  
                                 ?___ftdiv 003F                        __end_ofi2_I2C_Start 4C02  
                                 ?___ftneg 001C                                   ?___lldiv 001C  
                                 ?___ftmul 0030                                   ?___llmod 0029  
                                 ?___ftsub 00BE                                  __npowers_ FEBC  
                                 ?___fttol 00B2                        __end_ofi2_I2C_Write 4720  
                                __tft_type 0051                     ?_Do_Update_Main_Screen 0001  
                       drawFastVLine@color 0025                                ?_write_data 0001  
                                _drawPixel 492C                                __tdiv_to_l_ 30A8  
                        __size_of_spiwrite 0014                               ??__div_to_l_ 0022  
                               ?_bcd_2_dec 001C                          _setup_heater_temp 005E  
                                 ?_isdigit 0001                                   _I2C_Init 4C60  
                                 _I2C_Read 45E0                                   _I2C_Stop 4BA8  
                                _nec_state 0058                             __size_of_Rcmd1 0110  
                           __size_of_Rcmd3 00F2               ??_Update_Setup_Heater_Screen 0046  
                                _init_UART 4B5C                                 ?_dec_2_bcd 002A  
        Do_Setup_Alarm_Time@Key_Abort_Flag 00C3                                  _hexpowers FF0A  
                                 SPI_out@i 0020                                ??_Do_LED_Up 0022  
                              _heater_mode 00F0                             __size_of_scale 03E0  
                              _heater_text 009F                             __size_of_putch 000E  
 __end_of_I2C_Write_Address_Write_One_Byte 4AF8  __size_of_I2C_Write_Address_Write_One_Byte 0020  
       ??_I2C_Write_Address_Write_One_Byte 0020          ?_I2C_Write_Address_Write_One_Byte 001E  
         _I2C_Write_Address_Write_One_Byte 4AD8                ??_Update_Setup_Alarm_Screen 0046  
                           ___wmul@product 002E                     DS3231_Read_Temp@Device 003D  
       __end_of_Update_Setup_Screen_Cursor 25AA                 _Update_Setup_Screen_Cursor 23F0  
                                 _INT0_isr 4B14                                   _INT1_isr 4B2E  
                                 _INT2_isr 2A6E                                   _PIE1bits 000F9D  
                   DS3231_Read_Time@Device 0036                    DS3231_Write_Time@Device 0036  
                                 _PIR1bits 000F9E                         __end_of__div_to_l_ 34E0  
                                 i2u516_40 2BA2                                   i2u965_47 4C58  
                      _setup_heater_S_text 00A9                                  _setup_day 005D  
                                fillRect@h 0030                                  fillRect@i 0037  
                                fillRect@w 002F                                  fillRect@x 0036  
                                fillRect@y 002E                     ??_Do_Setup_Heater_Temp 0046  
                                drawChar@c 003A                                  drawChar@i 0043  
                                drawChar@j 0042                                  drawChar@x 0041  
                                drawChar@y 0039                                 ?_drawPixel 0023  
                   __size_of_fillRectangle 00DC                                 _ADCON0bits 000FC2  
          __end_ofi2_DS3231_Turn_Off_Alarm 4800                          ___wmul@multiplier 002A  
                            ??i2_i2cLowSda 0001                              ??i2_i2cLowScl 0001  
                              ??_i2cLowSda 001C                                ??_i2cLowScl 001C  
                             ??_fillScreen 0031                                   i2___wmul 49AE  
                             ??_drawCircle 002F                                 printf@flag 0145  
                               printf@fval 0147                                 printf@prec 0137  
                               ?_init_UART 0001           __end_of_Update_Setup_Time_Screen 28F4  
            Do_Setup_Alarm_Time@Setup_Mode 00C6                                _INTCON2bits 000FF1  
  __end_of_I2C_Write_Address_Read_One_Byte 48CA   __size_of_I2C_Write_Address_Read_One_Byte 0032  
        ??_I2C_Write_Address_Read_One_Byte 0020           ?_I2C_Write_Address_Read_One_Byte 001F  
          _I2C_Write_Address_Read_One_Byte 4898                                _INTCON3bits 000FF0  
                                copy_data0 40B4                                  copy_data1 40D4  
                                drawtext@i 00BD                     __size_of_drawFastVLine 0088  
                                drawtext@x 00BA                                  drawtext@y 00B2  
                  Do_Setup_Time@Setup_Mode 00C6                          write_command@cmd_ 001E  
                         __size_of_SPI_out 0088                                ??_OpenUSART 001E  
                                 _Rcmd2red 4628                        __size_of_write_data 0010  
                             ?_DS3231_Init 0001                            OpenUSART@config 001E  
   I2C_Write_Address_Write_One_Byte@Device 0020                             _turn_off_sound 4CA8  
                              i2_I2C_Start 4BF0                           __size_of_i2cNack 000A  
                              i2_I2C_Write 46E2                                   __Hrparam 0000  
                       __end_of_fillScreen 4B14                                   __Lrparam 0000  
                       __end_of_drawCircle 2758                Do_Setup_Time@Key_Abort_Flag 00C3  
                       DS3231_Init@control 0038                           __size_of___awdiv 0096  
                         __size_of___ftadd 027E                           __size_of___awmod 0082  
                         __size_of___ftdiv 0100                           __size_of___ftneg 0024  
                    i2___wmul@multiplicand 0003                           __size_of___lldiv 008C  
          DS3231_Write_Alarm_1_Time@Device 0036                           __size_of___ftmul 00F8  
                         __size_of___llmod 0070                           __size_of___ftsub 0050  
                         __size_of___fttol 0132                                   ___ftpack 3A5E  
                _Update_Setup_Alarm_Screen 3990                                   ___lbtoft 4A48  
                             ?_I2C_ReStart 0001                              _heater_S_text 00A6  
                              _fround$2750 0045                                _fround$2751 0042  
                                 ___lltoft 42AE                                   ___lwtoft 49D6  
                              ??_bcd_2_dec 001E                              ??_Do_LED_Down 0022  
                         __size_of_isdigit 0022                                   _delay_ms 43BE  
                              ??_dec_2_bcd 002C                         i2I2C_Write@outByte 0001  
                                 __ptext10 3CE0                                   __ptext11 2D32  
                                 __ptext20 4628                                   __ptext12 4462  
                                 __ptext21 31B8                                   __ptext13 1CF4  
                                 __ptext30 4C60                                   __ptext22 41DC  
                                 __ptext14 4A6E                                   __ptext31 1048  
                                 __ptext23 49D6                                   __ptext15 4B5C  
                                 __ptext40 21B6                                   __ptext32 3DF6  
                                 __ptext24 35E0                                   __ptext16 416C  
                                 __ptext41 4366                                   __ptext33 173E  
                                 __ptext25 34E0                                   __ptext17 4B84  
                                 __ptext50 4AF8                                   __ptext42 48FC  
                                 __ptext34 2758                                   __ptext26 4C30  
                                 __ptext18 495C                                   __ptext51 38B4  
                                 __ptext43 23F0                                   __ptext35 2E64  
                                 __ptext27 49FC                                   __ptext19 36D8  
                                 __ptext60 4C02                                   __ptext52 2F90  
                                 __ptext44 3990                                   __ptext36 430E  
                                 __ptext28 3D6C                                   __ptext61 4C12  
                                 __ptext53 4666                                   __ptext45 3F90  
                                 __ptext37 32C8                                   __ptext29 4B96  
                                 __ptext70 3F08                                   __ptext62 4B70  
                                 __ptext54 2BDC                                   __ptext46 3B24  
                                 __ptext38 4246                                   __ptext71 4800  
                                 __ptext63 4012                                   __ptext55 454C  
                                 __ptext47 37CA                                   __ptext39 28F4  
                                 __ptext80 46A4                                   __ptext72 4794  
                                 __ptext64 4A22                                   __ptext56 3E80  
                                 __ptext48 13F6                                   __ptext81 4BA8  
                                 __ptext73 4500                                   __ptext65 4720  
                                 __ptext57 25AA                                   __ptext49 4866  
                                 __ptext90 4C3C                                   __ptext82 4BBA  
                                 __ptext74 4AD8                                   __ptext66 4A48  
                                 __ptext58 492C                                   __ptext83 45E0  
                                 __ptext75 4898                                   __ptext67 3A5E  
                                 __ptext59 44B2                                   __ptext92 4C48  
                                 __ptext84 4C6A                                   __ptext76 475A  
                                 __ptext68 3BBA                                   __ptext93 2A6E  
                                 __ptext85 4BCC                                   __ptext77 4596  
                                 __ptext69 4A92                                   __ptext94 4B2E  
                                 __ptext86 4B46                                   __ptext78 43BE  
                                 __ptext95 4B14                                   __ptext87 4C74  
                                 __ptext79 4986                                   __ptext96 47CA  
                                 __ptext88 4C88                                   __ptext97 4410  
                                 __ptext89 4C90                                   __ptext98 49AE  
                                 __ptext99 46E2                                   _fillRect 454C  
                                 _drawChar 2BDC                                   __powers_ FEE3  
                      __end_ofi2_i2cLowSda 4C88                        __end_ofi2_i2cLowScl 4CA0  
                            ?_Get_Full_ADC 001C           __size_of_TFT_GreenTab_Initialize 002A  
                                 _colstart 0056                                   _nec_code 0049  
                                 _drawtext 2F90                            _set_heater_temp 00F7  
                               strcpy@from 001E                     __end_of_turn_off_sound 4CB0  
                            _fillRectangle 38B4                              __size_of_main 02A0  
                    __size_ofi2_i2cHighSda 0008                      __size_ofi2_i2cHighScl 000C  
                          fillRectangle@hi 002C                            fillRectangle@lo 002D  
                            _drawFastVLine 3E80                                  printf@idx 0134  
                                printf@exp 013F                                   _spiwrite 4B70  
                                printf@val 0141                                ??_drawPixel 0026  
                                 _rowstart 0059                   __end_of_DS3231_Read_Temp 3E80  
                 __end_of_DS3231_Read_Time 4088                                 _INTCONbits 000FF2  
       __end_of_Update_Setup_Heater_Screen 42AE                 _Update_Setup_Heater_Screen 4246  
                               i2_I2C_Stop 4BDE                             OpenUSART@spbrg 001C  
                        DS3231_Init@device 0037                                ??_init_UART 001F  
                                 isdigit@c 001E                             ??_Get_Full_ADC 001E  
                             i2_i2cHighSda 4CA0                               i2_i2cHighScl 4C54  
                                 scale@scl 0045                   ??_Initialize_Main_Screen 0046  
                      __end_of_Do_LED_Down 4AB6                                  spiwrite@x 001C  
                                 intlevel2 0000                             ?_fillRectangle 0023  
                         __tdiv_to_l_@exp1 002A                           __tdiv_to_l_@cntr 0029  
                         __tdiv_to_l_@quot 0025                            ?_turn_off_sound 0001  
                 _Update_Setup_Time_Screen 2758                      __end_of_write_command 4C22  
                         ___lldiv@dividend 001C                            fillScreen@color 002F  
         __size_ofi2_DS3231_Turn_Off_Alarm 0036         Do_Setup_Heater_Temp@Key_Abort_Flag 00C4  
                    _DS3231_Turn_Off_Alarm 4794                    ??_Do_Update_Main_Screen 0046  
                           fillRectangle@h 0025                             fillRectangle@w 0024  
                           fillRectangle@x 002E                             fillRectangle@y 0023  
                           ?_drawFastVLine 0023                                   printf@ap 0135  
                             ??_write_data 001E                                 _TIMER1_isr 4C48  
                            fillRect@color 0031                               ?__tdiv_to_l_ 001C  
                              _printf$2753 0131                                i2_i2cLowSda 4C7E  
                              i2_i2cLowScl 4C98          __size_of_DS3231_Read_Alarm_1_Time 004A  
                         ___lldiv@quotient 0024                  ?_DS3231_Read_Alarm_1_Time 0001  
                                 strcpy@cp 0020                                   strlen@cp 0020  
                                 strcpy@to 001C                               _setup_minute 0060  
                             _setup_second 0062                            i2delay_ms@count 000B  
                    __end_of_setAddrWindow 4500                      __end_of_Do_Setup_Time 1A54  
                       fillRectangle@color 0026                              drawChar@color 003B  
                              _setup_month 0061                    __size_of_gen_2khz_sound 0012  
                       __end_of_write_data 4C12                ?_Update_Setup_Screen_Cursor 0001  
                             drawChar@line 0040                               drawChar@size 003F  
                           Do_LED_Out@Volt 0031                       __size_of_DS3231_Init 004C  
            __size_of_DS3231_Turn_On_Alarm 0034  
